#import "@preview/codly:1.3.0": *
#import "@preview/codly-languages:0.1.8": codly-languages
#codly(languages: codly-languages)
#show raw: codly-init
#set text(font: ("JetBrains Mono"))

= XLang-Rust 文档

#outline()

= 概述
XLang-Rust 是一个使用 Rust 语言编写的跨平台的实验性编程语言，旨在提供一种简单(?)而强大的编程体验。它结合了命令式和函数式编程的特性，目标是用最简洁的语法实现复杂的功能。

= 表达式/语句
XLang-Rust 使用和Rust类似的语句，使用分号 `;` 作为一组表达式的分割符。如果存在多个表达式，它们将被依次执行，最后一个表达式的值将作为整个语句的值。

如果表达式是空的，则返回 `null`。

```xlang
print(1; 2; 3); // 输出 3
print(1;) // 输出 null
```

= 原子表达式

为了在内部简化AST的构建，XLang-Rust 采用了原子表达式的概念。原子表达式是指被任意括号包围的表达式，或者是一个单个令牌。
原子表达式的值是它们内部的表达式的值。

下面的表达式都是原子表达式：
```xlang
(1; 2; 3) // 被括号包围的

[1, 2, 3] // 被方括号包围的

{1, 2, 3} // 被花括号包围的

variable // 单个变量

1 // 单个数字

"xxx" // 单个字符串

... // 其他单个令牌

```

= 括号/方括号/花括号

== 括号/方括号
XLang-Rust 并不对括号/方括号做任何区分，仅仅在函数调用和索引中意义不同，其他情况下二者都可以用作改变表达式的优先级。
```xlang
(1 + 2) * 3 // 9
[1 + 2] * 3 // 9
(1 + 2) * [3] // 9
```

当表达式为非原子表达式时，括号会调用其前面的表达式返回的lambda对象，而方括号会索引其前面的表达式返回的元组对象。
== 花括号

花括号是用来新建作用域的，花括号内的表达式会在一个新的作用域中执行。同时花括号内的变量定义不会影响外部作用域的变量定义。其求值结果是花括号内最后一个表达式的值。
```xlang
{
    a := 1;
    b := 2;
    a + b
} // 3
```

= 变量
XLang-Rust 是动态强类型的语言，变量可以在运行时被重新赋值。

使用 `:=` 运算符来在当前作用域定义变量，使用 `=` 运算符来赋值。

XLang-Rust 允许在同一作用域内重新定义变量。
```xlang
a := 1;
```

XLang-Rust 的赋值是强类型的，赋值时会检查类型是否匹配。如果不匹配，则会抛出 (`raise`) 异常。如果异常未被捕获，则会终止程序的执行并输出异常信息。

```xlang
a := 1;
a = "1"; // 抛出异常
a = 1; // 正常
a = 1.0; // 特殊情况，浮点数和整数可以互相转换
```
