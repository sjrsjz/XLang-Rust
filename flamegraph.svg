<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="870" onload="init(evt)" viewBox="0 0 1200 870" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="870" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="853.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="853.00"> </text><svg id="frames" x="10" width="1180" total_samples="43304032526"><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (29,159,258 samples, 0.07%)</title><rect x="0.0000%" y="725" width="0.0673%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="29159258"/><text x="0.2500%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (29,159,258 samples, 0.07%)</title><rect x="0.0000%" y="709" width="0.0673%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="29159258"/><text x="0.2500%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (29,159,258 samples, 0.07%)</title><rect x="0.0000%" y="693" width="0.0673%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="29159258"/><text x="0.2500%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (29,159,258 samples, 0.07%)</title><rect x="0.0000%" y="677" width="0.0673%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="29159258"/><text x="0.2500%" y="687.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (29,159,258 samples, 0.07%)</title><rect x="0.0000%" y="661" width="0.0673%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="29159258"/><text x="0.2500%" y="671.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (29,159,258 samples, 0.07%)</title><rect x="0.0000%" y="645" width="0.0673%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="29159258"/><text x="0.2500%" y="655.50"></text></g><g><title>alloc::alloc::alloc (29,159,258 samples, 0.07%)</title><rect x="0.0000%" y="629" width="0.0673%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="29159258"/><text x="0.2500%" y="639.50"></text></g><g><title>malloc@plt (29,159,258 samples, 0.07%)</title><rect x="0.0000%" y="613" width="0.0673%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="29159258"/><text x="0.2500%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (63,038,265 samples, 0.15%)</title><rect x="0.0000%" y="789" width="0.1456%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="63038265"/><text x="0.2500%" y="799.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (63,038,265 samples, 0.15%)</title><rect x="0.0000%" y="773" width="0.1456%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="63038265"/><text x="0.2500%" y="783.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (63,038,265 samples, 0.15%)</title><rect x="0.0000%" y="757" width="0.1456%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="63038265"/><text x="0.2500%" y="767.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (63,038,265 samples, 0.15%)</title><rect x="0.0000%" y="741" width="0.1456%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="63038265"/><text x="0.2500%" y="751.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (33,879,007 samples, 0.08%)</title><rect x="0.0673%" y="725" width="0.0782%" height="15" fill="rgb(216,20,37)" fg:x="29159258" fg:w="33879007"/><text x="0.3173%" y="735.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (33,879,007 samples, 0.08%)</title><rect x="0.0673%" y="709" width="0.0782%" height="15" fill="rgb(206,188,39)" fg:x="29159258" fg:w="33879007"/><text x="0.3173%" y="719.50"></text></g><g><title>memcpy@plt (33,879,007 samples, 0.08%)</title><rect x="0.0673%" y="693" width="0.0782%" height="15" fill="rgb(217,207,13)" fg:x="29159258" fg:w="33879007"/><text x="0.3173%" y="703.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCSystem::collect (11,719,771 samples, 0.03%)</title><rect x="0.1511%" y="789" width="0.0271%" height="15" fill="rgb(231,73,38)" fg:x="65430589" fg:w="11719771"/><text x="0.4011%" y="799.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCSystem::immediate_collect (11,719,771 samples, 0.03%)</title><rect x="0.1511%" y="773" width="0.0271%" height="15" fill="rgb(225,20,46)" fg:x="65430589" fg:w="11719771"/><text x="0.4011%" y="783.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCRef::free (11,719,771 samples, 0.03%)</title><rect x="0.1511%" y="757" width="0.0271%" height="15" fill="rgb(210,31,41)" fg:x="65430589" fg:w="11719771"/><text x="0.4011%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn XLang_Rust::vm::gc::gc::GCObject&gt;&gt; (11,719,771 samples, 0.03%)</title><rect x="0.1511%" y="741" width="0.0271%" height="15" fill="rgb(221,200,47)" fg:x="65430589" fg:w="11719771"/><text x="0.4011%" y="751.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11,719,771 samples, 0.03%)</title><rect x="0.1511%" y="725" width="0.0271%" height="15" fill="rgb(226,26,5)" fg:x="65430589" fg:w="11719771"/><text x="0.4011%" y="735.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (11,719,771 samples, 0.03%)</title><rect x="0.1511%" y="709" width="0.0271%" height="15" fill="rgb(249,33,26)" fg:x="65430589" fg:w="11719771"/><text x="0.4011%" y="719.50"></text></g><g><title>alloc::alloc::dealloc (11,719,771 samples, 0.03%)</title><rect x="0.1511%" y="693" width="0.0271%" height="15" fill="rgb(235,183,28)" fg:x="65430589" fg:w="11719771"/><text x="0.4011%" y="703.50"></text></g><g><title>free@plt (11,719,771 samples, 0.03%)</title><rect x="0.1511%" y="677" width="0.0271%" height="15" fill="rgb(221,5,38)" fg:x="65430589" fg:w="11719771"/><text x="0.4011%" y="687.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (26,690,676 samples, 0.06%)</title><rect x="0.5924%" y="469" width="0.0616%" height="15" fill="rgb(247,18,42)" fg:x="256536742" fg:w="26690676"/><text x="0.8424%" y="479.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (525,722,396 samples, 1.21%)</title><rect x="3.7718%" y="437" width="1.2140%" height="15" fill="rgb(241,131,45)" fg:x="1633321885" fg:w="525722396"/><text x="4.0218%" y="447.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (550,341,780 samples, 1.27%)</title><rect x="3.7460%" y="453" width="1.2709%" height="15" fill="rgb(249,31,29)" fg:x="1622156914" fg:w="550341780"/><text x="3.9960%" y="463.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (13,454,413 samples, 0.03%)</title><rect x="4.9858%" y="437" width="0.0311%" height="15" fill="rgb(225,111,53)" fg:x="2159044281" fg:w="13454413"/><text x="5.2358%" y="447.50"></text></g><g><title>&lt;XLang_Rust::vm::ir::DebugInfo as core::clone::Clone&gt;::clone (17,589,347 samples, 0.04%)</title><rect x="21.6649%" y="421" width="0.0406%" height="15" fill="rgb(238,160,17)" fg:x="9381779868" fg:w="17589347"/><text x="21.9149%" y="431.50"></text></g><g><title>_RNvCs7kbacHzvpHZ_7___rustc11___rdl_alloc (31,265,221 samples, 0.07%)</title><rect x="22.8694%" y="245" width="0.0722%" height="15" fill="rgb(214,148,48)" fg:x="9903372924" fg:w="31265221"/><text x="23.1194%" y="255.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (31,265,221 samples, 0.07%)</title><rect x="22.8694%" y="229" width="0.0722%" height="15" fill="rgb(232,36,49)" fg:x="9903372924" fg:w="31265221"/><text x="23.1194%" y="239.50"></text></g><g><title>core::ptr::read_volatile (9,092,546 samples, 0.02%)</title><rect x="22.9416%" y="245" width="0.0210%" height="15" fill="rgb(209,103,24)" fg:x="9934638145" fg:w="9092546"/><text x="23.1916%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (673,453,647 samples, 1.56%)</title><rect x="22.7228%" y="293" width="1.5552%" height="15" fill="rgb(229,88,8)" fg:x="9839868389" fg:w="673453647"/><text x="22.9728%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (673,453,647 samples, 1.56%)</title><rect x="22.7228%" y="277" width="1.5552%" height="15" fill="rgb(213,181,19)" fg:x="9839868389" fg:w="673453647"/><text x="22.9728%" y="287.50"></text></g><g><title>alloc::alloc::alloc (673,453,647 samples, 1.56%)</title><rect x="22.7228%" y="261" width="1.5552%" height="15" fill="rgb(254,191,54)" fg:x="9839868389" fg:w="673453647"/><text x="22.9728%" y="271.50"></text></g><g><title>malloc (569,591,345 samples, 1.32%)</title><rect x="22.9626%" y="245" width="1.3153%" height="15" fill="rgb(241,83,37)" fg:x="9943730691" fg:w="569591345"/><text x="23.2126%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (790,254,421 samples, 1.82%)</title><rect x="22.6298%" y="357" width="1.8249%" height="15" fill="rgb(233,36,39)" fg:x="9799608472" fg:w="790254421"/><text x="22.8798%" y="367.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (790,254,421 samples, 1.82%)</title><rect x="22.6298%" y="341" width="1.8249%" height="15" fill="rgb(226,3,54)" fg:x="9799608472" fg:w="790254421"/><text x="22.8798%" y="351.50">a..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (790,254,421 samples, 1.82%)</title><rect x="22.6298%" y="325" width="1.8249%" height="15" fill="rgb(245,192,40)" fg:x="9799608472" fg:w="790254421"/><text x="22.8798%" y="335.50">a..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (790,254,421 samples, 1.82%)</title><rect x="22.6298%" y="309" width="1.8249%" height="15" fill="rgb(238,167,29)" fg:x="9799608472" fg:w="790254421"/><text x="22.8798%" y="319.50">a..</text></g><g><title>alloc::raw_vec::layout_array (76,540,857 samples, 0.18%)</title><rect x="24.2779%" y="293" width="0.1768%" height="15" fill="rgb(232,182,51)" fg:x="10513322036" fg:w="76540857"/><text x="24.5279%" y="303.50"></text></g><g><title>core::alloc::layout::Layout::repeat (76,540,857 samples, 0.18%)</title><rect x="24.2779%" y="277" width="0.1768%" height="15" fill="rgb(231,60,39)" fg:x="10513322036" fg:w="76540857"/><text x="24.5279%" y="287.50"></text></g><g><title>&lt;XLang_Rust::vm::ir::IR as core::clone::Clone&gt;::clone (6,363,106,228 samples, 14.69%)</title><rect x="10.0364%" y="437" width="14.6940%" height="15" fill="rgb(208,69,12)" fg:x="4346160972" fg:w="6363106228"/><text x="10.2864%" y="447.50">&lt;XLang_Rust::vm::ir::I..</text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1,309,897,985 samples, 3.02%)</title><rect x="21.7055%" y="421" width="3.0249%" height="15" fill="rgb(235,93,37)" fg:x="9399369215" fg:w="1309897985"/><text x="21.9555%" y="431.50">&lt;al..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (909,658,728 samples, 2.10%)</title><rect x="22.6298%" y="405" width="2.1006%" height="15" fill="rgb(213,116,39)" fg:x="9799608472" fg:w="909658728"/><text x="22.8798%" y="415.50">&lt;..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (909,658,728 samples, 2.10%)</title><rect x="22.6298%" y="389" width="2.1006%" height="15" fill="rgb(222,207,29)" fg:x="9799608472" fg:w="909658728"/><text x="22.8798%" y="399.50">a..</text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (909,658,728 samples, 2.10%)</title><rect x="22.6298%" y="373" width="2.1006%" height="15" fill="rgb(206,96,30)" fg:x="9799608472" fg:w="909658728"/><text x="22.8798%" y="383.50">&lt;..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (119,404,307 samples, 0.28%)</title><rect x="24.4547%" y="357" width="0.2757%" height="15" fill="rgb(218,138,4)" fg:x="10589862893" fg:w="119404307"/><text x="24.7047%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (119,404,307 samples, 0.28%)</title><rect x="24.4547%" y="341" width="0.2757%" height="15" fill="rgb(250,191,14)" fg:x="10589862893" fg:w="119404307"/><text x="24.7047%" y="351.50"></text></g><g><title>memcpy (119,404,307 samples, 0.28%)</title><rect x="24.4547%" y="325" width="0.2757%" height="15" fill="rgb(239,60,40)" fg:x="10589862893" fg:w="119404307"/><text x="24.7047%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (29,087,690 samples, 0.07%)</title><rect x="24.7304%" y="437" width="0.0672%" height="15" fill="rgb(206,27,48)" fg:x="10709267200" fg:w="29087690"/><text x="24.9804%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (29,087,690 samples, 0.07%)</title><rect x="24.7304%" y="421" width="0.0672%" height="15" fill="rgb(225,35,8)" fg:x="10709267200" fg:w="29087690"/><text x="24.9804%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (20,151,139 samples, 0.05%)</title><rect x="24.7511%" y="405" width="0.0465%" height="15" fill="rgb(250,213,24)" fg:x="10718203751" fg:w="20151139"/><text x="25.0011%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (20,151,139 samples, 0.05%)</title><rect x="24.7511%" y="389" width="0.0465%" height="15" fill="rgb(247,123,22)" fg:x="10718203751" fg:w="20151139"/><text x="25.0011%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (20,151,139 samples, 0.05%)</title><rect x="24.7511%" y="373" width="0.0465%" height="15" fill="rgb(231,138,38)" fg:x="10718203751" fg:w="20151139"/><text x="25.0011%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (20,151,139 samples, 0.05%)</title><rect x="24.7511%" y="357" width="0.0465%" height="15" fill="rgb(231,145,46)" fg:x="10718203751" fg:w="20151139"/><text x="25.0011%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (79,980,766 samples, 0.18%)</title><rect x="24.7976%" y="421" width="0.1847%" height="15" fill="rgb(251,118,11)" fg:x="10738354890" fg:w="79980766"/><text x="25.0476%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (79,980,766 samples, 0.18%)</title><rect x="24.7976%" y="405" width="0.1847%" height="15" fill="rgb(217,147,25)" fg:x="10738354890" fg:w="79980766"/><text x="25.0476%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (55,191,727 samples, 0.13%)</title><rect x="24.8548%" y="389" width="0.1275%" height="15" fill="rgb(247,81,37)" fg:x="10763143929" fg:w="55191727"/><text x="25.1048%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (55,191,727 samples, 0.13%)</title><rect x="24.8548%" y="373" width="0.1275%" height="15" fill="rgb(209,12,38)" fg:x="10763143929" fg:w="55191727"/><text x="25.1048%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (55,191,727 samples, 0.13%)</title><rect x="24.8548%" y="357" width="0.1275%" height="15" fill="rgb(227,1,9)" fg:x="10763143929" fg:w="55191727"/><text x="25.1048%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (55,191,727 samples, 0.13%)</title><rect x="24.8548%" y="341" width="0.1275%" height="15" fill="rgb(248,47,43)" fg:x="10763143929" fg:w="55191727"/><text x="25.1048%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (105,098,553 samples, 0.24%)</title><rect x="24.7976%" y="437" width="0.2427%" height="15" fill="rgb(221,10,30)" fg:x="10738354890" fg:w="105098553"/><text x="25.0476%" y="447.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (25,117,787 samples, 0.06%)</title><rect x="24.9823%" y="421" width="0.0580%" height="15" fill="rgb(210,229,1)" fg:x="10818335656" fg:w="25117787"/><text x="25.2323%" y="431.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (25,117,787 samples, 0.06%)</title><rect x="24.9823%" y="405" width="0.0580%" height="15" fill="rgb(222,148,37)" fg:x="10818335656" fg:w="25117787"/><text x="25.2323%" y="415.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (641,895,258 samples, 1.48%)</title><rect x="25.0403%" y="437" width="1.4823%" height="15" fill="rgb(234,67,33)" fg:x="10843453443" fg:w="641895258"/><text x="25.2903%" y="447.50"></text></g><g><title>&lt;XLang_Rust::vm::executor::variable::VMStackObject as core::clone::Clone&gt;::clone (40,342,672 samples, 0.09%)</title><rect x="36.4593%" y="421" width="0.0932%" height="15" fill="rgb(247,98,35)" fg:x="15788364399" fg:w="40342672"/><text x="36.7093%" y="431.50"></text></g><g><title>&lt;XLang_Rust::vm::gc::gc::GCRef as core::clone::Clone&gt;::clone (15,877,863 samples, 0.04%)</title><rect x="36.5158%" y="405" width="0.0367%" height="15" fill="rgb(247,138,52)" fg:x="15812829208" fg:w="15877863"/><text x="36.7658%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (62,267,524 samples, 0.14%)</title><rect x="36.5525%" y="421" width="0.1438%" height="15" fill="rgb(213,79,30)" fg:x="15828707071" fg:w="62267524"/><text x="36.8025%" y="431.50"></text></g><g><title>alloc::string::String::as_str (62,267,524 samples, 0.14%)</title><rect x="36.5525%" y="405" width="0.1438%" height="15" fill="rgb(246,177,23)" fg:x="15828707071" fg:w="62267524"/><text x="36.8025%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (62,267,524 samples, 0.14%)</title><rect x="36.5525%" y="389" width="0.1438%" height="15" fill="rgb(230,62,27)" fg:x="15828707071" fg:w="62267524"/><text x="36.8025%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (62,267,524 samples, 0.14%)</title><rect x="36.5525%" y="373" width="0.1438%" height="15" fill="rgb(216,154,8)" fg:x="15828707071" fg:w="62267524"/><text x="36.8025%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (62,267,524 samples, 0.14%)</title><rect x="36.5525%" y="357" width="0.1438%" height="15" fill="rgb(244,35,45)" fg:x="15828707071" fg:w="62267524"/><text x="36.8025%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (62,267,524 samples, 0.14%)</title><rect x="36.5525%" y="341" width="0.1438%" height="15" fill="rgb(251,115,12)" fg:x="15828707071" fg:w="62267524"/><text x="36.8025%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (62,267,524 samples, 0.14%)</title><rect x="36.5525%" y="325" width="0.1438%" height="15" fill="rgb(240,54,50)" fg:x="15828707071" fg:w="62267524"/><text x="36.8025%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (44,737,835 samples, 0.10%)</title><rect x="36.6963%" y="421" width="0.1033%" height="15" fill="rgb(233,84,52)" fg:x="15890974595" fg:w="44737835"/><text x="36.9463%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (44,737,835 samples, 0.10%)</title><rect x="36.6963%" y="405" width="0.1033%" height="15" fill="rgb(207,117,47)" fg:x="15890974595" fg:w="44737835"/><text x="36.9463%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (8,839,679 samples, 0.02%)</title><rect x="36.7996%" y="405" width="0.0204%" height="15" fill="rgb(249,43,39)" fg:x="15935712430" fg:w="8839679"/><text x="37.0496%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (8,839,679 samples, 0.02%)</title><rect x="36.7996%" y="389" width="0.0204%" height="15" fill="rgb(209,38,44)" fg:x="15935712430" fg:w="8839679"/><text x="37.0496%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (8,839,679 samples, 0.02%)</title><rect x="36.7996%" y="373" width="0.0204%" height="15" fill="rgb(236,212,23)" fg:x="15935712430" fg:w="8839679"/><text x="37.0496%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (8,839,679 samples, 0.02%)</title><rect x="36.7996%" y="357" width="0.0204%" height="15" fill="rgb(242,79,21)" fg:x="15935712430" fg:w="8839679"/><text x="37.0496%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (8,839,679 samples, 0.02%)</title><rect x="36.7996%" y="341" width="0.0204%" height="15" fill="rgb(211,96,35)" fg:x="15935712430" fg:w="8839679"/><text x="37.0496%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (8,839,679 samples, 0.02%)</title><rect x="36.7996%" y="325" width="0.0204%" height="15" fill="rgb(253,215,40)" fg:x="15935712430" fg:w="8839679"/><text x="37.0496%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (13,278,867 samples, 0.03%)</title><rect x="36.7996%" y="421" width="0.0307%" height="15" fill="rgb(211,81,21)" fg:x="15935712430" fg:w="13278867"/><text x="37.0496%" y="431.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (4,439,188 samples, 0.01%)</title><rect x="36.8200%" y="405" width="0.0103%" height="15" fill="rgb(208,190,38)" fg:x="15944552109" fg:w="4439188"/><text x="37.0700%" y="415.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (4,439,188 samples, 0.01%)</title><rect x="36.8200%" y="389" width="0.0103%" height="15" fill="rgb(235,213,38)" fg:x="15944552109" fg:w="4439188"/><text x="37.0700%" y="399.50"></text></g><g><title>&lt;isize as core::ops::arith::AddAssign&lt;&amp;isize&gt;&gt;::add_assign (22,617,251 samples, 0.05%)</title><rect x="36.8303%" y="421" width="0.0522%" height="15" fill="rgb(237,122,38)" fg:x="15948991297" fg:w="22617251"/><text x="37.0803%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (4,467,094 samples, 0.01%)</title><rect x="37.1418%" y="405" width="0.0103%" height="15" fill="rgb(244,218,35)" fg:x="16083908491" fg:w="4467094"/><text x="37.3918%" y="415.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (4,467,094 samples, 0.01%)</title><rect x="37.1418%" y="389" width="0.0103%" height="15" fill="rgb(240,68,47)" fg:x="16083908491" fg:w="4467094"/><text x="37.3918%" y="399.50"></text></g><g><title>&lt;XLang_Rust::vm::executor::variable::VMNativeFunction as XLang_Rust::vm::gc::gc::GCObject&gt;::get_traceable (42,672,294 samples, 0.10%)</title><rect x="37.2143%" y="389" width="0.0985%" height="15" fill="rgb(210,16,53)" fg:x="16115299786" fg:w="42672294"/><text x="37.4643%" y="399.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCRef::clone_ref (112,554,878 samples, 0.26%)</title><rect x="37.1521%" y="405" width="0.2599%" height="15" fill="rgb(235,124,12)" fg:x="16088375585" fg:w="112554878"/><text x="37.4021%" y="415.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCRef::is_online (42,958,383 samples, 0.10%)</title><rect x="37.3129%" y="389" width="0.0992%" height="15" fill="rgb(224,169,11)" fg:x="16157972080" fg:w="42958383"/><text x="37.5629%" y="399.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCRef::get_const_traceable (42,958,383 samples, 0.10%)</title><rect x="37.3129%" y="373" width="0.0992%" height="15" fill="rgb(250,166,2)" fg:x="16157972080" fg:w="42958383"/><text x="37.5629%" y="383.50"></text></g><g><title>&lt;XLang_Rust::vm::executor::variable::VMNativeFunction as XLang_Rust::vm::gc::gc::GCObject&gt;::get_const_traceable (31,591,406 samples, 0.07%)</title><rect x="37.3391%" y="357" width="0.0730%" height="15" fill="rgb(242,216,29)" fg:x="16169339057" fg:w="31591406"/><text x="37.5891%" y="367.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter_mut (89,492,594 samples, 0.21%)</title><rect x="37.4121%" y="405" width="0.2067%" height="15" fill="rgb(230,116,27)" fg:x="16200930463" fg:w="89492594"/><text x="37.6621%" y="415.50"></text></g><g><title>core::slice::iter::IterMut&lt;T&gt;::new (89,492,594 samples, 0.21%)</title><rect x="37.4121%" y="389" width="0.2067%" height="15" fill="rgb(228,99,48)" fg:x="16200930463" fg:w="89492594"/><text x="37.6621%" y="399.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (89,492,594 samples, 0.21%)</title><rect x="37.4121%" y="373" width="0.2067%" height="15" fill="rgb(253,11,6)" fg:x="16200930463" fg:w="89492594"/><text x="37.6621%" y="383.50"></text></g><g><title>&lt;rustc_hash::FxHasher as core::hash::Hasher&gt;::finish (20,334,120 samples, 0.05%)</title><rect x="38.1512%" y="325" width="0.0470%" height="15" fill="rgb(247,143,39)" fg:x="16520991716" fg:w="20334120"/><text x="38.4012%" y="335.50"></text></g><g><title>core::num::&lt;impl usize&gt;::rotate_left (20,334,120 samples, 0.05%)</title><rect x="38.1512%" y="309" width="0.0470%" height="15" fill="rgb(236,97,10)" fg:x="16520991716" fg:w="20334120"/><text x="38.4012%" y="319.50"></text></g><g><title>&lt;rustc_hash::FxHasher as core::hash::Hasher&gt;::write (108,184,717 samples, 0.25%)</title><rect x="38.1981%" y="277" width="0.2498%" height="15" fill="rgb(233,208,19)" fg:x="16541325836" fg:w="108184717"/><text x="38.4481%" y="287.50"></text></g><g><title>rustc_hash::hash_bytes (108,184,717 samples, 0.25%)</title><rect x="38.1981%" y="261" width="0.2498%" height="15" fill="rgb(216,164,2)" fg:x="16541325836" fg:w="108184717"/><text x="38.4481%" y="271.50"></text></g><g><title>rustc_hash::multiply_mix (13,819,779 samples, 0.03%)</title><rect x="38.4160%" y="245" width="0.0319%" height="15" fill="rgb(220,129,5)" fg:x="16635690774" fg:w="13819779"/><text x="38.6660%" y="255.50"></text></g><g><title>hashbrown::map::make_hash (130,767,405 samples, 0.30%)</title><rect x="38.1512%" y="357" width="0.3020%" height="15" fill="rgb(242,17,10)" fg:x="16520991716" fg:w="130767405"/><text x="38.4012%" y="367.50"></text></g><g><title>core::hash::BuildHasher::hash_one (130,767,405 samples, 0.30%)</title><rect x="38.1512%" y="341" width="0.3020%" height="15" fill="rgb(242,107,0)" fg:x="16520991716" fg:w="130767405"/><text x="38.4012%" y="351.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (110,433,285 samples, 0.26%)</title><rect x="38.1981%" y="325" width="0.2550%" height="15" fill="rgb(251,28,31)" fg:x="16541325836" fg:w="110433285"/><text x="38.4481%" y="335.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (110,433,285 samples, 0.26%)</title><rect x="38.1981%" y="309" width="0.2550%" height="15" fill="rgb(233,223,10)" fg:x="16541325836" fg:w="110433285"/><text x="38.4481%" y="319.50"></text></g><g><title>core::hash::Hasher::write_str (110,433,285 samples, 0.26%)</title><rect x="38.1981%" y="293" width="0.2550%" height="15" fill="rgb(215,21,27)" fg:x="16541325836" fg:w="110433285"/><text x="38.4481%" y="303.50"></text></g><g><title>&lt;hashbrown::control::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (222,958,107 samples, 0.51%)</title><rect x="38.4531%" y="309" width="0.5149%" height="15" fill="rgb(232,23,21)" fg:x="16651759121" fg:w="222958107"/><text x="38.7031%" y="319.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::lowest_set_bit (222,958,107 samples, 0.51%)</title><rect x="38.4531%" y="293" width="0.5149%" height="15" fill="rgb(244,5,23)" fg:x="16651759121" fg:w="222958107"/><text x="38.7031%" y="303.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::nonzero_trailing_zeros (4,641,422 samples, 0.01%)</title><rect x="38.9573%" y="277" width="0.0107%" height="15" fill="rgb(226,81,46)" fg:x="16870075806" fg:w="4641422"/><text x="39.2073%" y="287.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u64&gt;::trailing_zeros (4,641,422 samples, 0.01%)</title><rect x="38.9573%" y="261" width="0.0107%" height="15" fill="rgb(247,70,30)" fg:x="16870075806" fg:w="4641422"/><text x="39.2073%" y="271.50"></text></g><g><title>hashbrown::control::group::neon::Group::match_tag (474,569,934 samples, 1.10%)</title><rect x="38.9680%" y="309" width="1.0959%" height="15" fill="rgb(212,68,19)" fg:x="16874717228" fg:w="474569934"/><text x="39.2180%" y="319.50"></text></g><g><title>core::core_arch::arm_shared::neon::generated::vceq_u8 (474,569,934 samples, 1.10%)</title><rect x="38.9680%" y="293" width="1.0959%" height="15" fill="rgb(240,187,13)" fg:x="16874717228" fg:w="474569934"/><text x="39.2180%" y="303.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (562,648,541 samples, 1.30%)</title><rect x="40.0639%" y="293" width="1.2993%" height="15" fill="rgb(223,113,26)" fg:x="17349287162" fg:w="562648541"/><text x="40.3139%" y="303.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (562,648,541 samples, 1.30%)</title><rect x="40.0639%" y="277" width="1.2993%" height="15" fill="rgb(206,192,2)" fg:x="17349287162" fg:w="562648541"/><text x="40.3139%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (522,449,730 samples, 1.21%)</title><rect x="40.1567%" y="261" width="1.2065%" height="15" fill="rgb(241,108,4)" fg:x="17389485973" fg:w="522449730"/><text x="40.4067%" y="271.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (522,449,730 samples, 1.21%)</title><rect x="40.1567%" y="245" width="1.2065%" height="15" fill="rgb(247,173,49)" fg:x="17389485973" fg:w="522449730"/><text x="40.4067%" y="255.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (522,449,730 samples, 1.21%)</title><rect x="40.1567%" y="229" width="1.2065%" height="15" fill="rgb(224,114,35)" fg:x="17389485973" fg:w="522449730"/><text x="40.4067%" y="239.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (522,449,730 samples, 1.21%)</title><rect x="40.1567%" y="213" width="1.2065%" height="15" fill="rgb(245,159,27)" fg:x="17389485973" fg:w="522449730"/><text x="40.4067%" y="223.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (522,449,730 samples, 1.21%)</title><rect x="40.1567%" y="197" width="1.2065%" height="15" fill="rgb(245,172,44)" fg:x="17389485973" fg:w="522449730"/><text x="40.4067%" y="207.50"></text></g><g><title>memcmp (148,652,338 samples, 0.34%)</title><rect x="41.0199%" y="181" width="0.3433%" height="15" fill="rgb(236,23,11)" fg:x="17763283365" fg:w="148652338"/><text x="41.2699%" y="191.50"></text></g><g><title>XLang_Rust::vm::executor::context::Context::get_var (1,969,386,188 samples, 4.55%)</title><rect x="36.8825%" y="421" width="4.5478%" height="15" fill="rgb(205,117,38)" fg:x="15971608548" fg:w="1969386188"/><text x="37.1325%" y="431.50">XLang..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1,650,571,679 samples, 3.81%)</title><rect x="37.6187%" y="405" width="3.8116%" height="15" fill="rgb(237,72,25)" fg:x="16290423057" fg:w="1650571679"/><text x="37.8687%" y="415.50">std:..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1,650,571,679 samples, 3.81%)</title><rect x="37.6187%" y="389" width="3.8116%" height="15" fill="rgb(244,70,9)" fg:x="16290423057" fg:w="1650571679"/><text x="37.8687%" y="399.50">hash..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1,650,571,679 samples, 3.81%)</title><rect x="37.6187%" y="373" width="3.8116%" height="15" fill="rgb(217,125,39)" fg:x="16290423057" fg:w="1650571679"/><text x="37.8687%" y="383.50">hash..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (1,289,235,615 samples, 2.98%)</title><rect x="38.4531%" y="357" width="2.9772%" height="15" fill="rgb(235,36,10)" fg:x="16651759121" fg:w="1289235615"/><text x="38.7031%" y="367.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1,289,235,615 samples, 2.98%)</title><rect x="38.4531%" y="341" width="2.9772%" height="15" fill="rgb(251,123,47)" fg:x="16651759121" fg:w="1289235615"/><text x="38.7031%" y="351.50">has..</text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1,289,235,615 samples, 2.98%)</title><rect x="38.4531%" y="325" width="2.9772%" height="15" fill="rgb(221,13,13)" fg:x="16651759121" fg:w="1289235615"/><text x="38.7031%" y="335.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (591,707,574 samples, 1.37%)</title><rect x="40.0639%" y="309" width="1.3664%" height="15" fill="rgb(238,131,9)" fg:x="17349287162" fg:w="591707574"/><text x="40.3139%" y="319.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (29,059,033 samples, 0.07%)</title><rect x="41.3632%" y="293" width="0.0671%" height="15" fill="rgb(211,50,8)" fg:x="17911935703" fg:w="29059033"/><text x="41.6132%" y="303.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (29,059,033 samples, 0.07%)</title><rect x="41.3632%" y="277" width="0.0671%" height="15" fill="rgb(245,182,24)" fg:x="17911935703" fg:w="29059033"/><text x="41.6132%" y="287.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (29,059,033 samples, 0.07%)</title><rect x="41.3632%" y="261" width="0.0671%" height="15" fill="rgb(242,14,37)" fg:x="17911935703" fg:w="29059033"/><text x="41.6132%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity (13,361,700 samples, 0.03%)</title><rect x="41.5679%" y="389" width="0.0309%" height="15" fill="rgb(246,228,12)" fg:x="18000592937" fg:w="13361700"/><text x="41.8179%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::capacity (13,361,700 samples, 0.03%)</title><rect x="41.5679%" y="373" width="0.0309%" height="15" fill="rgb(213,55,15)" fg:x="18000592937" fg:w="13361700"/><text x="41.8179%" y="383.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (20,180,720 samples, 0.05%)</title><rect x="41.5988%" y="389" width="0.0466%" height="15" fill="rgb(209,9,3)" fg:x="18013954637" fg:w="20180720"/><text x="41.8488%" y="399.50"></text></g><g><title>XLang_Rust::vm::executor::context::Context::new_frame (144,121,994 samples, 0.33%)</title><rect x="41.4303%" y="421" width="0.3328%" height="15" fill="rgb(230,59,30)" fg:x="17940994736" fg:w="144121994"/><text x="41.6803%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (116,068,117 samples, 0.27%)</title><rect x="41.4951%" y="405" width="0.2680%" height="15" fill="rgb(209,121,21)" fg:x="17969048613" fg:w="116068117"/><text x="41.7451%" y="415.50"></text></g><g><title>core::ptr::write (50,981,373 samples, 0.12%)</title><rect x="41.6454%" y="389" width="0.1177%" height="15" fill="rgb(220,109,13)" fg:x="18034135357" fg:w="50981373"/><text x="41.8954%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (15,446,820 samples, 0.04%)</title><rect x="41.8846%" y="405" width="0.0357%" height="15" fill="rgb(232,18,1)" fg:x="18137735156" fg:w="15446820"/><text x="42.1346%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (15,446,820 samples, 0.04%)</title><rect x="41.8846%" y="389" width="0.0357%" height="15" fill="rgb(215,41,42)" fg:x="18137735156" fg:w="15446820"/><text x="42.1346%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::is_empty (4,473,843 samples, 0.01%)</title><rect x="41.9203%" y="405" width="0.0103%" height="15" fill="rgb(224,123,36)" fg:x="18153181976" fg:w="4473843"/><text x="42.1703%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (4,473,843 samples, 0.01%)</title><rect x="41.9203%" y="389" width="0.0103%" height="15" fill="rgb(240,125,3)" fg:x="18153181976" fg:w="4473843"/><text x="42.1703%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (51,645,244 samples, 0.12%)</title><rect x="41.9306%" y="405" width="0.1193%" height="15" fill="rgb(205,98,50)" fg:x="18157655819" fg:w="51645244"/><text x="42.1806%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (235,039,634 samples, 0.54%)</title><rect x="42.0499%" y="405" width="0.5428%" height="15" fill="rgb(205,185,37)" fg:x="18209301063" fg:w="235039634"/><text x="42.2999%" y="415.50"></text></g><g><title>core::ptr::write (232,802,951 samples, 0.54%)</title><rect x="42.0551%" y="389" width="0.5376%" height="15" fill="rgb(238,207,15)" fg:x="18211537746" fg:w="232802951"/><text x="42.3051%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::truncate (6,637,131 samples, 0.02%)</title><rect x="42.5927%" y="405" width="0.0153%" height="15" fill="rgb(213,199,42)" fg:x="18444340697" fg:w="6637131"/><text x="42.8427%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (29,658,305 samples, 0.07%)</title><rect x="42.7894%" y="341" width="0.0685%" height="15" fill="rgb(235,201,11)" fg:x="18529543847" fg:w="29658305"/><text x="43.0394%" y="351.50"></text></g><g><title>&lt;std::collections::hash::map::Values&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (29,658,305 samples, 0.07%)</title><rect x="42.7894%" y="325" width="0.0685%" height="15" fill="rgb(207,46,11)" fg:x="18529543847" fg:w="29658305"/><text x="43.0394%" y="335.50"></text></g><g><title>&lt;std::collections::hash::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (29,658,305 samples, 0.07%)</title><rect x="42.7894%" y="309" width="0.0685%" height="15" fill="rgb(241,35,35)" fg:x="18529543847" fg:w="29658305"/><text x="43.0394%" y="319.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (29,658,305 samples, 0.07%)</title><rect x="42.7894%" y="293" width="0.0685%" height="15" fill="rgb(243,32,47)" fg:x="18529543847" fg:w="29658305"/><text x="43.0394%" y="303.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (29,658,305 samples, 0.07%)</title><rect x="42.7894%" y="277" width="0.0685%" height="15" fill="rgb(247,202,23)" fg:x="18529543847" fg:w="29658305"/><text x="43.0394%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (110,470,297 samples, 0.26%)</title><rect x="42.6080%" y="405" width="0.2551%" height="15" fill="rgb(219,102,11)" fg:x="18450977828" fg:w="110470297"/><text x="42.8580%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (110,470,297 samples, 0.26%)</title><rect x="42.6080%" y="389" width="0.2551%" height="15" fill="rgb(243,110,44)" fg:x="18450977828" fg:w="110470297"/><text x="42.8580%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (85,699,625 samples, 0.20%)</title><rect x="42.6652%" y="373" width="0.1979%" height="15" fill="rgb(222,74,54)" fg:x="18475748500" fg:w="85699625"/><text x="42.9152%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (36,568,981 samples, 0.08%)</title><rect x="42.7786%" y="357" width="0.0844%" height="15" fill="rgb(216,99,12)" fg:x="18524879144" fg:w="36568981"/><text x="43.0286%" y="367.50"></text></g><g><title>core::option::Option&lt;&amp;T&gt;::cloned (17,743,962 samples, 0.04%)</title><rect x="42.8631%" y="405" width="0.0410%" height="15" fill="rgb(226,22,26)" fg:x="18561448125" fg:w="17743962"/><text x="43.1131%" y="415.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for usize&gt;::clone (15,421,562 samples, 0.04%)</title><rect x="42.8685%" y="389" width="0.0356%" height="15" fill="rgb(217,163,10)" fg:x="18563770525" fg:w="15421562"/><text x="43.1185%" y="399.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (39,721,505 samples, 0.09%)</title><rect x="42.9041%" y="405" width="0.0917%" height="15" fill="rgb(213,25,53)" fg:x="18579192087" fg:w="39721505"/><text x="43.1541%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;(std::collections::hash::map::HashMap&lt;alloc::string::String,XLang_Rust::vm::gc::gc::GCRef,rustc_hash::FxBuildHasher&gt;,bool,usize,bool)&gt;&gt; (8,900,117 samples, 0.02%)</title><rect x="42.9958%" y="405" width="0.0206%" height="15" fill="rgb(252,105,26)" fg:x="18618913592" fg:w="8900117"/><text x="43.2458%" y="415.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::last (17,926,862 samples, 0.04%)</title><rect x="43.0163%" y="405" width="0.0414%" height="15" fill="rgb(220,39,43)" fg:x="18627813709" fg:w="17926862"/><text x="43.2663%" y="415.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (28,495,809 samples, 0.07%)</title><rect x="43.0577%" y="309" width="0.0658%" height="15" fill="rgb(229,68,48)" fg:x="18645740571" fg:w="28495809"/><text x="43.3077%" y="319.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::new (33,069,579 samples, 0.08%)</title><rect x="43.0577%" y="325" width="0.0764%" height="15" fill="rgb(252,8,32)" fg:x="18645740571" fg:w="33069579"/><text x="43.3077%" y="335.50"></text></g><g><title>XLang_Rust::vm::executor::context::Context::pop_frame_except_top (633,793,585 samples, 1.46%)</title><rect x="41.7631%" y="421" width="1.4636%" height="15" fill="rgb(223,20,43)" fg:x="18085116730" fg:w="633793585"/><text x="42.0131%" y="431.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::values (73,169,744 samples, 0.17%)</title><rect x="43.0577%" y="405" width="0.1690%" height="15" fill="rgb(229,81,49)" fg:x="18645740571" fg:w="73169744"/><text x="43.3077%" y="415.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::iter (73,169,744 samples, 0.17%)</title><rect x="43.0577%" y="389" width="0.1690%" height="15" fill="rgb(236,28,36)" fg:x="18645740571" fg:w="73169744"/><text x="43.3077%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (73,169,744 samples, 0.17%)</title><rect x="43.0577%" y="373" width="0.1690%" height="15" fill="rgb(249,185,26)" fg:x="18645740571" fg:w="73169744"/><text x="43.3077%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter (73,169,744 samples, 0.17%)</title><rect x="43.0577%" y="357" width="0.1690%" height="15" fill="rgb(249,174,33)" fg:x="18645740571" fg:w="73169744"/><text x="43.3077%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::iter (73,169,744 samples, 0.17%)</title><rect x="43.0577%" y="341" width="0.1690%" height="15" fill="rgb(233,201,37)" fg:x="18645740571" fg:w="73169744"/><text x="43.3077%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::data_end (40,100,165 samples, 0.09%)</title><rect x="43.1341%" y="325" width="0.0926%" height="15" fill="rgb(221,78,26)" fg:x="18678810150" fg:w="40100165"/><text x="43.3841%" y="335.50"></text></g><g><title>XLang_Rust::vm::executor::variable::VMBoolean::new (127,827,393 samples, 0.30%)</title><rect x="43.2267%" y="421" width="0.2952%" height="15" fill="rgb(250,127,30)" fg:x="18718910315" fg:w="127827393"/><text x="43.4767%" y="431.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCTraceable::new (127,827,393 samples, 0.30%)</title><rect x="43.2267%" y="405" width="0.2952%" height="15" fill="rgb(230,49,44)" fg:x="18718910315" fg:w="127827393"/><text x="43.4767%" y="415.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (24,674,218 samples, 0.06%)</title><rect x="43.4649%" y="389" width="0.0570%" height="15" fill="rgb(229,67,23)" fg:x="18822063490" fg:w="24674218"/><text x="43.7149%" y="399.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::with_hasher (24,674,218 samples, 0.06%)</title><rect x="43.4649%" y="373" width="0.0570%" height="15" fill="rgb(249,83,47)" fg:x="18822063490" fg:w="24674218"/><text x="43.7149%" y="383.50"></text></g><g><title>XLang_Rust::vm::executor::variable::VMInt::new (281,530,392 samples, 0.65%)</title><rect x="43.5219%" y="421" width="0.6501%" height="15" fill="rgb(215,43,3)" fg:x="18846737708" fg:w="281530392"/><text x="43.7719%" y="431.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCTraceable::new (277,305,920 samples, 0.64%)</title><rect x="43.5317%" y="405" width="0.6404%" height="15" fill="rgb(238,154,13)" fg:x="18850962180" fg:w="277305920"/><text x="43.7817%" y="415.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (56,166,478 samples, 0.13%)</title><rect x="44.0423%" y="389" width="0.1297%" height="15" fill="rgb(219,56,2)" fg:x="19072101622" fg:w="56166478"/><text x="44.2923%" y="399.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::with_hasher (56,166,478 samples, 0.13%)</title><rect x="44.0423%" y="373" width="0.1297%" height="15" fill="rgb(233,0,4)" fg:x="19072101622" fg:w="56166478"/><text x="44.2923%" y="383.50"></text></g><g><title>XLang_Rust::vm::executor::variable::VMNull::new (155,200,144 samples, 0.36%)</title><rect x="44.1720%" y="421" width="0.3584%" height="15" fill="rgb(235,30,7)" fg:x="19128268100" fg:w="155200144"/><text x="44.4220%" y="431.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCTraceable::new (155,200,144 samples, 0.36%)</title><rect x="44.1720%" y="405" width="0.3584%" height="15" fill="rgb(250,79,13)" fg:x="19128268100" fg:w="155200144"/><text x="44.4220%" y="415.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (38,357,427 samples, 0.09%)</title><rect x="44.4418%" y="389" width="0.0886%" height="15" fill="rgb(211,146,34)" fg:x="19245110817" fg:w="38357427"/><text x="44.6918%" y="399.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::with_hasher (38,357,427 samples, 0.09%)</title><rect x="44.4418%" y="373" width="0.0886%" height="15" fill="rgb(228,22,38)" fg:x="19245110817" fg:w="38357427"/><text x="44.6918%" y="383.50"></text></g><g><title>&lt;XLang_Rust::vm::executor::variable::VMNativeFunction as XLang_Rust::vm::gc::gc::GCObject&gt;::get_const_traceable (6,805,355 samples, 0.02%)</title><rect x="45.3427%" y="389" width="0.0157%" height="15" fill="rgb(235,168,5)" fg:x="19635233982" fg:w="6805355"/><text x="45.5927%" y="399.50"></text></g><g><title>XLang_Rust::vm::executor::variable::VMInt::new (22,690,705 samples, 0.05%)</title><rect x="45.3585%" y="389" width="0.0524%" height="15" fill="rgb(221,155,16)" fg:x="19642039337" fg:w="22690705"/><text x="45.6085%" y="399.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCTraceable::new (11,251,259 samples, 0.03%)</title><rect x="45.3849%" y="373" width="0.0260%" height="15" fill="rgb(215,215,53)" fg:x="19653478783" fg:w="11251259"/><text x="45.6349%" y="383.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCRef::as_const_type (13,638,897 samples, 0.03%)</title><rect x="45.4109%" y="389" width="0.0315%" height="15" fill="rgb(223,4,10)" fg:x="19664730042" fg:w="13638897"/><text x="45.6609%" y="399.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCRef::isinstance (91,925,077 samples, 0.21%)</title><rect x="45.4423%" y="389" width="0.2123%" height="15" fill="rgb(234,103,6)" fg:x="19678368939" fg:w="91925077"/><text x="45.6923%" y="399.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCRef::get_const_traceable (91,925,077 samples, 0.21%)</title><rect x="45.4423%" y="373" width="0.2123%" height="15" fill="rgb(227,97,0)" fg:x="19678368939" fg:w="91925077"/><text x="45.6923%" y="383.50"></text></g><g><title>&lt;XLang_Rust::vm::executor::variable::VMNativeFunction as XLang_Rust::vm::gc::gc::GCObject&gt;::get_const_traceable (6,549,157 samples, 0.02%)</title><rect x="45.6395%" y="357" width="0.0151%" height="15" fill="rgb(234,150,53)" fg:x="19763744859" fg:w="6549157"/><text x="45.8895%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (16,464,658 samples, 0.04%)</title><rect x="46.3526%" y="341" width="0.0380%" height="15" fill="rgb(228,201,54)" fg:x="20072565029" fg:w="16464658"/><text x="46.6026%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (16,464,658 samples, 0.04%)</title><rect x="46.3526%" y="325" width="0.0380%" height="15" fill="rgb(222,22,37)" fg:x="20072565029" fg:w="16464658"/><text x="46.6026%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (16,464,658 samples, 0.04%)</title><rect x="46.3526%" y="309" width="0.0380%" height="15" fill="rgb(237,53,32)" fg:x="20072565029" fg:w="16464658"/><text x="46.6026%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (7,035,552 samples, 0.02%)</title><rect x="46.3744%" y="293" width="0.0162%" height="15" fill="rgb(233,25,53)" fg:x="20081994135" fg:w="7035552"/><text x="46.6244%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (7,035,552 samples, 0.02%)</title><rect x="46.3744%" y="277" width="0.0162%" height="15" fill="rgb(210,40,34)" fg:x="20081994135" fg:w="7035552"/><text x="46.6244%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (7,035,552 samples, 0.02%)</title><rect x="46.3744%" y="261" width="0.0162%" height="15" fill="rgb(241,220,44)" fg:x="20081994135" fg:w="7035552"/><text x="46.6244%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (7,035,552 samples, 0.02%)</title><rect x="46.3744%" y="245" width="0.0162%" height="15" fill="rgb(235,28,35)" fg:x="20081994135" fg:w="7035552"/><text x="46.6244%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (16,460,471 samples, 0.04%)</title><rect x="46.3907%" y="325" width="0.0380%" height="15" fill="rgb(210,56,17)" fg:x="20089029687" fg:w="16460471"/><text x="46.6407%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_slice (16,460,471 samples, 0.04%)</title><rect x="46.3907%" y="309" width="0.0380%" height="15" fill="rgb(224,130,29)" fg:x="20089029687" fg:w="16460471"/><text x="46.6407%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (11,758,555 samples, 0.03%)</title><rect x="46.4015%" y="293" width="0.0272%" height="15" fill="rgb(235,212,8)" fg:x="20093731603" fg:w="11758555"/><text x="46.6515%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (11,758,555 samples, 0.03%)</title><rect x="46.4015%" y="277" width="0.0272%" height="15" fill="rgb(223,33,50)" fg:x="20093731603" fg:w="11758555"/><text x="46.6515%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (11,758,555 samples, 0.03%)</title><rect x="46.4015%" y="261" width="0.0272%" height="15" fill="rgb(219,149,13)" fg:x="20093731603" fg:w="11758555"/><text x="46.6515%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (11,758,555 samples, 0.03%)</title><rect x="46.4015%" y="245" width="0.0272%" height="15" fill="rgb(250,156,29)" fg:x="20093731603" fg:w="11758555"/><text x="46.6515%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (21,180,526 samples, 0.05%)</title><rect x="46.3907%" y="341" width="0.0489%" height="15" fill="rgb(216,193,19)" fg:x="20089029687" fg:w="21180526"/><text x="46.6407%" y="351.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (4,720,055 samples, 0.01%)</title><rect x="46.4287%" y="325" width="0.0109%" height="15" fill="rgb(216,135,14)" fg:x="20105490158" fg:w="4720055"/><text x="46.6787%" y="335.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (4,720,055 samples, 0.01%)</title><rect x="46.4287%" y="309" width="0.0109%" height="15" fill="rgb(241,47,5)" fg:x="20105490158" fg:w="4720055"/><text x="46.6787%" y="319.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (21,232,784 samples, 0.05%)</title><rect x="46.4396%" y="341" width="0.0490%" height="15" fill="rgb(233,42,35)" fg:x="20110210213" fg:w="21232784"/><text x="46.6896%" y="351.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::read (18,886,082 samples, 0.04%)</title><rect x="46.4450%" y="325" width="0.0436%" height="15" fill="rgb(231,13,6)" fg:x="20112556915" fg:w="18886082"/><text x="46.6950%" y="335.50"></text></g><g><title>core::ptr::read (18,886,082 samples, 0.04%)</title><rect x="46.4450%" y="309" width="0.0436%" height="15" fill="rgb(207,181,40)" fg:x="20112556915" fg:w="18886082"/><text x="46.6950%" y="319.50"></text></g><g><title>&lt;XLang_Rust::vm::executor::variable::VMInstructions as XLang_Rust::vm::gc::gc::GCObject&gt;::free (18,843,075 samples, 0.04%)</title><rect x="46.6666%" y="325" width="0.0435%" height="15" fill="rgb(254,173,49)" fg:x="20208515408" fg:w="18843075"/><text x="46.9166%" y="335.50"></text></g><g><title>_RNvCs7kbacHzvpHZ_7___rustc13___rdl_dealloc (7,077,366 samples, 0.02%)</title><rect x="46.7808%" y="261" width="0.0163%" height="15" fill="rgb(221,1,38)" fg:x="20257978750" fg:w="7077366"/><text x="47.0308%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (374,395,011 samples, 0.86%)</title><rect x="46.7481%" y="293" width="0.8646%" height="15" fill="rgb(206,124,46)" fg:x="20243806066" fg:w="374395011"/><text x="46.9981%" y="303.50"></text></g><g><title>alloc::alloc::dealloc (374,395,011 samples, 0.86%)</title><rect x="46.7481%" y="277" width="0.8646%" height="15" fill="rgb(249,21,11)" fg:x="20243806066" fg:w="374395011"/><text x="46.9981%" y="287.50"></text></g><g><title>cfree (353,144,961 samples, 0.82%)</title><rect x="46.7972%" y="261" width="0.8155%" height="15" fill="rgb(222,201,40)" fg:x="20265056116" fg:w="353144961"/><text x="47.0472%" y="271.50"></text></g><g><title>[libc.so.6] (164,702,075 samples, 0.38%)</title><rect x="47.2323%" y="245" width="0.3803%" height="15" fill="rgb(235,61,29)" fg:x="20453499002" fg:w="164702075"/><text x="47.4823%" y="255.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (376,754,319 samples, 0.87%)</title><rect x="46.7481%" y="309" width="0.8700%" height="15" fill="rgb(219,207,3)" fg:x="20243806066" fg:w="376754319"/><text x="46.9981%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (56,528,071 samples, 0.13%)</title><rect x="47.7813%" y="261" width="0.1305%" height="15" fill="rgb(222,56,46)" fg:x="20691214402" fg:w="56528071"/><text x="48.0313%" y="271.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&lt;&amp;usize&gt;&gt;::sum (56,528,071 samples, 0.13%)</title><rect x="47.7813%" y="245" width="0.1305%" height="15" fill="rgb(239,76,54)" fg:x="20691214402" fg:w="56528071"/><text x="48.0313%" y="255.50"></text></g><g><title>&lt;std::collections::hash::map::Values&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::fold (56,528,071 samples, 0.13%)</title><rect x="47.7813%" y="229" width="0.1305%" height="15" fill="rgb(231,124,27)" fg:x="20691214402" fg:w="56528071"/><text x="48.0313%" y="239.50"></text></g><g><title>&lt;std::collections::hash::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::fold (56,528,071 samples, 0.13%)</title><rect x="47.7813%" y="213" width="0.1305%" height="15" fill="rgb(249,195,6)" fg:x="20691214402" fg:w="56528071"/><text x="48.0313%" y="223.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::fold (56,528,071 samples, 0.13%)</title><rect x="47.7813%" y="197" width="0.1305%" height="15" fill="rgb(237,174,47)" fg:x="20691214402" fg:w="56528071"/><text x="48.0313%" y="207.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (56,528,071 samples, 0.13%)</title><rect x="47.7813%" y="181" width="0.1305%" height="15" fill="rgb(206,201,31)" fg:x="20691214402" fg:w="56528071"/><text x="48.0313%" y="191.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (56,528,071 samples, 0.13%)</title><rect x="47.7813%" y="165" width="0.1305%" height="15" fill="rgb(231,57,52)" fg:x="20691214402" fg:w="56528071"/><text x="48.0313%" y="175.50"></text></g><g><title>hashbrown::control::group::neon::Group::load_aligned (9,435,574 samples, 0.02%)</title><rect x="47.9771%" y="165" width="0.0218%" height="15" fill="rgb(248,177,22)" fg:x="20776007202" fg:w="9435574"/><text x="48.2271%" y="175.50"></text></g><g><title>core::core_arch::aarch64::neon::generated::vld1_u8 (9,435,574 samples, 0.02%)</title><rect x="47.9771%" y="149" width="0.0218%" height="15" fill="rgb(215,211,37)" fg:x="20776007202" fg:w="9435574"/><text x="48.2271%" y="159.50"></text></g><g><title>core::ptr::read_unaligned (9,435,574 samples, 0.02%)</title><rect x="47.9771%" y="133" width="0.0218%" height="15" fill="rgb(241,128,51)" fg:x="20776007202" fg:w="9435574"/><text x="48.2271%" y="143.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (9,435,574 samples, 0.02%)</title><rect x="47.9771%" y="117" width="0.0218%" height="15" fill="rgb(227,165,31)" fg:x="20776007202" fg:w="9435574"/><text x="48.2271%" y="127.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::new (35,296,301 samples, 0.08%)</title><rect x="47.9771%" y="181" width="0.0815%" height="15" fill="rgb(228,167,24)" fg:x="20776007202" fg:w="35296301"/><text x="48.2271%" y="191.50"></text></g><g><title>hashbrown::control::group::neon::Group::match_full (25,860,727 samples, 0.06%)</title><rect x="47.9989%" y="165" width="0.0597%" height="15" fill="rgb(228,143,12)" fg:x="20785442776" fg:w="25860727"/><text x="48.2489%" y="175.50"></text></g><g><title>core::core_arch::aarch64::neon::generated::vcgez_s8 (25,860,727 samples, 0.06%)</title><rect x="47.9989%" y="149" width="0.0597%" height="15" fill="rgb(249,149,8)" fg:x="20785442776" fg:w="25860727"/><text x="48.2489%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;XLang_Rust::vm::executor::variable::VMInt&gt; (193,107,535 samples, 0.45%)</title><rect x="47.6181%" y="309" width="0.4459%" height="15" fill="rgb(243,35,44)" fg:x="20620560385" fg:w="193107535"/><text x="47.8681%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;XLang_Rust::vm::gc::gc::GCTraceable&gt; (148,352,314 samples, 0.34%)</title><rect x="47.7215%" y="293" width="0.3426%" height="15" fill="rgb(246,89,9)" fg:x="20665315606" fg:w="148352314"/><text x="47.9715%" y="303.50"></text></g><g><title>&lt;XLang_Rust::vm::gc::gc::GCTraceable as core::ops::drop::Drop&gt;::drop (148,352,314 samples, 0.34%)</title><rect x="47.7215%" y="277" width="0.3426%" height="15" fill="rgb(233,213,13)" fg:x="20665315606" fg:w="148352314"/><text x="47.9715%" y="287.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::values (65,925,447 samples, 0.15%)</title><rect x="47.9118%" y="261" width="0.1522%" height="15" fill="rgb(233,141,41)" fg:x="20747742473" fg:w="65925447"/><text x="48.1618%" y="271.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::iter (65,925,447 samples, 0.15%)</title><rect x="47.9118%" y="245" width="0.1522%" height="15" fill="rgb(239,167,4)" fg:x="20747742473" fg:w="65925447"/><text x="48.1618%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (65,925,447 samples, 0.15%)</title><rect x="47.9118%" y="229" width="0.1522%" height="15" fill="rgb(209,217,16)" fg:x="20747742473" fg:w="65925447"/><text x="48.1618%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter (65,925,447 samples, 0.15%)</title><rect x="47.9118%" y="213" width="0.1522%" height="15" fill="rgb(219,88,35)" fg:x="20747742473" fg:w="65925447"/><text x="48.1618%" y="223.50"></text></g><g><title>hashbrown::raw::RawTableInner::iter (65,925,447 samples, 0.15%)</title><rect x="47.9118%" y="197" width="0.1522%" height="15" fill="rgb(220,193,23)" fg:x="20747742473" fg:w="65925447"/><text x="48.1618%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (11,767,410 samples, 0.03%)</title><rect x="48.1455%" y="261" width="0.0272%" height="15" fill="rgb(230,90,52)" fg:x="20848935681" fg:w="11767410"/><text x="48.3955%" y="271.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&lt;&amp;usize&gt;&gt;::sum (11,767,410 samples, 0.03%)</title><rect x="48.1455%" y="245" width="0.0272%" height="15" fill="rgb(252,106,19)" fg:x="20848935681" fg:w="11767410"/><text x="48.3955%" y="255.50"></text></g><g><title>&lt;std::collections::hash::map::Values&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::fold (11,767,410 samples, 0.03%)</title><rect x="48.1455%" y="229" width="0.0272%" height="15" fill="rgb(206,74,20)" fg:x="20848935681" fg:w="11767410"/><text x="48.3955%" y="239.50"></text></g><g><title>&lt;std::collections::hash::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::fold (11,767,410 samples, 0.03%)</title><rect x="48.1455%" y="213" width="0.0272%" height="15" fill="rgb(230,138,44)" fg:x="20848935681" fg:w="11767410"/><text x="48.3955%" y="223.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::fold (11,767,410 samples, 0.03%)</title><rect x="48.1455%" y="197" width="0.0272%" height="15" fill="rgb(235,182,43)" fg:x="20848935681" fg:w="11767410"/><text x="48.3955%" y="207.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (11,767,410 samples, 0.03%)</title><rect x="48.1455%" y="181" width="0.0272%" height="15" fill="rgb(242,16,51)" fg:x="20848935681" fg:w="11767410"/><text x="48.3955%" y="191.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (11,767,410 samples, 0.03%)</title><rect x="48.1455%" y="165" width="0.0272%" height="15" fill="rgb(248,9,4)" fg:x="20848935681" fg:w="11767410"/><text x="48.3955%" y="175.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCRef::free (741,040,351 samples, 1.71%)</title><rect x="46.4886%" y="341" width="1.7113%" height="15" fill="rgb(210,31,22)" fg:x="20131442997" fg:w="741040351"/><text x="46.7386%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn XLang_Rust::vm::gc::gc::GCObject&gt;&gt; (645,124,865 samples, 1.49%)</title><rect x="46.7101%" y="325" width="1.4898%" height="15" fill="rgb(239,54,39)" fg:x="20227358483" fg:w="645124865"/><text x="46.9601%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;XLang_Rust::vm::executor::variable::VMNull&gt; (58,815,428 samples, 0.14%)</title><rect x="48.0640%" y="309" width="0.1358%" height="15" fill="rgb(230,99,41)" fg:x="20813667920" fg:w="58815428"/><text x="48.3140%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;XLang_Rust::vm::gc::gc::GCTraceable&gt; (25,907,947 samples, 0.06%)</title><rect x="48.1400%" y="293" width="0.0598%" height="15" fill="rgb(253,106,12)" fg:x="20846575401" fg:w="25907947"/><text x="48.3900%" y="303.50"></text></g><g><title>&lt;XLang_Rust::vm::gc::gc::GCTraceable as core::ops::drop::Drop&gt;::drop (25,907,947 samples, 0.06%)</title><rect x="48.1400%" y="277" width="0.0598%" height="15" fill="rgb(213,46,41)" fg:x="20846575401" fg:w="25907947"/><text x="48.3900%" y="287.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::values (11,780,257 samples, 0.03%)</title><rect x="48.1727%" y="261" width="0.0272%" height="15" fill="rgb(215,133,35)" fg:x="20860703091" fg:w="11780257"/><text x="48.4227%" y="271.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::iter (11,780,257 samples, 0.03%)</title><rect x="48.1727%" y="245" width="0.0272%" height="15" fill="rgb(213,28,5)" fg:x="20860703091" fg:w="11780257"/><text x="48.4227%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (11,780,257 samples, 0.03%)</title><rect x="48.1727%" y="229" width="0.0272%" height="15" fill="rgb(215,77,49)" fg:x="20860703091" fg:w="11780257"/><text x="48.4227%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter (11,780,257 samples, 0.03%)</title><rect x="48.1727%" y="213" width="0.0272%" height="15" fill="rgb(248,100,22)" fg:x="20860703091" fg:w="11780257"/><text x="48.4227%" y="223.50"></text></g><g><title>hashbrown::raw::RawTableInner::iter (11,780,257 samples, 0.03%)</title><rect x="48.1727%" y="197" width="0.0272%" height="15" fill="rgb(208,67,9)" fg:x="20860703091" fg:w="11780257"/><text x="48.4227%" y="207.50"></text></g><g><title>&lt;XLang_Rust::vm::executor::variable::VMNativeFunction as XLang_Rust::vm::gc::gc::GCObject&gt;::get_traceable (14,144,765 samples, 0.03%)</title><rect x="48.3189%" y="325" width="0.0327%" height="15" fill="rgb(219,133,21)" fg:x="20924046186" fg:w="14144765"/><text x="48.5689%" y="335.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCRef::get_traceable (68,057,054 samples, 0.16%)</title><rect x="48.1999%" y="341" width="0.1572%" height="15" fill="rgb(246,46,29)" fg:x="20872483348" fg:w="68057054"/><text x="48.4499%" y="351.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCRef::is_locked (35,260,041 samples, 0.08%)</title><rect x="48.3570%" y="341" width="0.0814%" height="15" fill="rgb(246,185,52)" fg:x="20940540402" fg:w="35260041"/><text x="48.6070%" y="351.50"></text></g><g><title>&lt;XLang_Rust::vm::executor::variable::VMNativeFunction as XLang_Rust::vm::gc::gc::GCObject&gt;::get_const_traceable (4,690,888 samples, 0.01%)</title><rect x="48.4276%" y="325" width="0.0108%" height="15" fill="rgb(252,136,11)" fg:x="20971109555" fg:w="4690888"/><text x="48.6776%" y="335.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCRef::is_online (7,058,162 samples, 0.02%)</title><rect x="48.4384%" y="341" width="0.0163%" height="15" fill="rgb(219,138,53)" fg:x="20975800443" fg:w="7058162"/><text x="48.6884%" y="351.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCRef::get_const_traceable (7,058,162 samples, 0.02%)</title><rect x="48.4384%" y="325" width="0.0163%" height="15" fill="rgb(211,51,23)" fg:x="20975800443" fg:w="7058162"/><text x="48.6884%" y="335.50"></text></g><g><title>alloc::vec::from_elem (7,020,039 samples, 0.02%)</title><rect x="48.4547%" y="341" width="0.0162%" height="15" fill="rgb(247,221,28)" fg:x="20982858605" fg:w="7020039"/><text x="48.7047%" y="351.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (7,020,039 samples, 0.02%)</title><rect x="48.4547%" y="325" width="0.0162%" height="15" fill="rgb(251,222,45)" fg:x="20982858605" fg:w="7020039"/><text x="48.7047%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (7,020,039 samples, 0.02%)</title><rect x="48.4547%" y="309" width="0.0162%" height="15" fill="rgb(217,162,53)" fg:x="20982858605" fg:w="7020039"/><text x="48.7047%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_zeroed_in (7,020,039 samples, 0.02%)</title><rect x="48.4547%" y="293" width="0.0162%" height="15" fill="rgb(229,93,14)" fg:x="20982858605" fg:w="7020039"/><text x="48.7047%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (7,020,039 samples, 0.02%)</title><rect x="48.4547%" y="277" width="0.0162%" height="15" fill="rgb(209,67,49)" fg:x="20982858605" fg:w="7020039"/><text x="48.7047%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (7,020,039 samples, 0.02%)</title><rect x="48.4547%" y="261" width="0.0162%" height="15" fill="rgb(213,87,29)" fg:x="20982858605" fg:w="7020039"/><text x="48.7047%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (7,020,039 samples, 0.02%)</title><rect x="48.4547%" y="245" width="0.0162%" height="15" fill="rgb(205,151,52)" fg:x="20982858605" fg:w="7020039"/><text x="48.7047%" y="255.50"></text></g><g><title>alloc::alloc::alloc_zeroed (7,020,039 samples, 0.02%)</title><rect x="48.4547%" y="229" width="0.0162%" height="15" fill="rgb(253,215,39)" fg:x="20982858605" fg:w="7020039"/><text x="48.7047%" y="239.50"></text></g><g><title>memset (7,020,039 samples, 0.02%)</title><rect x="48.4547%" y="213" width="0.0162%" height="15" fill="rgb(221,220,41)" fg:x="20982858605" fg:w="7020039"/><text x="48.7047%" y="223.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (7,073,550 samples, 0.02%)</title><rect x="48.4710%" y="341" width="0.0163%" height="15" fill="rgb(218,133,21)" fg:x="20989878644" fg:w="7073550"/><text x="48.7210%" y="351.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (7,073,550 samples, 0.02%)</title><rect x="48.4710%" y="325" width="0.0163%" height="15" fill="rgb(221,193,43)" fg:x="20989878644" fg:w="7073550"/><text x="48.7210%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (7,073,550 samples, 0.02%)</title><rect x="48.4710%" y="309" width="0.0163%" height="15" fill="rgb(240,128,52)" fg:x="20989878644" fg:w="7073550"/><text x="48.7210%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (9,420,877 samples, 0.02%)</title><rect x="48.4981%" y="229" width="0.0218%" height="15" fill="rgb(253,114,12)" fg:x="21001629817" fg:w="9420877"/><text x="48.7481%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (9,420,877 samples, 0.02%)</title><rect x="48.4981%" y="213" width="0.0218%" height="15" fill="rgb(215,223,47)" fg:x="21001629817" fg:w="9420877"/><text x="48.7481%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (9,420,877 samples, 0.02%)</title><rect x="48.4981%" y="197" width="0.0218%" height="15" fill="rgb(248,225,23)" fg:x="21001629817" fg:w="9420877"/><text x="48.7481%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (9,420,877 samples, 0.02%)</title><rect x="48.4981%" y="181" width="0.0218%" height="15" fill="rgb(250,108,0)" fg:x="21001629817" fg:w="9420877"/><text x="48.7481%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::enumerate::_{{closure}} (9,420,877 samples, 0.02%)</title><rect x="48.4981%" y="165" width="0.0218%" height="15" fill="rgb(228,208,7)" fg:x="21001629817" fg:w="9420877"/><text x="48.7481%" y="175.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::_{{closure}} (7,061,657 samples, 0.02%)</title><rect x="48.5035%" y="149" width="0.0163%" height="15" fill="rgb(244,45,10)" fg:x="21003989037" fg:w="7061657"/><text x="48.7535%" y="159.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (7,061,657 samples, 0.02%)</title><rect x="48.5035%" y="133" width="0.0163%" height="15" fill="rgb(207,125,25)" fg:x="21003989037" fg:w="7061657"/><text x="48.7535%" y="143.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCSystem::immediate_collect::_{{closure}} (7,061,657 samples, 0.02%)</title><rect x="48.5035%" y="117" width="0.0163%" height="15" fill="rgb(210,195,18)" fg:x="21003989037" fg:w="7061657"/><text x="48.7535%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (7,061,657 samples, 0.02%)</title><rect x="48.5035%" y="101" width="0.0163%" height="15" fill="rgb(249,80,12)" fg:x="21003989037" fg:w="7061657"/><text x="48.7535%" y="111.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (7,061,657 samples, 0.02%)</title><rect x="48.5035%" y="85" width="0.0163%" height="15" fill="rgb(221,65,9)" fg:x="21003989037" fg:w="7061657"/><text x="48.7535%" y="95.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (7,061,657 samples, 0.02%)</title><rect x="48.5035%" y="69" width="0.0163%" height="15" fill="rgb(235,49,36)" fg:x="21003989037" fg:w="7061657"/><text x="48.7535%" y="79.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (14,129,301 samples, 0.03%)</title><rect x="48.4981%" y="245" width="0.0326%" height="15" fill="rgb(225,32,20)" fg:x="21001629817" fg:w="14129301"/><text x="48.7481%" y="255.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (4,708,424 samples, 0.01%)</title><rect x="48.5198%" y="229" width="0.0109%" height="15" fill="rgb(215,141,46)" fg:x="21011050694" fg:w="4708424"/><text x="48.7698%" y="239.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (4,708,424 samples, 0.01%)</title><rect x="48.5198%" y="213" width="0.0109%" height="15" fill="rgb(250,160,47)" fg:x="21011050694" fg:w="4708424"/><text x="48.7698%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (7,039,046 samples, 0.02%)</title><rect x="48.5307%" y="245" width="0.0163%" height="15" fill="rgb(216,222,40)" fg:x="21015759118" fg:w="7039046"/><text x="48.7807%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (7,039,046 samples, 0.02%)</title><rect x="48.5307%" y="229" width="0.0163%" height="15" fill="rgb(234,217,39)" fg:x="21015759118" fg:w="7039046"/><text x="48.7807%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (7,039,046 samples, 0.02%)</title><rect x="48.5307%" y="213" width="0.0163%" height="15" fill="rgb(207,178,40)" fg:x="21015759118" fg:w="7039046"/><text x="48.7807%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (7,039,046 samples, 0.02%)</title><rect x="48.5307%" y="197" width="0.0163%" height="15" fill="rgb(221,136,13)" fg:x="21015759118" fg:w="7039046"/><text x="48.7807%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (7,039,046 samples, 0.02%)</title><rect x="48.5307%" y="181" width="0.0163%" height="15" fill="rgb(249,199,10)" fg:x="21015759118" fg:w="7039046"/><text x="48.7807%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (7,039,046 samples, 0.02%)</title><rect x="48.5307%" y="165" width="0.0163%" height="15" fill="rgb(249,222,13)" fg:x="21015759118" fg:w="7039046"/><text x="48.7807%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (7,039,046 samples, 0.02%)</title><rect x="48.5307%" y="149" width="0.0163%" height="15" fill="rgb(244,185,38)" fg:x="21015759118" fg:w="7039046"/><text x="48.7807%" y="159.50"></text></g><g><title>alloc::alloc::Global::grow_impl (7,039,046 samples, 0.02%)</title><rect x="48.5307%" y="133" width="0.0163%" height="15" fill="rgb(236,202,9)" fg:x="21015759118" fg:w="7039046"/><text x="48.7807%" y="143.50"></text></g><g><title>alloc::alloc::realloc (7,039,046 samples, 0.02%)</title><rect x="48.5307%" y="117" width="0.0163%" height="15" fill="rgb(250,229,37)" fg:x="21015759118" fg:w="7039046"/><text x="48.7807%" y="127.50"></text></g><g><title>realloc (7,039,046 samples, 0.02%)</title><rect x="48.5307%" y="101" width="0.0163%" height="15" fill="rgb(206,174,23)" fg:x="21015759118" fg:w="7039046"/><text x="48.7807%" y="111.50"></text></g><g><title>[libc.so.6] (4,675,880 samples, 0.01%)</title><rect x="48.5362%" y="85" width="0.0108%" height="15" fill="rgb(211,33,43)" fg:x="21018122284" fg:w="4675880"/><text x="48.7862%" y="95.50"></text></g><g><title>[unknown] (4,675,880 samples, 0.01%)</title><rect x="48.5362%" y="69" width="0.0108%" height="15" fill="rgb(245,58,50)" fg:x="21018122284" fg:w="4675880"/><text x="48.7862%" y="79.50"></text></g><g><title>[unknown] (4,675,880 samples, 0.01%)</title><rect x="48.5362%" y="53" width="0.0108%" height="15" fill="rgb(244,68,36)" fg:x="21018122284" fg:w="4675880"/><text x="48.7862%" y="63.50"></text></g><g><title>[unknown] (4,675,880 samples, 0.01%)</title><rect x="48.5362%" y="37" width="0.0108%" height="15" fill="rgb(232,229,15)" fg:x="21018122284" fg:w="4675880"/><text x="48.7862%" y="47.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (91,071,295 samples, 0.21%)</title><rect x="48.4873%" y="341" width="0.2103%" height="15" fill="rgb(254,30,23)" fg:x="20996952194" fg:w="91071295"/><text x="48.7373%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (91,071,295 samples, 0.21%)</title><rect x="48.4873%" y="325" width="0.2103%" height="15" fill="rgb(235,160,14)" fg:x="20996952194" fg:w="91071295"/><text x="48.7373%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (91,071,295 samples, 0.21%)</title><rect x="48.4873%" y="309" width="0.2103%" height="15" fill="rgb(212,155,44)" fg:x="20996952194" fg:w="91071295"/><text x="48.7373%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (91,071,295 samples, 0.21%)</title><rect x="48.4873%" y="293" width="0.2103%" height="15" fill="rgb(226,2,50)" fg:x="20996952194" fg:w="91071295"/><text x="48.7373%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (91,071,295 samples, 0.21%)</title><rect x="48.4873%" y="277" width="0.2103%" height="15" fill="rgb(234,177,6)" fg:x="20996952194" fg:w="91071295"/><text x="48.7373%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (91,071,295 samples, 0.21%)</title><rect x="48.4873%" y="261" width="0.2103%" height="15" fill="rgb(217,24,9)" fg:x="20996952194" fg:w="91071295"/><text x="48.7373%" y="271.50"></text></g><g><title>core::ptr::write (65,225,325 samples, 0.15%)</title><rect x="48.5470%" y="245" width="0.1506%" height="15" fill="rgb(220,13,46)" fg:x="21022798164" fg:w="65225325"/><text x="48.7970%" y="255.50"></text></g><g><title>[unknown] (37,010,899 samples, 0.09%)</title><rect x="48.6121%" y="229" width="0.0855%" height="15" fill="rgb(239,221,27)" fg:x="21051012590" fg:w="37010899"/><text x="48.8621%" y="239.50"></text></g><g><title>[unknown] (37,010,899 samples, 0.09%)</title><rect x="48.6121%" y="213" width="0.0855%" height="15" fill="rgb(222,198,25)" fg:x="21051012590" fg:w="37010899"/><text x="48.8621%" y="223.50"></text></g><g><title>[unknown] (37,010,899 samples, 0.09%)</title><rect x="48.6121%" y="197" width="0.0855%" height="15" fill="rgb(211,99,13)" fg:x="21051012590" fg:w="37010899"/><text x="48.8621%" y="207.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCSystem::immediate_collect (1,518,099,527 samples, 3.51%)</title><rect x="45.9565%" y="357" width="3.5057%" height="15" fill="rgb(232,111,31)" fg:x="19901030603" fg:w="1518099527"/><text x="46.2065%" y="367.50">XLa..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;XLang_Rust::vm::gc::gc::GCRef&gt;&gt; (328,749,915 samples, 0.76%)</title><rect x="48.7030%" y="341" width="0.7592%" height="15" fill="rgb(245,82,37)" fg:x="21090380215" fg:w="328749915"/><text x="48.9530%" y="351.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (328,749,915 samples, 0.76%)</title><rect x="48.7030%" y="325" width="0.7592%" height="15" fill="rgb(227,149,46)" fg:x="21090380215" fg:w="328749915"/><text x="48.9530%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;XLang_Rust::vm::gc::gc::GCRef,alloc::alloc::Global&gt;&gt; (328,749,915 samples, 0.76%)</title><rect x="48.7030%" y="309" width="0.7592%" height="15" fill="rgb(218,36,50)" fg:x="21090380215" fg:w="328749915"/><text x="48.9530%" y="319.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (328,749,915 samples, 0.76%)</title><rect x="48.7030%" y="293" width="0.7592%" height="15" fill="rgb(226,80,48)" fg:x="21090380215" fg:w="328749915"/><text x="48.9530%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;XLang_Rust::vm::gc::gc::GCRef&gt;&gt; (328,749,915 samples, 0.76%)</title><rect x="48.7030%" y="277" width="0.7592%" height="15" fill="rgb(238,224,15)" fg:x="21090380215" fg:w="328749915"/><text x="48.9530%" y="287.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (328,749,915 samples, 0.76%)</title><rect x="48.7030%" y="261" width="0.7592%" height="15" fill="rgb(241,136,10)" fg:x="21090380215" fg:w="328749915"/><text x="48.9530%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (328,749,915 samples, 0.76%)</title><rect x="48.7030%" y="245" width="0.7592%" height="15" fill="rgb(208,32,45)" fg:x="21090380215" fg:w="328749915"/><text x="48.9530%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (328,749,915 samples, 0.76%)</title><rect x="48.7030%" y="229" width="0.7592%" height="15" fill="rgb(207,135,9)" fg:x="21090380215" fg:w="328749915"/><text x="48.9530%" y="239.50"></text></g><g><title>alloc::alloc::dealloc (328,749,915 samples, 0.76%)</title><rect x="48.7030%" y="213" width="0.7592%" height="15" fill="rgb(206,86,44)" fg:x="21090380215" fg:w="328749915"/><text x="48.9530%" y="223.50"></text></g><g><title>cfree (328,749,915 samples, 0.76%)</title><rect x="48.7030%" y="197" width="0.7592%" height="15" fill="rgb(245,177,15)" fg:x="21090380215" fg:w="328749915"/><text x="48.9530%" y="207.50"></text></g><g><title>[libc.so.6] (328,749,915 samples, 0.76%)</title><rect x="48.7030%" y="181" width="0.7592%" height="15" fill="rgb(206,64,50)" fg:x="21090380215" fg:w="328749915"/><text x="48.9530%" y="191.50"></text></g><g><title>[libc.so.6] (328,749,915 samples, 0.76%)</title><rect x="48.7030%" y="165" width="0.7592%" height="15" fill="rgb(234,36,40)" fg:x="21090380215" fg:w="328749915"/><text x="48.9530%" y="175.50"></text></g><g><title>[libc.so.6] (32,225,771 samples, 0.07%)</title><rect x="49.3878%" y="149" width="0.0744%" height="15" fill="rgb(213,64,8)" fg:x="21386904359" fg:w="32225771"/><text x="49.6378%" y="159.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCSystem::collect (1,522,670,906 samples, 3.52%)</title><rect x="45.9565%" y="373" width="3.5162%" height="15" fill="rgb(210,75,36)" fg:x="19901030603" fg:w="1522670906"/><text x="46.2065%" y="383.50">XLa..</text></g><g><title>XLang_Rust::vm::gc::gc::GCSystem::mark (4,571,379 samples, 0.01%)</title><rect x="49.4622%" y="357" width="0.0106%" height="15" fill="rgb(229,88,21)" fg:x="21419130130" fg:w="4571379"/><text x="49.7122%" y="367.50"></text></g><g><title>_RNvCs7kbacHzvpHZ_7___rustc11___rdl_alloc (8,805,656 samples, 0.02%)</title><rect x="49.7224%" y="293" width="0.0203%" height="15" fill="rgb(252,204,47)" fg:x="21531789419" fg:w="8805656"/><text x="49.9724%" y="303.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (8,805,656 samples, 0.02%)</title><rect x="49.7224%" y="277" width="0.0203%" height="15" fill="rgb(208,77,27)" fg:x="21531789419" fg:w="8805656"/><text x="49.9724%" y="287.50"></text></g><g><title>core::ptr::read_volatile (4,581,820 samples, 0.01%)</title><rect x="49.7477%" y="293" width="0.0106%" height="15" fill="rgb(221,76,26)" fg:x="21542763695" fg:w="4581820"/><text x="49.9977%" y="303.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (686,614,264 samples, 1.59%)</title><rect x="49.4728%" y="373" width="1.5856%" height="15" fill="rgb(225,139,18)" fg:x="21423701509" fg:w="686614264"/><text x="49.7228%" y="383.50"></text></g><g><title>alloc::alloc::exchange_malloc (603,025,663 samples, 1.39%)</title><rect x="49.6658%" y="357" width="1.3925%" height="15" fill="rgb(230,137,11)" fg:x="21507290110" fg:w="603025663"/><text x="49.9158%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (596,393,290 samples, 1.38%)</title><rect x="49.6811%" y="341" width="1.3772%" height="15" fill="rgb(212,28,1)" fg:x="21513922483" fg:w="596393290"/><text x="49.9311%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (596,393,290 samples, 1.38%)</title><rect x="49.6811%" y="325" width="1.3772%" height="15" fill="rgb(248,164,17)" fg:x="21513922483" fg:w="596393290"/><text x="49.9311%" y="335.50"></text></g><g><title>alloc::alloc::alloc (596,393,290 samples, 1.38%)</title><rect x="49.6811%" y="309" width="1.3772%" height="15" fill="rgb(222,171,42)" fg:x="21513922483" fg:w="596393290"/><text x="49.9311%" y="319.50"></text></g><g><title>malloc (562,970,258 samples, 1.30%)</title><rect x="49.7583%" y="293" width="1.3000%" height="15" fill="rgb(243,84,45)" fg:x="21547345515" fg:w="562970258"/><text x="50.0083%" y="303.50"></text></g><g><title>[libc.so.6] (358,141,769 samples, 0.83%)</title><rect x="50.2313%" y="277" width="0.8270%" height="15" fill="rgb(252,49,23)" fg:x="21752174004" fg:w="358141769"/><text x="50.4813%" y="287.50"></text></g><g><title>[libc.so.6] (38,249,630 samples, 0.09%)</title><rect x="50.9700%" y="261" width="0.0883%" height="15" fill="rgb(215,19,7)" fg:x="22072066143" fg:w="38249630"/><text x="51.2200%" y="271.50"></text></g><g><title>[libc.so.6] (4,587,023 samples, 0.01%)</title><rect x="51.1468%" y="213" width="0.0106%" height="15" fill="rgb(238,81,41)" fg:x="22148612067" fg:w="4587023"/><text x="51.3968%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (70,054,617 samples, 0.16%)</title><rect x="51.1364%" y="357" width="0.1618%" height="15" fill="rgb(210,199,37)" fg:x="22144140840" fg:w="70054617"/><text x="51.3864%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (70,054,617 samples, 0.16%)</title><rect x="51.1364%" y="341" width="0.1618%" height="15" fill="rgb(244,192,49)" fg:x="22144140840" fg:w="70054617"/><text x="51.3864%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (70,054,617 samples, 0.16%)</title><rect x="51.1364%" y="325" width="0.1618%" height="15" fill="rgb(226,211,11)" fg:x="22144140840" fg:w="70054617"/><text x="51.3864%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (70,054,617 samples, 0.16%)</title><rect x="51.1364%" y="309" width="0.1618%" height="15" fill="rgb(236,162,54)" fg:x="22144140840" fg:w="70054617"/><text x="51.3864%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (70,054,617 samples, 0.16%)</title><rect x="51.1364%" y="293" width="0.1618%" height="15" fill="rgb(220,229,9)" fg:x="22144140840" fg:w="70054617"/><text x="51.3864%" y="303.50"></text></g><g><title>alloc::alloc::Global::grow_impl (70,054,617 samples, 0.16%)</title><rect x="51.1364%" y="277" width="0.1618%" height="15" fill="rgb(250,87,22)" fg:x="22144140840" fg:w="70054617"/><text x="51.3864%" y="287.50"></text></g><g><title>alloc::alloc::realloc (70,054,617 samples, 0.16%)</title><rect x="51.1364%" y="261" width="0.1618%" height="15" fill="rgb(239,43,17)" fg:x="22144140840" fg:w="70054617"/><text x="51.3864%" y="271.50"></text></g><g><title>realloc (70,054,617 samples, 0.16%)</title><rect x="51.1364%" y="245" width="0.1618%" height="15" fill="rgb(231,177,25)" fg:x="22144140840" fg:w="70054617"/><text x="51.3864%" y="255.50"></text></g><g><title>[libc.so.6] (67,767,204 samples, 0.16%)</title><rect x="51.1417%" y="229" width="0.1565%" height="15" fill="rgb(219,179,1)" fg:x="22146428253" fg:w="67767204"/><text x="51.3917%" y="239.50"></text></g><g><title>memcpy (60,996,367 samples, 0.14%)</title><rect x="51.1574%" y="213" width="0.1409%" height="15" fill="rgb(238,219,53)" fg:x="22153199090" fg:w="60996367"/><text x="51.4074%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (16,061,438 samples, 0.04%)</title><rect x="51.2982%" y="357" width="0.0371%" height="15" fill="rgb(232,167,36)" fg:x="22214195457" fg:w="16061438"/><text x="51.5482%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (16,061,438 samples, 0.04%)</title><rect x="51.2982%" y="341" width="0.0371%" height="15" fill="rgb(244,19,51)" fg:x="22214195457" fg:w="16061438"/><text x="51.5482%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (16,061,438 samples, 0.04%)</title><rect x="51.2982%" y="325" width="0.0371%" height="15" fill="rgb(224,6,22)" fg:x="22214195457" fg:w="16061438"/><text x="51.5482%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (16,061,438 samples, 0.04%)</title><rect x="51.2982%" y="309" width="0.0371%" height="15" fill="rgb(224,145,5)" fg:x="22214195457" fg:w="16061438"/><text x="51.5482%" y="319.50"></text></g><g><title>XLang_Rust::vm::executor::variable::VMInt::add (2,781,500,796 samples, 6.42%)</title><rect x="44.9276%" y="405" width="6.4232%" height="15" fill="rgb(234,130,49)" fg:x="19455476911" fg:w="2781500796"/><text x="45.1776%" y="415.50">XLang_Ru..</text></g><g><title>XLang_Rust::vm::gc::gc::GCSystem::new_object (2,466,683,691 samples, 5.70%)</title><rect x="45.6546%" y="389" width="5.6962%" height="15" fill="rgb(254,6,2)" fg:x="19770294016" fg:w="2466683691"/><text x="45.9046%" y="399.50">XLang_R..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (124,378,631 samples, 0.29%)</title><rect x="51.0636%" y="373" width="0.2872%" height="15" fill="rgb(208,96,46)" fg:x="22112599076" fg:w="124378631"/><text x="51.3136%" y="383.50"></text></g><g><title>core::ptr::write (6,720,812 samples, 0.02%)</title><rect x="51.3353%" y="357" width="0.0155%" height="15" fill="rgb(239,3,39)" fg:x="22230256895" fg:w="6720812"/><text x="51.5853%" y="367.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCRef::as_const_type (13,109,904 samples, 0.03%)</title><rect x="51.3508%" y="405" width="0.0303%" height="15" fill="rgb(233,210,1)" fg:x="22236977707" fg:w="13109904"/><text x="51.6008%" y="415.50"></text></g><g><title>XLang_Rust::vm::executor::variable::try_add_as_vmobject (3,060,883,133 samples, 7.07%)</title><rect x="44.5304%" y="421" width="7.0684%" height="15" fill="rgb(244,137,37)" fg:x="19283468244" fg:w="3060883133"/><text x="44.7804%" y="431.50">XLang_Rus..</text></g><g><title>XLang_Rust::vm::gc::gc::GCRef::isinstance (94,263,766 samples, 0.22%)</title><rect x="51.3811%" y="405" width="0.2177%" height="15" fill="rgb(240,136,2)" fg:x="22250087611" fg:w="94263766"/><text x="51.6311%" y="415.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCRef::get_const_traceable (94,263,766 samples, 0.22%)</title><rect x="51.3811%" y="389" width="0.2177%" height="15" fill="rgb(239,18,37)" fg:x="22250087611" fg:w="94263766"/><text x="51.6311%" y="399.50"></text></g><g><title>&lt;XLang_Rust::vm::executor::variable::VMNativeFunction as XLang_Rust::vm::gc::gc::GCObject&gt;::get_const_traceable (15,626,996 samples, 0.04%)</title><rect x="51.5627%" y="373" width="0.0361%" height="15" fill="rgb(218,185,22)" fg:x="22328724381" fg:w="15626996"/><text x="51.8127%" y="383.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCRef::as_const_type (20,445,219 samples, 0.05%)</title><rect x="51.8837%" y="389" width="0.0472%" height="15" fill="rgb(225,218,4)" fg:x="22467754705" fg:w="20445219"/><text x="52.1337%" y="399.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCRef::isinstance (11,443,215 samples, 0.03%)</title><rect x="51.9045%" y="373" width="0.0264%" height="15" fill="rgb(230,182,32)" fg:x="22476756709" fg:w="11443215"/><text x="52.1545%" y="383.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCRef::get_const_traceable (11,443,215 samples, 0.03%)</title><rect x="51.9045%" y="357" width="0.0264%" height="15" fill="rgb(242,56,43)" fg:x="22476756709" fg:w="11443215"/><text x="52.1545%" y="367.50"></text></g><g><title>&lt;XLang_Rust::vm::executor::variable::VMNativeFunction as XLang_Rust::vm::gc::gc::GCObject&gt;::get_const_traceable (4,565,082 samples, 0.01%)</title><rect x="51.9204%" y="341" width="0.0105%" height="15" fill="rgb(233,99,24)" fg:x="22483634842" fg:w="4565082"/><text x="52.1704%" y="351.50"></text></g><g><title>&lt;XLang_Rust::vm::executor::variable::VMInt as XLang_Rust::vm::executor::variable::VMObject&gt;::assign (85,655,160 samples, 0.20%)</title><rect x="51.8064%" y="405" width="0.1978%" height="15" fill="rgb(234,209,42)" fg:x="22434257697" fg:w="85655160"/><text x="52.0564%" y="415.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCRef::isinstance (31,712,933 samples, 0.07%)</title><rect x="51.9310%" y="389" width="0.0732%" height="15" fill="rgb(227,7,12)" fg:x="22488199924" fg:w="31712933"/><text x="52.1810%" y="399.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCRef::get_const_traceable (31,712,933 samples, 0.07%)</title><rect x="51.9310%" y="373" width="0.0732%" height="15" fill="rgb(245,203,43)" fg:x="22488199924" fg:w="31712933"/><text x="52.1810%" y="383.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCRef::as_type (22,304,982 samples, 0.05%)</title><rect x="52.0096%" y="405" width="0.0515%" height="15" fill="rgb(238,205,33)" fg:x="22522239366" fg:w="22304982"/><text x="52.2596%" y="415.50"></text></g><g><title>XLang_Rust::vm::executor::variable::try_assign_as_vmobject (285,450,873 samples, 0.66%)</title><rect x="51.5988%" y="421" width="0.6592%" height="15" fill="rgb(231,56,7)" fg:x="22344351377" fg:w="285450873"/><text x="51.8488%" y="431.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCRef::isinstance (85,257,902 samples, 0.20%)</title><rect x="52.0611%" y="405" width="0.1969%" height="15" fill="rgb(244,186,29)" fg:x="22544544348" fg:w="85257902"/><text x="52.3111%" y="415.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCRef::get_const_traceable (85,257,902 samples, 0.20%)</title><rect x="52.0611%" y="389" width="0.1969%" height="15" fill="rgb(234,111,31)" fg:x="22544544348" fg:w="85257902"/><text x="52.3111%" y="399.50"></text></g><g><title>&lt;XLang_Rust::vm::executor::variable::VMNativeFunction as XLang_Rust::vm::gc::gc::GCObject&gt;::get_const_traceable (13,579,182 samples, 0.03%)</title><rect x="52.2266%" y="373" width="0.0314%" height="15" fill="rgb(241,149,10)" fg:x="22616223068" fg:w="13579182"/><text x="52.4766%" y="383.50"></text></g><g><title>&lt;XLang_Rust::vm::executor::variable::VMNativeFunction as XLang_Rust::vm::gc::gc::GCObject&gt;::get_const_traceable (15,091,657 samples, 0.03%)</title><rect x="52.6083%" y="405" width="0.0349%" height="15" fill="rgb(249,206,44)" fg:x="22781512309" fg:w="15091657"/><text x="52.8583%" y="415.50"></text></g><g><title>&lt;XLang_Rust::vm::executor::variable::VMNativeFunction as XLang_Rust::vm::gc::gc::GCObject&gt;::get_const_traceable (6,705,930 samples, 0.02%)</title><rect x="52.8898%" y="389" width="0.0155%" height="15" fill="rgb(251,153,30)" fg:x="22903423479" fg:w="6705930"/><text x="53.1398%" y="399.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCRef::as_const_type (13,350,813 samples, 0.03%)</title><rect x="52.9053%" y="389" width="0.0308%" height="15" fill="rgb(239,152,38)" fg:x="22910129409" fg:w="13350813"/><text x="53.1553%" y="399.50"></text></g><g><title>XLang_Rust::vm::executor::variable::VMInt::less_than (191,877,152 samples, 0.44%)</title><rect x="52.6431%" y="405" width="0.4431%" height="15" fill="rgb(249,139,47)" fg:x="22796603966" fg:w="191877152"/><text x="52.8931%" y="415.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCRef::isinstance (65,000,896 samples, 0.15%)</title><rect x="52.9361%" y="389" width="0.1501%" height="15" fill="rgb(244,64,35)" fg:x="22923480222" fg:w="65000896"/><text x="53.1861%" y="399.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCRef::get_const_traceable (65,000,896 samples, 0.15%)</title><rect x="52.9361%" y="373" width="0.1501%" height="15" fill="rgb(216,46,15)" fg:x="22923480222" fg:w="65000896"/><text x="53.1861%" y="383.50"></text></g><g><title>&lt;XLang_Rust::vm::executor::variable::VMNativeFunction as XLang_Rust::vm::gc::gc::GCObject&gt;::get_const_traceable (8,939,724 samples, 0.02%)</title><rect x="53.0656%" y="357" width="0.0206%" height="15" fill="rgb(250,74,19)" fg:x="22979541394" fg:w="8939724"/><text x="53.3156%" y="367.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCRef::as_const_type (13,725,722 samples, 0.03%)</title><rect x="53.0862%" y="405" width="0.0317%" height="15" fill="rgb(249,42,33)" fg:x="22988481118" fg:w="13725722"/><text x="53.3362%" y="415.50"></text></g><g><title>XLang_Rust::vm::executor::variable::try_less_than_as_vmobject (481,043,929 samples, 1.11%)</title><rect x="52.2580%" y="421" width="1.1109%" height="15" fill="rgb(242,149,17)" fg:x="22629802250" fg:w="481043929"/><text x="52.5080%" y="431.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCRef::isinstance (108,639,339 samples, 0.25%)</title><rect x="53.1179%" y="405" width="0.2509%" height="15" fill="rgb(244,29,21)" fg:x="23002206840" fg:w="108639339"/><text x="53.3679%" y="415.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCRef::get_const_traceable (108,639,339 samples, 0.25%)</title><rect x="53.1179%" y="389" width="0.2509%" height="15" fill="rgb(220,130,37)" fg:x="23002206840" fg:w="108639339"/><text x="53.3679%" y="399.50"></text></g><g><title>&lt;XLang_Rust::vm::executor::variable::VMNativeFunction as XLang_Rust::vm::gc::gc::GCObject&gt;::get_const_traceable (11,167,239 samples, 0.03%)</title><rect x="53.3430%" y="373" width="0.0258%" height="15" fill="rgb(211,67,2)" fg:x="23099678940" fg:w="11167239"/><text x="53.5930%" y="383.50"></text></g><g><title>XLang_Rust::vm::executor::vm::IRExecutor::pop_object (78,829,973 samples, 0.18%)</title><rect x="53.3688%" y="421" width="0.1820%" height="15" fill="rgb(235,68,52)" fg:x="23110846179" fg:w="78829973"/><text x="53.6188%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (78,829,973 samples, 0.18%)</title><rect x="53.3688%" y="405" width="0.1820%" height="15" fill="rgb(246,142,3)" fg:x="23110846179" fg:w="78829973"/><text x="53.6188%" y="415.50"></text></g><g><title>core::ptr::read (38,243,044 samples, 0.09%)</title><rect x="53.4625%" y="389" width="0.0883%" height="15" fill="rgb(241,25,7)" fg:x="23151433108" fg:w="38243044"/><text x="53.7125%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (4,395,137 samples, 0.01%)</title><rect x="53.9022%" y="373" width="0.0101%" height="15" fill="rgb(242,119,39)" fg:x="23341846687" fg:w="4395137"/><text x="54.1522%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (4,395,137 samples, 0.01%)</title><rect x="53.9022%" y="357" width="0.0101%" height="15" fill="rgb(241,98,45)" fg:x="23341846687" fg:w="4395137"/><text x="54.1522%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (4,395,137 samples, 0.01%)</title><rect x="53.9022%" y="341" width="0.0101%" height="15" fill="rgb(254,28,30)" fg:x="23341846687" fg:w="4395137"/><text x="54.1522%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (4,395,137 samples, 0.01%)</title><rect x="53.9022%" y="325" width="0.0101%" height="15" fill="rgb(241,142,54)" fg:x="23341846687" fg:w="4395137"/><text x="54.1522%" y="335.50"></text></g><g><title>XLang_Rust::vm::executor::vm::IRExecutor::pop_object_and_check (306,935,386 samples, 0.71%)</title><rect x="53.5508%" y="421" width="0.7088%" height="15" fill="rgb(222,85,15)" fg:x="23189676152" fg:w="306935386"/><text x="53.8008%" y="431.50"></text></g><g><title>XLang_Rust::vm::executor::vm::IRExecutor::pop_object (282,065,634 samples, 0.65%)</title><rect x="53.6083%" y="405" width="0.6514%" height="15" fill="rgb(210,85,47)" fg:x="23214545904" fg:w="282065634"/><text x="53.8583%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (282,065,634 samples, 0.65%)</title><rect x="53.6083%" y="389" width="0.6514%" height="15" fill="rgb(224,206,25)" fg:x="23214545904" fg:w="282065634"/><text x="53.8583%" y="399.50"></text></g><g><title>core::ptr::read (150,369,714 samples, 0.35%)</title><rect x="53.9124%" y="373" width="0.3472%" height="15" fill="rgb(243,201,19)" fg:x="23346241824" fg:w="150369714"/><text x="54.1624%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity (65,009,819 samples, 0.15%)</title><rect x="54.7553%" y="389" width="0.1501%" height="15" fill="rgb(236,59,4)" fg:x="23711263490" fg:w="65009819"/><text x="55.0053%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::capacity (65,009,819 samples, 0.15%)</title><rect x="54.7553%" y="373" width="0.1501%" height="15" fill="rgb(254,179,45)" fg:x="23711263490" fg:w="65009819"/><text x="55.0053%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (166,803,231 samples, 0.39%)</title><rect x="54.9054%" y="389" width="0.3852%" height="15" fill="rgb(226,14,10)" fg:x="23776273309" fg:w="166803231"/><text x="55.1554%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (166,803,231 samples, 0.39%)</title><rect x="54.9054%" y="373" width="0.3852%" height="15" fill="rgb(244,27,41)" fg:x="23776273309" fg:w="166803231"/><text x="55.1554%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (166,803,231 samples, 0.39%)</title><rect x="54.9054%" y="357" width="0.3852%" height="15" fill="rgb(235,35,32)" fg:x="23776273309" fg:w="166803231"/><text x="55.1554%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (166,803,231 samples, 0.39%)</title><rect x="54.9054%" y="341" width="0.3852%" height="15" fill="rgb(218,68,31)" fg:x="23776273309" fg:w="166803231"/><text x="55.1554%" y="351.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (6,610,798 samples, 0.02%)</title><rect x="55.2906%" y="389" width="0.0153%" height="15" fill="rgb(207,120,37)" fg:x="23943076540" fg:w="6610798"/><text x="55.5406%" y="399.50"></text></g><g><title>XLang_Rust::vm::executor::vm::IRExecutor::push_vmobject (457,750,674 samples, 1.06%)</title><rect x="54.2596%" y="421" width="1.0571%" height="15" fill="rgb(227,98,0)" fg:x="23496611538" fg:w="457750674"/><text x="54.5096%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (457,750,674 samples, 1.06%)</title><rect x="54.2596%" y="405" width="1.0571%" height="15" fill="rgb(207,7,3)" fg:x="23496611538" fg:w="457750674"/><text x="54.5096%" y="415.50"></text></g><g><title>core::ptr::write (4,674,874 samples, 0.01%)</title><rect x="55.3059%" y="389" width="0.0108%" height="15" fill="rgb(206,98,19)" fg:x="23949687338" fg:w="4674874"/><text x="55.5559%" y="399.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCRef::as_const_type (86,576,211 samples, 0.20%)</title><rect x="55.3167%" y="421" width="0.1999%" height="15" fill="rgb(217,5,26)" fg:x="23954362212" fg:w="86576211"/><text x="55.5667%" y="431.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCRef::isinstance (28,216,813 samples, 0.07%)</title><rect x="55.4515%" y="405" width="0.0652%" height="15" fill="rgb(235,190,38)" fg:x="24012721610" fg:w="28216813"/><text x="55.7015%" y="415.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCRef::get_const_traceable (28,216,813 samples, 0.07%)</title><rect x="55.4515%" y="389" width="0.0652%" height="15" fill="rgb(247,86,24)" fg:x="24012721610" fg:w="28216813"/><text x="55.7015%" y="399.50"></text></g><g><title>&lt;XLang_Rust::vm::executor::variable::VMNativeFunction as XLang_Rust::vm::gc::gc::GCObject&gt;::get_traceable (4,650,164 samples, 0.01%)</title><rect x="55.5426%" y="405" width="0.0107%" height="15" fill="rgb(205,101,16)" fg:x="24052171374" fg:w="4650164"/><text x="55.7926%" y="415.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCRef::clone_ref (62,832,351 samples, 0.15%)</title><rect x="55.5166%" y="421" width="0.1451%" height="15" fill="rgb(246,168,33)" fg:x="24040938423" fg:w="62832351"/><text x="55.7666%" y="431.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCRef::is_online (46,949,236 samples, 0.11%)</title><rect x="55.5533%" y="405" width="0.1084%" height="15" fill="rgb(231,114,1)" fg:x="24056821538" fg:w="46949236"/><text x="55.8033%" y="415.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCRef::get_const_traceable (44,635,866 samples, 0.10%)</title><rect x="55.5586%" y="389" width="0.1031%" height="15" fill="rgb(207,184,53)" fg:x="24059134908" fg:w="44635866"/><text x="55.8086%" y="399.50"></text></g><g><title>&lt;XLang_Rust::vm::executor::variable::VMNativeFunction as XLang_Rust::vm::gc::gc::GCObject&gt;::get_const_traceable (8,921,974 samples, 0.02%)</title><rect x="55.6411%" y="373" width="0.0206%" height="15" fill="rgb(224,95,51)" fg:x="24094848800" fg:w="8921974"/><text x="55.8911%" y="383.50"></text></g><g><title>&lt;XLang_Rust::vm::executor::variable::VMNativeFunction as XLang_Rust::vm::gc::gc::GCObject&gt;::get_traceable (69,402,029 samples, 0.16%)</title><rect x="56.6364%" y="389" width="0.1603%" height="15" fill="rgb(212,188,45)" fg:x="24525826917" fg:w="69402029"/><text x="56.8864%" y="399.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCRef::drop_ref (500,444,080 samples, 1.16%)</title><rect x="55.6617%" y="421" width="1.1557%" height="15" fill="rgb(223,154,38)" fg:x="24103770774" fg:w="500444080"/><text x="55.9117%" y="431.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCRef::get_traceable (324,072,923 samples, 0.75%)</title><rect x="56.0690%" y="405" width="0.7484%" height="15" fill="rgb(251,22,52)" fg:x="24280141931" fg:w="324072923"/><text x="56.3190%" y="415.50"></text></g><g><title>&lt;XLang_Rust::vm::executor::variable::VMNull as XLang_Rust::vm::gc::gc::GCObject&gt;::get_traceable (8,985,908 samples, 0.02%)</title><rect x="56.7966%" y="389" width="0.0208%" height="15" fill="rgb(229,209,22)" fg:x="24595228946" fg:w="8985908"/><text x="57.0466%" y="399.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCRef::get_const_traceable (15,568,741 samples, 0.04%)</title><rect x="56.8174%" y="405" width="0.0360%" height="15" fill="rgb(234,138,34)" fg:x="24604214854" fg:w="15568741"/><text x="57.0674%" y="415.50"></text></g><g><title>&lt;XLang_Rust::vm::executor::variable::VMNativeFunction as XLang_Rust::vm::gc::gc::GCObject&gt;::get_const_traceable (13,372,151 samples, 0.03%)</title><rect x="56.8224%" y="389" width="0.0309%" height="15" fill="rgb(212,95,11)" fg:x="24606411444" fg:w="13372151"/><text x="57.0724%" y="399.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCRef::isinstance (17,711,583 samples, 0.04%)</title><rect x="56.8174%" y="421" width="0.0409%" height="15" fill="rgb(240,179,47)" fg:x="24604214854" fg:w="17711583"/><text x="57.0674%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (58,692,789 samples, 0.14%)</title><rect x="59.6446%" y="373" width="0.1355%" height="15" fill="rgb(240,163,11)" fg:x="25828533280" fg:w="58692789"/><text x="59.8946%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (58,692,789 samples, 0.14%)</title><rect x="59.6446%" y="357" width="0.1355%" height="15" fill="rgb(236,37,12)" fg:x="25828533280" fg:w="58692789"/><text x="59.8946%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (58,692,789 samples, 0.14%)</title><rect x="59.6446%" y="341" width="0.1355%" height="15" fill="rgb(232,164,16)" fg:x="25828533280" fg:w="58692789"/><text x="59.8946%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (35,158,428 samples, 0.08%)</title><rect x="59.6990%" y="325" width="0.0812%" height="15" fill="rgb(244,205,15)" fg:x="25852067641" fg:w="35158428"/><text x="59.9490%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (35,158,428 samples, 0.08%)</title><rect x="59.6990%" y="309" width="0.0812%" height="15" fill="rgb(223,117,47)" fg:x="25852067641" fg:w="35158428"/><text x="59.9490%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (35,158,428 samples, 0.08%)</title><rect x="59.6990%" y="293" width="0.0812%" height="15" fill="rgb(244,107,35)" fg:x="25852067641" fg:w="35158428"/><text x="59.9490%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (35,158,428 samples, 0.08%)</title><rect x="59.6990%" y="277" width="0.0812%" height="15" fill="rgb(205,140,8)" fg:x="25852067641" fg:w="35158428"/><text x="59.9490%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (70,507,281 samples, 0.16%)</title><rect x="59.7802%" y="357" width="0.1628%" height="15" fill="rgb(228,84,46)" fg:x="25887226069" fg:w="70507281"/><text x="60.0302%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_slice (70,507,281 samples, 0.16%)</title><rect x="59.7802%" y="341" width="0.1628%" height="15" fill="rgb(254,188,9)" fg:x="25887226069" fg:w="70507281"/><text x="60.0302%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (51,727,138 samples, 0.12%)</title><rect x="59.8235%" y="325" width="0.1195%" height="15" fill="rgb(206,112,54)" fg:x="25906006212" fg:w="51727138"/><text x="60.0735%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (51,727,138 samples, 0.12%)</title><rect x="59.8235%" y="309" width="0.1195%" height="15" fill="rgb(216,84,49)" fg:x="25906006212" fg:w="51727138"/><text x="60.0735%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (51,727,138 samples, 0.12%)</title><rect x="59.8235%" y="293" width="0.1195%" height="15" fill="rgb(214,194,35)" fg:x="25906006212" fg:w="51727138"/><text x="60.0735%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (51,727,138 samples, 0.12%)</title><rect x="59.8235%" y="277" width="0.1195%" height="15" fill="rgb(249,28,3)" fg:x="25906006212" fg:w="51727138"/><text x="60.0735%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (79,901,880 samples, 0.18%)</title><rect x="59.7802%" y="373" width="0.1845%" height="15" fill="rgb(222,56,52)" fg:x="25887226069" fg:w="79901880"/><text x="60.0302%" y="383.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (9,394,599 samples, 0.02%)</title><rect x="59.9430%" y="357" width="0.0217%" height="15" fill="rgb(245,217,50)" fg:x="25957733350" fg:w="9394599"/><text x="60.1930%" y="367.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (9,394,599 samples, 0.02%)</title><rect x="59.9430%" y="341" width="0.0217%" height="15" fill="rgb(213,201,24)" fg:x="25957733350" fg:w="9394599"/><text x="60.1930%" y="351.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (65,852,782 samples, 0.15%)</title><rect x="59.9647%" y="373" width="0.1521%" height="15" fill="rgb(248,116,28)" fg:x="25967127949" fg:w="65852782"/><text x="60.2147%" y="383.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::read (61,136,055 samples, 0.14%)</title><rect x="59.9756%" y="357" width="0.1412%" height="15" fill="rgb(219,72,43)" fg:x="25971844676" fg:w="61136055"/><text x="60.2256%" y="367.50"></text></g><g><title>core::ptr::read (61,136,055 samples, 0.14%)</title><rect x="59.9756%" y="341" width="0.1412%" height="15" fill="rgb(209,138,14)" fg:x="25971844676" fg:w="61136055"/><text x="60.2256%" y="351.50"></text></g><g><title>&lt;XLang_Rust::vm::executor::variable::VMInstructions as XLang_Rust::vm::gc::gc::GCObject&gt;::free (80,190,457 samples, 0.19%)</title><rect x="60.7152%" y="357" width="0.1852%" height="15" fill="rgb(222,18,33)" fg:x="26292111033" fg:w="80190457"/><text x="60.9652%" y="367.50"></text></g><g><title>_RNvCs7kbacHzvpHZ_7___rustc13___rdl_dealloc (30,654,904 samples, 0.07%)</title><rect x="61.1285%" y="293" width="0.0708%" height="15" fill="rgb(213,199,7)" fg:x="26471099804" fg:w="30654904"/><text x="61.3785%" y="303.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (9,427,730 samples, 0.02%)</title><rect x="61.1775%" y="277" width="0.0218%" height="15" fill="rgb(250,110,10)" fg:x="26492326978" fg:w="9427730"/><text x="61.4275%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1,480,449,649 samples, 3.42%)</title><rect x="60.9871%" y="325" width="3.4187%" height="15" fill="rgb(248,123,6)" fg:x="26409884687" fg:w="1480449649"/><text x="61.2371%" y="335.50">&lt;al..</text></g><g><title>alloc::alloc::dealloc (1,480,449,649 samples, 3.42%)</title><rect x="60.9871%" y="309" width="3.4187%" height="15" fill="rgb(206,91,31)" fg:x="26409884687" fg:w="1480449649"/><text x="61.2371%" y="319.50">all..</text></g><g><title>cfree (1,386,226,734 samples, 3.20%)</title><rect x="61.2047%" y="293" width="3.2011%" height="15" fill="rgb(211,154,13)" fg:x="26504107602" fg:w="1386226734"/><text x="61.4547%" y="303.50">cfr..</text></g><g><title>[libc.so.6] (614,404,402 samples, 1.42%)</title><rect x="62.9870%" y="277" width="1.4188%" height="15" fill="rgb(225,148,7)" fg:x="27275929934" fg:w="614404402"/><text x="63.2370%" y="287.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,506,317,115 samples, 3.48%)</title><rect x="60.9490%" y="341" width="3.4785%" height="15" fill="rgb(220,160,43)" fg:x="26393355714" fg:w="1506317115"/><text x="61.1990%" y="351.50">&lt;al..</text></g><g><title>core::alloc::layout::Layout::for_value_raw (9,338,493 samples, 0.02%)</title><rect x="64.4059%" y="325" width="0.0216%" height="15" fill="rgb(213,52,39)" fg:x="27890334336" fg:w="9338493"/><text x="64.6559%" y="335.50"></text></g><g><title>core::mem::size_of_val_raw (9,338,493 samples, 0.02%)</title><rect x="64.4059%" y="309" width="0.0216%" height="15" fill="rgb(243,137,7)" fg:x="27890334336" fg:w="9338493"/><text x="64.6559%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (221,480,337 samples, 0.51%)</title><rect x="65.0909%" y="293" width="0.5115%" height="15" fill="rgb(230,79,13)" fg:x="28186981684" fg:w="221480337"/><text x="65.3409%" y="303.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&lt;&amp;usize&gt;&gt;::sum (221,480,337 samples, 0.51%)</title><rect x="65.0909%" y="277" width="0.5115%" height="15" fill="rgb(247,105,23)" fg:x="28186981684" fg:w="221480337"/><text x="65.3409%" y="287.50"></text></g><g><title>&lt;std::collections::hash::map::Values&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::fold (221,480,337 samples, 0.51%)</title><rect x="65.0909%" y="261" width="0.5115%" height="15" fill="rgb(223,179,41)" fg:x="28186981684" fg:w="221480337"/><text x="65.3409%" y="271.50"></text></g><g><title>&lt;std::collections::hash::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::fold (221,480,337 samples, 0.51%)</title><rect x="65.0909%" y="245" width="0.5115%" height="15" fill="rgb(218,9,34)" fg:x="28186981684" fg:w="221480337"/><text x="65.3409%" y="255.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::fold (221,480,337 samples, 0.51%)</title><rect x="65.0909%" y="229" width="0.5115%" height="15" fill="rgb(222,106,8)" fg:x="28186981684" fg:w="221480337"/><text x="65.3409%" y="239.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (221,480,337 samples, 0.51%)</title><rect x="65.0909%" y="213" width="0.5115%" height="15" fill="rgb(211,220,0)" fg:x="28186981684" fg:w="221480337"/><text x="65.3409%" y="223.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (221,480,337 samples, 0.51%)</title><rect x="65.0909%" y="197" width="0.5115%" height="15" fill="rgb(229,52,16)" fg:x="28186981684" fg:w="221480337"/><text x="65.3409%" y="207.50"></text></g><g><title>hashbrown::control::group::neon::Group::load_aligned (16,513,901 samples, 0.04%)</title><rect x="65.8307%" y="197" width="0.0381%" height="15" fill="rgb(212,155,18)" fg:x="28507359212" fg:w="16513901"/><text x="66.0807%" y="207.50"></text></g><g><title>core::core_arch::aarch64::neon::generated::vld1_u8 (16,513,901 samples, 0.04%)</title><rect x="65.8307%" y="181" width="0.0381%" height="15" fill="rgb(242,21,14)" fg:x="28507359212" fg:w="16513901"/><text x="66.0807%" y="191.50"></text></g><g><title>core::ptr::read_unaligned (16,513,901 samples, 0.04%)</title><rect x="65.8307%" y="165" width="0.0381%" height="15" fill="rgb(222,19,48)" fg:x="28507359212" fg:w="16513901"/><text x="66.0807%" y="175.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (16,513,901 samples, 0.04%)</title><rect x="65.8307%" y="149" width="0.0381%" height="15" fill="rgb(232,45,27)" fg:x="28507359212" fg:w="16513901"/><text x="66.0807%" y="159.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::new (155,288,721 samples, 0.36%)</title><rect x="65.8307%" y="213" width="0.3586%" height="15" fill="rgb(249,103,42)" fg:x="28507359212" fg:w="155288721"/><text x="66.0807%" y="223.50"></text></g><g><title>hashbrown::control::group::neon::Group::match_full (138,774,820 samples, 0.32%)</title><rect x="65.8689%" y="197" width="0.3205%" height="15" fill="rgb(246,81,33)" fg:x="28523873113" fg:w="138774820"/><text x="66.1189%" y="207.50"></text></g><g><title>core::core_arch::aarch64::neon::generated::vcgez_s8 (138,774,820 samples, 0.32%)</title><rect x="65.8689%" y="181" width="0.3205%" height="15" fill="rgb(252,33,42)" fg:x="28523873113" fg:w="138774820"/><text x="66.1189%" y="191.50"></text></g><g><title>&lt;XLang_Rust::vm::gc::gc::GCTraceable as core::ops::drop::Drop&gt;::drop (579,166,346 samples, 1.34%)</title><rect x="64.8682%" y="309" width="1.3374%" height="15" fill="rgb(209,212,41)" fg:x="28090554787" fg:w="579166346"/><text x="65.1182%" y="319.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::values (261,259,112 samples, 0.60%)</title><rect x="65.6023%" y="293" width="0.6033%" height="15" fill="rgb(207,154,6)" fg:x="28408462021" fg:w="261259112"/><text x="65.8523%" y="303.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::iter (261,259,112 samples, 0.60%)</title><rect x="65.6023%" y="277" width="0.6033%" height="15" fill="rgb(223,64,47)" fg:x="28408462021" fg:w="261259112"/><text x="65.8523%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (261,259,112 samples, 0.60%)</title><rect x="65.6023%" y="261" width="0.6033%" height="15" fill="rgb(211,161,38)" fg:x="28408462021" fg:w="261259112"/><text x="65.8523%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter (261,259,112 samples, 0.60%)</title><rect x="65.6023%" y="245" width="0.6033%" height="15" fill="rgb(219,138,40)" fg:x="28408462021" fg:w="261259112"/><text x="65.8523%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner::iter (261,259,112 samples, 0.60%)</title><rect x="65.6023%" y="229" width="0.6033%" height="15" fill="rgb(241,228,46)" fg:x="28408462021" fg:w="261259112"/><text x="65.8523%" y="239.50"></text></g><g><title>hashbrown::raw::RawTableInner::data_end (7,073,200 samples, 0.02%)</title><rect x="66.1893%" y="213" width="0.0163%" height="15" fill="rgb(223,209,38)" fg:x="28662647933" fg:w="7073200"/><text x="66.4393%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;XLang_Rust::vm::gc::gc::GCTraceable&gt; (583,879,757 samples, 1.35%)</title><rect x="64.8682%" y="325" width="1.3483%" height="15" fill="rgb(236,164,45)" fg:x="28090554787" fg:w="583879757"/><text x="65.1182%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;XLang_Rust::vm::gc::gc::GCRef,usize,rustc_hash::FxBuildHasher&gt;&gt; (4,713,411 samples, 0.01%)</title><rect x="66.2057%" y="309" width="0.0109%" height="15" fill="rgb(231,15,5)" fg:x="28669721133" fg:w="4713411"/><text x="66.4557%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;XLang_Rust::vm::gc::gc::GCRef,usize,rustc_hash::FxBuildHasher&gt;&gt; (4,713,411 samples, 0.01%)</title><rect x="66.2057%" y="293" width="0.0109%" height="15" fill="rgb(252,35,15)" fg:x="28669721133" fg:w="4713411"/><text x="66.4557%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(XLang_Rust::vm::gc::gc::GCRef,usize)&gt;&gt; (4,713,411 samples, 0.01%)</title><rect x="66.2057%" y="277" width="0.0109%" height="15" fill="rgb(248,181,18)" fg:x="28669721133" fg:w="4713411"/><text x="66.4557%" y="287.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4,713,411 samples, 0.01%)</title><rect x="66.2057%" y="261" width="0.0109%" height="15" fill="rgb(233,39,42)" fg:x="28669721133" fg:w="4713411"/><text x="66.4557%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (4,713,411 samples, 0.01%)</title><rect x="66.2057%" y="245" width="0.0109%" height="15" fill="rgb(238,110,33)" fg:x="28669721133" fg:w="4713411"/><text x="66.4557%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;XLang_Rust::vm::executor::variable::VMInt&gt; (777,119,768 samples, 1.79%)</title><rect x="64.4274%" y="341" width="1.7946%" height="15" fill="rgb(233,195,10)" fg:x="27899672829" fg:w="777119768"/><text x="64.6774%" y="351.50">c..</text></g><g><title>core::iter::traits::iterator::Iterator::sum (39,998,030 samples, 0.09%)</title><rect x="66.6349%" y="293" width="0.0924%" height="15" fill="rgb(254,105,3)" fg:x="28855600530" fg:w="39998030"/><text x="66.8849%" y="303.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&lt;&amp;usize&gt;&gt;::sum (39,998,030 samples, 0.09%)</title><rect x="66.6349%" y="277" width="0.0924%" height="15" fill="rgb(221,225,9)" fg:x="28855600530" fg:w="39998030"/><text x="66.8849%" y="287.50"></text></g><g><title>&lt;std::collections::hash::map::Values&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::fold (39,998,030 samples, 0.09%)</title><rect x="66.6349%" y="261" width="0.0924%" height="15" fill="rgb(224,227,45)" fg:x="28855600530" fg:w="39998030"/><text x="66.8849%" y="271.50"></text></g><g><title>&lt;std::collections::hash::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::fold (39,998,030 samples, 0.09%)</title><rect x="66.6349%" y="245" width="0.0924%" height="15" fill="rgb(229,198,43)" fg:x="28855600530" fg:w="39998030"/><text x="66.8849%" y="255.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::fold (39,998,030 samples, 0.09%)</title><rect x="66.6349%" y="229" width="0.0924%" height="15" fill="rgb(206,209,35)" fg:x="28855600530" fg:w="39998030"/><text x="66.8849%" y="239.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (39,998,030 samples, 0.09%)</title><rect x="66.6349%" y="213" width="0.0924%" height="15" fill="rgb(245,195,53)" fg:x="28855600530" fg:w="39998030"/><text x="66.8849%" y="223.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (39,998,030 samples, 0.09%)</title><rect x="66.6349%" y="197" width="0.0924%" height="15" fill="rgb(240,92,26)" fg:x="28855600530" fg:w="39998030"/><text x="66.8849%" y="207.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::new (23,560,808 samples, 0.05%)</title><rect x="66.8031%" y="213" width="0.0544%" height="15" fill="rgb(207,40,23)" fg:x="28928456634" fg:w="23560808"/><text x="67.0531%" y="223.50"></text></g><g><title>hashbrown::control::group::neon::Group::match_full (23,560,808 samples, 0.05%)</title><rect x="66.8031%" y="197" width="0.0544%" height="15" fill="rgb(223,111,35)" fg:x="28928456634" fg:w="23560808"/><text x="67.0531%" y="207.50"></text></g><g><title>core::core_arch::aarch64::neon::generated::vcgez_s8 (23,560,808 samples, 0.05%)</title><rect x="66.8031%" y="181" width="0.0544%" height="15" fill="rgb(229,147,28)" fg:x="28928456634" fg:w="23560808"/><text x="67.0531%" y="191.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCRef::free (2,933,175,708 samples, 6.77%)</title><rect x="60.1168%" y="373" width="6.7734%" height="15" fill="rgb(211,29,28)" fg:x="26032980731" fg:w="2933175708"/><text x="60.3668%" y="383.50">XLang_Rus..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn XLang_Rust::vm::gc::gc::GCObject&gt;&gt; (2,593,854,949 samples, 5.99%)</title><rect x="60.9003%" y="357" width="5.9899%" height="15" fill="rgb(228,72,33)" fg:x="26372301490" fg:w="2593854949"/><text x="61.1503%" y="367.50">core::pt..</text></g><g><title>core::ptr::drop_in_place&lt;XLang_Rust::vm::executor::variable::VMNull&gt; (289,363,842 samples, 0.67%)</title><rect x="66.2220%" y="341" width="0.6682%" height="15" fill="rgb(205,214,31)" fg:x="28676792597" fg:w="289363842"/><text x="66.4720%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;XLang_Rust::vm::gc::gc::GCTraceable&gt; (124,703,442 samples, 0.29%)</title><rect x="66.6022%" y="325" width="0.2880%" height="15" fill="rgb(224,111,15)" fg:x="28841452997" fg:w="124703442"/><text x="66.8522%" y="335.50"></text></g><g><title>&lt;XLang_Rust::vm::gc::gc::GCTraceable as core::ops::drop::Drop&gt;::drop (124,703,442 samples, 0.29%)</title><rect x="66.6022%" y="309" width="0.2880%" height="15" fill="rgb(253,21,26)" fg:x="28841452997" fg:w="124703442"/><text x="66.8522%" y="319.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::values (70,557,879 samples, 0.16%)</title><rect x="66.7273%" y="293" width="0.1629%" height="15" fill="rgb(245,139,43)" fg:x="28895598560" fg:w="70557879"/><text x="66.9773%" y="303.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::iter (70,557,879 samples, 0.16%)</title><rect x="66.7273%" y="277" width="0.1629%" height="15" fill="rgb(252,170,7)" fg:x="28895598560" fg:w="70557879"/><text x="66.9773%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (70,557,879 samples, 0.16%)</title><rect x="66.7273%" y="261" width="0.1629%" height="15" fill="rgb(231,118,14)" fg:x="28895598560" fg:w="70557879"/><text x="66.9773%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter (70,557,879 samples, 0.16%)</title><rect x="66.7273%" y="245" width="0.1629%" height="15" fill="rgb(238,83,0)" fg:x="28895598560" fg:w="70557879"/><text x="66.9773%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner::iter (70,557,879 samples, 0.16%)</title><rect x="66.7273%" y="229" width="0.1629%" height="15" fill="rgb(221,39,39)" fg:x="28895598560" fg:w="70557879"/><text x="66.9773%" y="239.50"></text></g><g><title>hashbrown::raw::RawTableInner::data_end (14,138,997 samples, 0.03%)</title><rect x="66.8576%" y="213" width="0.0327%" height="15" fill="rgb(222,119,46)" fg:x="28952017442" fg:w="14138997"/><text x="67.1076%" y="223.50"></text></g><g><title>&lt;XLang_Rust::vm::executor::variable::VMNativeFunction as XLang_Rust::vm::gc::gc::GCObject&gt;::get_traceable (44,658,174 samples, 0.10%)</title><rect x="67.4276%" y="357" width="0.1031%" height="15" fill="rgb(222,165,49)" fg:x="29198868862" fg:w="44658174"/><text x="67.6776%" y="367.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCRef::get_traceable (291,486,538 samples, 0.67%)</title><rect x="66.8902%" y="373" width="0.6731%" height="15" fill="rgb(219,113,52)" fg:x="28966156439" fg:w="291486538"/><text x="67.1402%" y="383.50"></text></g><g><title>&lt;XLang_Rust::vm::executor::variable::VMNull as XLang_Rust::vm::gc::gc::GCObject&gt;::get_traceable (14,115,941 samples, 0.03%)</title><rect x="67.5307%" y="357" width="0.0326%" height="15" fill="rgb(214,7,15)" fg:x="29243527036" fg:w="14115941"/><text x="67.7807%" y="367.50"></text></g><g><title>&lt;XLang_Rust::vm::executor::variable::VMNativeFunction as XLang_Rust::vm::gc::gc::GCObject&gt;::get_const_traceable (16,463,233 samples, 0.04%)</title><rect x="67.7969%" y="357" width="0.0380%" height="15" fill="rgb(235,32,4)" fg:x="29358801333" fg:w="16463233"/><text x="68.0469%" y="367.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCRef::is_locked (134,112,458 samples, 0.31%)</title><rect x="67.5633%" y="373" width="0.3097%" height="15" fill="rgb(238,90,54)" fg:x="29257642977" fg:w="134112458"/><text x="67.8133%" y="383.50"></text></g><g><title>&lt;XLang_Rust::vm::executor::variable::VMNull as XLang_Rust::vm::gc::gc::GCObject&gt;::get_const_traceable (16,490,869 samples, 0.04%)</title><rect x="67.8349%" y="357" width="0.0381%" height="15" fill="rgb(213,208,19)" fg:x="29375264566" fg:w="16490869"/><text x="68.0849%" y="367.50"></text></g><g><title>&lt;XLang_Rust::vm::executor::variable::VMNativeFunction as XLang_Rust::vm::gc::gc::GCObject&gt;::get_const_traceable (21,164,576 samples, 0.05%)</title><rect x="68.0683%" y="341" width="0.0489%" height="15" fill="rgb(233,156,4)" fg:x="29476331969" fg:w="21164576"/><text x="68.3183%" y="351.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCRef::is_online (112,803,467 samples, 0.26%)</title><rect x="67.8730%" y="373" width="0.2605%" height="15" fill="rgb(207,194,5)" fg:x="29391755435" fg:w="112803467"/><text x="68.1230%" y="383.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCRef::get_const_traceable (112,803,467 samples, 0.26%)</title><rect x="67.8730%" y="357" width="0.2605%" height="15" fill="rgb(206,111,30)" fg:x="29391755435" fg:w="112803467"/><text x="68.1230%" y="367.50"></text></g><g><title>&lt;XLang_Rust::vm::executor::variable::VMNull as XLang_Rust::vm::gc::gc::GCObject&gt;::get_const_traceable (7,062,357 samples, 0.02%)</title><rect x="68.1172%" y="341" width="0.0163%" height="15" fill="rgb(243,70,54)" fg:x="29497496545" fg:w="7062357"/><text x="68.3672%" y="351.50"></text></g><g><title>alloc::vec::from_elem (11,717,657 samples, 0.03%)</title><rect x="68.1389%" y="373" width="0.0271%" height="15" fill="rgb(242,28,8)" fg:x="29506912067" fg:w="11717657"/><text x="68.3889%" y="383.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (11,717,657 samples, 0.03%)</title><rect x="68.1389%" y="357" width="0.0271%" height="15" fill="rgb(219,106,18)" fg:x="29506912067" fg:w="11717657"/><text x="68.3889%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (11,717,657 samples, 0.03%)</title><rect x="68.1389%" y="341" width="0.0271%" height="15" fill="rgb(244,222,10)" fg:x="29506912067" fg:w="11717657"/><text x="68.3889%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_zeroed_in (11,717,657 samples, 0.03%)</title><rect x="68.1389%" y="325" width="0.0271%" height="15" fill="rgb(236,179,52)" fg:x="29506912067" fg:w="11717657"/><text x="68.3889%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (11,717,657 samples, 0.03%)</title><rect x="68.1389%" y="309" width="0.0271%" height="15" fill="rgb(213,23,39)" fg:x="29506912067" fg:w="11717657"/><text x="68.3889%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (11,717,657 samples, 0.03%)</title><rect x="68.1389%" y="293" width="0.0271%" height="15" fill="rgb(238,48,10)" fg:x="29506912067" fg:w="11717657"/><text x="68.3889%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (11,717,657 samples, 0.03%)</title><rect x="68.1389%" y="277" width="0.0271%" height="15" fill="rgb(251,196,23)" fg:x="29506912067" fg:w="11717657"/><text x="68.3889%" y="287.50"></text></g><g><title>alloc::alloc::alloc_zeroed (11,717,657 samples, 0.03%)</title><rect x="68.1389%" y="261" width="0.0271%" height="15" fill="rgb(250,152,24)" fg:x="29506912067" fg:w="11717657"/><text x="68.3889%" y="271.50"></text></g><g><title>memset (11,717,657 samples, 0.03%)</title><rect x="68.1389%" y="245" width="0.0271%" height="15" fill="rgb(209,150,17)" fg:x="29506912067" fg:w="11717657"/><text x="68.3889%" y="255.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (44,667,094 samples, 0.10%)</title><rect x="68.1660%" y="373" width="0.1031%" height="15" fill="rgb(234,202,34)" fg:x="29518629724" fg:w="44667094"/><text x="68.4160%" y="383.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (44,667,094 samples, 0.10%)</title><rect x="68.1660%" y="357" width="0.1031%" height="15" fill="rgb(253,148,53)" fg:x="29518629724" fg:w="44667094"/><text x="68.4160%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (44,667,094 samples, 0.10%)</title><rect x="68.1660%" y="341" width="0.1031%" height="15" fill="rgb(218,129,16)" fg:x="29518629724" fg:w="44667094"/><text x="68.4160%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::enumerate::_{{closure}} (39,938,620 samples, 0.09%)</title><rect x="68.3017%" y="197" width="0.0922%" height="15" fill="rgb(216,85,19)" fg:x="29577409687" fg:w="39938620"/><text x="68.5517%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::_{{closure}} (30,534,468 samples, 0.07%)</title><rect x="68.3235%" y="181" width="0.0705%" height="15" fill="rgb(235,228,7)" fg:x="29586813839" fg:w="30534468"/><text x="68.5735%" y="191.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (30,534,468 samples, 0.07%)</title><rect x="68.3235%" y="165" width="0.0705%" height="15" fill="rgb(245,175,0)" fg:x="29586813839" fg:w="30534468"/><text x="68.5735%" y="175.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCSystem::immediate_collect::_{{closure}} (30,534,468 samples, 0.07%)</title><rect x="68.3235%" y="149" width="0.0705%" height="15" fill="rgb(208,168,36)" fg:x="29586813839" fg:w="30534468"/><text x="68.5735%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (30,534,468 samples, 0.07%)</title><rect x="68.3235%" y="133" width="0.0705%" height="15" fill="rgb(246,171,24)" fg:x="29586813839" fg:w="30534468"/><text x="68.5735%" y="143.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (30,534,468 samples, 0.07%)</title><rect x="68.3235%" y="117" width="0.0705%" height="15" fill="rgb(215,142,24)" fg:x="29586813839" fg:w="30534468"/><text x="68.5735%" y="127.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (30,534,468 samples, 0.07%)</title><rect x="68.3235%" y="101" width="0.0705%" height="15" fill="rgb(250,187,7)" fg:x="29586813839" fg:w="30534468"/><text x="68.5735%" y="111.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (47,009,000 samples, 0.11%)</title><rect x="68.3017%" y="261" width="0.1086%" height="15" fill="rgb(228,66,33)" fg:x="29577409687" fg:w="47009000"/><text x="68.5517%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (47,009,000 samples, 0.11%)</title><rect x="68.3017%" y="245" width="0.1086%" height="15" fill="rgb(234,215,21)" fg:x="29577409687" fg:w="47009000"/><text x="68.5517%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (47,009,000 samples, 0.11%)</title><rect x="68.3017%" y="229" width="0.1086%" height="15" fill="rgb(222,191,20)" fg:x="29577409687" fg:w="47009000"/><text x="68.5517%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (47,009,000 samples, 0.11%)</title><rect x="68.3017%" y="213" width="0.1086%" height="15" fill="rgb(245,79,54)" fg:x="29577409687" fg:w="47009000"/><text x="68.5517%" y="223.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7,070,380 samples, 0.02%)</title><rect x="68.3940%" y="197" width="0.0163%" height="15" fill="rgb(240,10,37)" fg:x="29617348307" fg:w="7070380"/><text x="68.6440%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (56,445,443 samples, 0.13%)</title><rect x="68.3017%" y="277" width="0.1303%" height="15" fill="rgb(214,192,32)" fg:x="29577409687" fg:w="56445443"/><text x="68.5517%" y="287.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (9,436,443 samples, 0.02%)</title><rect x="68.4103%" y="261" width="0.0218%" height="15" fill="rgb(209,36,54)" fg:x="29624418687" fg:w="9436443"/><text x="68.6603%" y="271.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (9,436,443 samples, 0.02%)</title><rect x="68.4103%" y="245" width="0.0218%" height="15" fill="rgb(220,10,11)" fg:x="29624418687" fg:w="9436443"/><text x="68.6603%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::capacity (4,712,509 samples, 0.01%)</title><rect x="68.4321%" y="277" width="0.0109%" height="15" fill="rgb(221,106,17)" fg:x="29633855130" fg:w="4712509"/><text x="68.6821%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity (4,712,509 samples, 0.01%)</title><rect x="68.4321%" y="261" width="0.0109%" height="15" fill="rgb(251,142,44)" fg:x="29633855130" fg:w="4712509"/><text x="68.6821%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::capacity (4,712,509 samples, 0.01%)</title><rect x="68.4321%" y="245" width="0.0109%" height="15" fill="rgb(238,13,15)" fg:x="29633855130" fg:w="4712509"/><text x="68.6821%" y="255.50"></text></g><g><title>[unknown] (4,704,600 samples, 0.01%)</title><rect x="68.4484%" y="101" width="0.0109%" height="15" fill="rgb(208,107,27)" fg:x="29640924856" fg:w="4704600"/><text x="68.6984%" y="111.50"></text></g><g><title>[unknown] (4,704,600 samples, 0.01%)</title><rect x="68.4484%" y="85" width="0.0109%" height="15" fill="rgb(205,136,37)" fg:x="29640924856" fg:w="4704600"/><text x="68.6984%" y="95.50"></text></g><g><title>[unknown] (4,704,600 samples, 0.01%)</title><rect x="68.4484%" y="69" width="0.0109%" height="15" fill="rgb(250,205,27)" fg:x="29640924856" fg:w="4704600"/><text x="68.6984%" y="79.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (9,397,071 samples, 0.02%)</title><rect x="68.4430%" y="277" width="0.0217%" height="15" fill="rgb(210,80,43)" fg:x="29638567639" fg:w="9397071"/><text x="68.6930%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (9,397,071 samples, 0.02%)</title><rect x="68.4430%" y="261" width="0.0217%" height="15" fill="rgb(247,160,36)" fg:x="29638567639" fg:w="9397071"/><text x="68.6930%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (9,397,071 samples, 0.02%)</title><rect x="68.4430%" y="245" width="0.0217%" height="15" fill="rgb(234,13,49)" fg:x="29638567639" fg:w="9397071"/><text x="68.6930%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (9,397,071 samples, 0.02%)</title><rect x="68.4430%" y="229" width="0.0217%" height="15" fill="rgb(234,122,0)" fg:x="29638567639" fg:w="9397071"/><text x="68.6930%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (9,397,071 samples, 0.02%)</title><rect x="68.4430%" y="213" width="0.0217%" height="15" fill="rgb(207,146,38)" fg:x="29638567639" fg:w="9397071"/><text x="68.6930%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (9,397,071 samples, 0.02%)</title><rect x="68.4430%" y="197" width="0.0217%" height="15" fill="rgb(207,177,25)" fg:x="29638567639" fg:w="9397071"/><text x="68.6930%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (9,397,071 samples, 0.02%)</title><rect x="68.4430%" y="181" width="0.0217%" height="15" fill="rgb(211,178,42)" fg:x="29638567639" fg:w="9397071"/><text x="68.6930%" y="191.50"></text></g><g><title>alloc::alloc::Global::grow_impl (9,397,071 samples, 0.02%)</title><rect x="68.4430%" y="165" width="0.0217%" height="15" fill="rgb(230,69,54)" fg:x="29638567639" fg:w="9397071"/><text x="68.6930%" y="175.50"></text></g><g><title>alloc::alloc::realloc (9,397,071 samples, 0.02%)</title><rect x="68.4430%" y="149" width="0.0217%" height="15" fill="rgb(214,135,41)" fg:x="29638567639" fg:w="9397071"/><text x="68.6930%" y="159.50"></text></g><g><title>realloc (7,039,854 samples, 0.02%)</title><rect x="68.4484%" y="133" width="0.0163%" height="15" fill="rgb(237,67,25)" fg:x="29640924856" fg:w="7039854"/><text x="68.6984%" y="143.50"></text></g><g><title>[libc.so.6] (7,039,854 samples, 0.02%)</title><rect x="68.4484%" y="117" width="0.0163%" height="15" fill="rgb(222,189,50)" fg:x="29640924856" fg:w="7039854"/><text x="68.6984%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (339,797,336 samples, 0.78%)</title><rect x="68.2692%" y="309" width="0.7847%" height="15" fill="rgb(245,148,34)" fg:x="29563296818" fg:w="339797336"/><text x="68.5192%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (339,797,336 samples, 0.78%)</title><rect x="68.2692%" y="293" width="0.7847%" height="15" fill="rgb(222,29,6)" fg:x="29563296818" fg:w="339797336"/><text x="68.5192%" y="303.50"></text></g><g><title>core::ptr::write (255,129,444 samples, 0.59%)</title><rect x="68.4647%" y="277" width="0.5892%" height="15" fill="rgb(221,189,43)" fg:x="29647964710" fg:w="255129444"/><text x="68.7147%" y="287.50"></text></g><g><title>[unknown] (159,567,923 samples, 0.37%)</title><rect x="68.6853%" y="261" width="0.3685%" height="15" fill="rgb(207,36,27)" fg:x="29743526231" fg:w="159567923"/><text x="68.9353%" y="271.50"></text></g><g><title>[unknown] (159,567,923 samples, 0.37%)</title><rect x="68.6853%" y="245" width="0.3685%" height="15" fill="rgb(217,90,24)" fg:x="29743526231" fg:w="159567923"/><text x="68.9353%" y="255.50"></text></g><g><title>[unknown] (159,567,923 samples, 0.37%)</title><rect x="68.6853%" y="229" width="0.3685%" height="15" fill="rgb(224,66,35)" fg:x="29743526231" fg:w="159567923"/><text x="68.9353%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (346,830,338 samples, 0.80%)</title><rect x="68.2692%" y="373" width="0.8009%" height="15" fill="rgb(221,13,50)" fg:x="29563296818" fg:w="346830338"/><text x="68.5192%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (346,830,338 samples, 0.80%)</title><rect x="68.2692%" y="357" width="0.8009%" height="15" fill="rgb(236,68,49)" fg:x="29563296818" fg:w="346830338"/><text x="68.5192%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (346,830,338 samples, 0.80%)</title><rect x="68.2692%" y="341" width="0.8009%" height="15" fill="rgb(229,146,28)" fg:x="29563296818" fg:w="346830338"/><text x="68.5192%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (346,830,338 samples, 0.80%)</title><rect x="68.2692%" y="325" width="0.8009%" height="15" fill="rgb(225,31,38)" fg:x="29563296818" fg:w="346830338"/><text x="68.5192%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (4,703,289 samples, 0.01%)</title><rect x="69.0592%" y="309" width="0.0109%" height="15" fill="rgb(250,208,3)" fg:x="29905423867" fg:w="4703289"/><text x="69.3092%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (4,703,289 samples, 0.01%)</title><rect x="69.0592%" y="293" width="0.0109%" height="15" fill="rgb(246,54,23)" fg:x="29905423867" fg:w="4703289"/><text x="69.3092%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (4,703,289 samples, 0.01%)</title><rect x="69.0592%" y="277" width="0.0109%" height="15" fill="rgb(243,76,11)" fg:x="29905423867" fg:w="4703289"/><text x="69.3092%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (4,703,289 samples, 0.01%)</title><rect x="69.0592%" y="261" width="0.0109%" height="15" fill="rgb(245,21,50)" fg:x="29905423867" fg:w="4703289"/><text x="69.3092%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (4,703,289 samples, 0.01%)</title><rect x="69.0592%" y="245" width="0.0109%" height="15" fill="rgb(228,9,43)" fg:x="29905423867" fg:w="4703289"/><text x="69.3092%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4,703,289 samples, 0.01%)</title><rect x="69.0592%" y="229" width="0.0109%" height="15" fill="rgb(208,100,47)" fg:x="29905423867" fg:w="4703289"/><text x="69.3092%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4,703,289 samples, 0.01%)</title><rect x="69.0592%" y="213" width="0.0109%" height="15" fill="rgb(232,26,8)" fg:x="29905423867" fg:w="4703289"/><text x="69.3092%" y="223.50"></text></g><g><title>alloc::alloc::alloc (4,703,289 samples, 0.01%)</title><rect x="69.0592%" y="197" width="0.0109%" height="15" fill="rgb(216,166,38)" fg:x="29905423867" fg:w="4703289"/><text x="69.3092%" y="207.50"></text></g><g><title>malloc (4,703,289 samples, 0.01%)</title><rect x="69.0592%" y="181" width="0.0109%" height="15" fill="rgb(251,202,51)" fg:x="29905423867" fg:w="4703289"/><text x="69.3092%" y="191.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCSystem::immediate_collect (6,175,209,920 samples, 14.26%)</title><rect x="58.0094%" y="389" width="14.2601%" height="15" fill="rgb(254,216,34)" fg:x="25120389556" fg:w="6175209920"/><text x="58.2594%" y="399.50">XLang_Rust::vm::gc::gc..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;XLang_Rust::vm::gc::gc::GCRef&gt;&gt; (1,381,730,156 samples, 3.19%)</title><rect x="69.0787%" y="373" width="3.1908%" height="15" fill="rgb(251,32,27)" fg:x="29913869320" fg:w="1381730156"/><text x="69.3287%" y="383.50">cor..</text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,381,730,156 samples, 3.19%)</title><rect x="69.0787%" y="357" width="3.1908%" height="15" fill="rgb(208,127,28)" fg:x="29913869320" fg:w="1381730156"/><text x="69.3287%" y="367.50">&lt;al..</text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;XLang_Rust::vm::gc::gc::GCRef,alloc::alloc::Global&gt;&gt; (1,381,730,156 samples, 3.19%)</title><rect x="69.0787%" y="341" width="3.1908%" height="15" fill="rgb(224,137,22)" fg:x="29913869320" fg:w="1381730156"/><text x="69.3287%" y="351.50">cor..</text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,381,730,156 samples, 3.19%)</title><rect x="69.0787%" y="325" width="3.1908%" height="15" fill="rgb(254,70,32)" fg:x="29913869320" fg:w="1381730156"/><text x="69.3287%" y="335.50">&lt;&lt;a..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;XLang_Rust::vm::gc::gc::GCRef&gt;&gt; (1,381,730,156 samples, 3.19%)</title><rect x="69.0787%" y="309" width="3.1908%" height="15" fill="rgb(229,75,37)" fg:x="29913869320" fg:w="1381730156"/><text x="69.3287%" y="319.50">cor..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,381,730,156 samples, 3.19%)</title><rect x="69.0787%" y="293" width="3.1908%" height="15" fill="rgb(252,64,23)" fg:x="29913869320" fg:w="1381730156"/><text x="69.3287%" y="303.50">&lt;al..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (1,381,730,156 samples, 3.19%)</title><rect x="69.0787%" y="277" width="3.1908%" height="15" fill="rgb(232,162,48)" fg:x="29913869320" fg:w="1381730156"/><text x="69.3287%" y="287.50">all..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1,381,730,156 samples, 3.19%)</title><rect x="69.0787%" y="261" width="3.1908%" height="15" fill="rgb(246,160,12)" fg:x="29913869320" fg:w="1381730156"/><text x="69.3287%" y="271.50">&lt;al..</text></g><g><title>alloc::alloc::dealloc (1,381,730,156 samples, 3.19%)</title><rect x="69.0787%" y="245" width="3.1908%" height="15" fill="rgb(247,166,0)" fg:x="29913869320" fg:w="1381730156"/><text x="69.3287%" y="255.50">all..</text></g><g><title>cfree (1,381,730,156 samples, 3.19%)</title><rect x="69.0787%" y="229" width="3.1908%" height="15" fill="rgb(249,219,21)" fg:x="29913869320" fg:w="1381730156"/><text x="69.3287%" y="239.50">cfr..</text></g><g><title>[libc.so.6] (1,381,730,156 samples, 3.19%)</title><rect x="69.0787%" y="213" width="3.1908%" height="15" fill="rgb(205,209,3)" fg:x="29913869320" fg:w="1381730156"/><text x="69.3287%" y="223.50">[li..</text></g><g><title>[libc.so.6] (1,381,730,156 samples, 3.19%)</title><rect x="69.0787%" y="197" width="3.1908%" height="15" fill="rgb(243,44,1)" fg:x="29913869320" fg:w="1381730156"/><text x="69.3287%" y="207.50">[li..</text></g><g><title>[libc.so.6] (184,400,455 samples, 0.43%)</title><rect x="71.8437%" y="181" width="0.4258%" height="15" fill="rgb(206,159,16)" fg:x="31111199021" fg:w="184400455"/><text x="72.0937%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (6,851,722 samples, 0.02%)</title><rect x="72.2801%" y="373" width="0.0158%" height="15" fill="rgb(244,77,30)" fg:x="31300217834" fg:w="6851722"/><text x="72.5301%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (6,851,722 samples, 0.02%)</title><rect x="72.2801%" y="357" width="0.0158%" height="15" fill="rgb(218,69,12)" fg:x="31300217834" fg:w="6851722"/><text x="72.5301%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (4,626,741 samples, 0.01%)</title><rect x="72.2853%" y="341" width="0.0107%" height="15" fill="rgb(212,87,7)" fg:x="31302442815" fg:w="4626741"/><text x="72.5353%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (4,626,741 samples, 0.01%)</title><rect x="72.2853%" y="325" width="0.0107%" height="15" fill="rgb(245,114,25)" fg:x="31302442815" fg:w="4626741"/><text x="72.5353%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (4,626,741 samples, 0.01%)</title><rect x="72.2853%" y="309" width="0.0107%" height="15" fill="rgb(210,61,42)" fg:x="31302442815" fg:w="4626741"/><text x="72.5353%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (4,626,741 samples, 0.01%)</title><rect x="72.2853%" y="293" width="0.0107%" height="15" fill="rgb(211,52,33)" fg:x="31302442815" fg:w="4626741"/><text x="72.5353%" y="303.50"></text></g><g><title>alloc::alloc::Global::grow_impl (4,626,741 samples, 0.01%)</title><rect x="72.2853%" y="277" width="0.0107%" height="15" fill="rgb(234,58,33)" fg:x="31302442815" fg:w="4626741"/><text x="72.5353%" y="287.50"></text></g><g><title>alloc::alloc::realloc (4,626,741 samples, 0.01%)</title><rect x="72.2853%" y="261" width="0.0107%" height="15" fill="rgb(220,115,36)" fg:x="31302442815" fg:w="4626741"/><text x="72.5353%" y="271.50"></text></g><g><title>realloc (4,626,741 samples, 0.01%)</title><rect x="72.2853%" y="245" width="0.0107%" height="15" fill="rgb(243,153,54)" fg:x="31302442815" fg:w="4626741"/><text x="72.5353%" y="255.50"></text></g><g><title>[libc.so.6] (4,626,741 samples, 0.01%)</title><rect x="72.2853%" y="229" width="0.0107%" height="15" fill="rgb(251,47,18)" fg:x="31302442815" fg:w="4626741"/><text x="72.5353%" y="239.50"></text></g><g><title>[libc.so.6] (4,626,741 samples, 0.01%)</title><rect x="72.2853%" y="213" width="0.0107%" height="15" fill="rgb(242,102,42)" fg:x="31302442815" fg:w="4626741"/><text x="72.5353%" y="223.50"></text></g><g><title>alloc::vec::from_elem (4,579,143 samples, 0.01%)</title><rect x="72.2960%" y="373" width="0.0106%" height="15" fill="rgb(234,31,38)" fg:x="31307069556" fg:w="4579143"/><text x="72.5460%" y="383.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (4,579,143 samples, 0.01%)</title><rect x="72.2960%" y="357" width="0.0106%" height="15" fill="rgb(221,117,51)" fg:x="31307069556" fg:w="4579143"/><text x="72.5460%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (4,495,164 samples, 0.01%)</title><rect x="72.3065%" y="373" width="0.0104%" height="15" fill="rgb(212,20,18)" fg:x="31311648699" fg:w="4495164"/><text x="72.5565%" y="383.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (4,495,164 samples, 0.01%)</title><rect x="72.3065%" y="357" width="0.0104%" height="15" fill="rgb(245,133,36)" fg:x="31311648699" fg:w="4495164"/><text x="72.5565%" y="367.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (4,495,164 samples, 0.01%)</title><rect x="72.3065%" y="341" width="0.0104%" height="15" fill="rgb(212,6,19)" fg:x="31311648699" fg:w="4495164"/><text x="72.5565%" y="351.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (4,495,164 samples, 0.01%)</title><rect x="72.3065%" y="325" width="0.0104%" height="15" fill="rgb(218,1,36)" fg:x="31311648699" fg:w="4495164"/><text x="72.5565%" y="335.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCSystem::mark (25,130,852 samples, 0.06%)</title><rect x="72.2695%" y="389" width="0.0580%" height="15" fill="rgb(246,84,54)" fg:x="31295599476" fg:w="25130852"/><text x="72.5195%" y="399.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCSystem::collect (6,205,009,777 samples, 14.33%)</title><rect x="58.0094%" y="405" width="14.3289%" height="15" fill="rgb(242,110,6)" fg:x="25120389556" fg:w="6205009777"/><text x="58.2594%" y="415.50">XLang_Rust::vm::gc::gc..</text></g><g><title>XLang_Rust::vm::gc::gc::GCSystem::sweep (4,669,005 samples, 0.01%)</title><rect x="72.3275%" y="389" width="0.0108%" height="15" fill="rgb(214,47,5)" fg:x="31320730328" fg:w="4669005"/><text x="72.5775%" y="399.50"></text></g><g><title>_RNvCs7kbacHzvpHZ_7___rustc11___rdl_alloc (44,405,548 samples, 0.10%)</title><rect x="73.3962%" y="325" width="0.1025%" height="15" fill="rgb(218,159,25)" fg:x="31783518236" fg:w="44405548"/><text x="73.6462%" y="335.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (44,405,548 samples, 0.10%)</title><rect x="73.3962%" y="309" width="0.1025%" height="15" fill="rgb(215,211,28)" fg:x="31783518236" fg:w="44405548"/><text x="73.6462%" y="319.50"></text></g><g><title>_RNvCs7kbacHzvpHZ_7___rustc12___rust_alloc (9,042,936 samples, 0.02%)</title><rect x="73.4988%" y="325" width="0.0209%" height="15" fill="rgb(238,59,32)" fg:x="31827923784" fg:w="9042936"/><text x="73.7488%" y="335.50"></text></g><g><title>core::ptr::read_volatile (6,765,162 samples, 0.02%)</title><rect x="73.5196%" y="325" width="0.0156%" height="15" fill="rgb(226,82,3)" fg:x="31836966720" fg:w="6765162"/><text x="73.7696%" y="335.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (2,402,128,471 samples, 5.55%)</title><rect x="72.3383%" y="405" width="5.5471%" height="15" fill="rgb(240,164,32)" fg:x="31325399333" fg:w="2402128471"/><text x="72.5883%" y="415.50">alloc::..</text></g><g><title>alloc::alloc::exchange_malloc (2,120,991,413 samples, 4.90%)</title><rect x="72.9875%" y="389" width="4.8979%" height="15" fill="rgb(232,46,7)" fg:x="31606536391" fg:w="2120991413"/><text x="73.2375%" y="399.50">alloc:..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2,073,640,194 samples, 4.79%)</title><rect x="73.0969%" y="373" width="4.7886%" height="15" fill="rgb(229,129,53)" fg:x="31653887610" fg:w="2073640194"/><text x="73.3469%" y="383.50">&lt;alloc..</text></g><g><title>alloc::alloc::Global::alloc_impl (2,073,640,194 samples, 4.79%)</title><rect x="73.0969%" y="357" width="4.7886%" height="15" fill="rgb(234,188,29)" fg:x="31653887610" fg:w="2073640194"/><text x="73.3469%" y="367.50">alloc:..</text></g><g><title>alloc::alloc::alloc (2,073,640,194 samples, 4.79%)</title><rect x="73.0969%" y="341" width="4.7886%" height="15" fill="rgb(246,141,4)" fg:x="31653887610" fg:w="2073640194"/><text x="73.3469%" y="351.50">alloc:..</text></g><g><title>malloc (1,883,795,922 samples, 4.35%)</title><rect x="73.5353%" y="325" width="4.3502%" height="15" fill="rgb(229,23,39)" fg:x="31843731882" fg:w="1883795922"/><text x="73.7853%" y="335.50">malloc</text></g><g><title>[libc.so.6] (1,405,776,851 samples, 3.25%)</title><rect x="74.6391%" y="309" width="3.2463%" height="15" fill="rgb(206,12,3)" fg:x="32321750953" fg:w="1405776851"/><text x="74.8891%" y="319.50">[li..</text></g><g><title>[libc.so.6] (164,418,329 samples, 0.38%)</title><rect x="77.5057%" y="293" width="0.3797%" height="15" fill="rgb(252,226,20)" fg:x="33563109475" fg:w="164418329"/><text x="77.7557%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (6,763,049 samples, 0.02%)</title><rect x="77.8854%" y="405" width="0.0156%" height="15" fill="rgb(216,123,35)" fg:x="33727527804" fg:w="6763049"/><text x="78.1354%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity (17,969,568 samples, 0.04%)</title><rect x="78.1533%" y="389" width="0.0415%" height="15" fill="rgb(212,68,40)" fg:x="33843539322" fg:w="17969568"/><text x="78.4033%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::capacity (17,969,568 samples, 0.04%)</title><rect x="78.1533%" y="373" width="0.0415%" height="15" fill="rgb(254,125,32)" fg:x="33843539322" fg:w="17969568"/><text x="78.4033%" y="383.50"></text></g><g><title>[libc.so.6] (9,079,671 samples, 0.02%)</title><rect x="78.2000%" y="245" width="0.0210%" height="15" fill="rgb(253,97,22)" fg:x="33863755555" fg:w="9079671"/><text x="78.4500%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (176,792,279 samples, 0.41%)</title><rect x="78.1948%" y="325" width="0.4083%" height="15" fill="rgb(241,101,14)" fg:x="33861508890" fg:w="176792279"/><text x="78.4448%" y="335.50"></text></g><g><title>alloc::alloc::Global::grow_impl (176,792,279 samples, 0.41%)</title><rect x="78.1948%" y="309" width="0.4083%" height="15" fill="rgb(238,103,29)" fg:x="33861508890" fg:w="176792279"/><text x="78.4448%" y="319.50"></text></g><g><title>alloc::alloc::realloc (176,792,279 samples, 0.41%)</title><rect x="78.1948%" y="293" width="0.4083%" height="15" fill="rgb(233,195,47)" fg:x="33861508890" fg:w="176792279"/><text x="78.4448%" y="303.50"></text></g><g><title>realloc (176,792,279 samples, 0.41%)</title><rect x="78.1948%" y="277" width="0.4083%" height="15" fill="rgb(246,218,30)" fg:x="33861508890" fg:w="176792279"/><text x="78.4448%" y="287.50"></text></g><g><title>[libc.so.6] (174,545,614 samples, 0.40%)</title><rect x="78.2000%" y="261" width="0.4031%" height="15" fill="rgb(219,145,47)" fg:x="33863755555" fg:w="174545614"/><text x="78.4500%" y="271.50"></text></g><g><title>memcpy (165,465,943 samples, 0.38%)</title><rect x="78.2210%" y="245" width="0.3821%" height="15" fill="rgb(243,12,26)" fg:x="33872835226" fg:w="165465943"/><text x="78.4710%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (178,945,387 samples, 0.41%)</title><rect x="78.1948%" y="341" width="0.4132%" height="15" fill="rgb(214,87,16)" fg:x="33861508890" fg:w="178945387"/><text x="78.4448%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (181,178,649 samples, 0.42%)</title><rect x="78.1948%" y="389" width="0.4184%" height="15" fill="rgb(208,99,42)" fg:x="33861508890" fg:w="181178649"/><text x="78.4448%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (181,178,649 samples, 0.42%)</title><rect x="78.1948%" y="373" width="0.4184%" height="15" fill="rgb(253,99,2)" fg:x="33861508890" fg:w="181178649"/><text x="78.4448%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (181,178,649 samples, 0.42%)</title><rect x="78.1948%" y="357" width="0.4184%" height="15" fill="rgb(220,168,23)" fg:x="33861508890" fg:w="181178649"/><text x="78.4448%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (47,328,091 samples, 0.11%)</title><rect x="78.6132%" y="389" width="0.1093%" height="15" fill="rgb(242,38,24)" fg:x="34042687539" fg:w="47328091"/><text x="78.8632%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (47,328,091 samples, 0.11%)</title><rect x="78.6132%" y="373" width="0.1093%" height="15" fill="rgb(225,182,9)" fg:x="34042687539" fg:w="47328091"/><text x="78.8632%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (47,328,091 samples, 0.11%)</title><rect x="78.6132%" y="357" width="0.1093%" height="15" fill="rgb(243,178,37)" fg:x="34042687539" fg:w="47328091"/><text x="78.8632%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (47,328,091 samples, 0.11%)</title><rect x="78.6132%" y="341" width="0.1093%" height="15" fill="rgb(232,139,19)" fg:x="34042687539" fg:w="47328091"/><text x="78.8632%" y="351.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (4,423,257 samples, 0.01%)</title><rect x="78.7225%" y="389" width="0.0102%" height="15" fill="rgb(225,201,24)" fg:x="34090015630" fg:w="4423257"/><text x="78.9725%" y="399.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCSystem::new_object (9,487,876,170 samples, 21.91%)</title><rect x="56.8583%" y="421" width="21.9099%" height="15" fill="rgb(221,47,46)" fg:x="24621926437" fg:w="9487876170"/><text x="57.1083%" y="431.50">XLang_Rust::vm::gc::gc::GCSystem::n..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (375,511,754 samples, 0.87%)</title><rect x="77.9010%" y="405" width="0.8672%" height="15" fill="rgb(249,23,13)" fg:x="33734290853" fg:w="375511754"/><text x="78.1510%" y="415.50"></text></g><g><title>core::ptr::write (15,363,720 samples, 0.04%)</title><rect x="78.7327%" y="389" width="0.0355%" height="15" fill="rgb(219,9,5)" fg:x="34094438887" fg:w="15363720"/><text x="78.9827%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (20,089,995 samples, 0.05%)</title><rect x="78.7682%" y="421" width="0.0464%" height="15" fill="rgb(254,171,16)" fg:x="34109802607" fg:w="20089995"/><text x="79.0182%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::truncate (24,724,228 samples, 0.06%)</title><rect x="78.8146%" y="421" width="0.0571%" height="15" fill="rgb(230,171,20)" fg:x="34129892602" fg:w="24724228"/><text x="79.0646%" y="431.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (157,340,353 samples, 0.36%)</title><rect x="78.8717%" y="421" width="0.3633%" height="15" fill="rgb(210,71,41)" fg:x="34154616830" fg:w="157340353"/><text x="79.1217%" y="431.50"></text></g><g><title>_RNvCs7kbacHzvpHZ_7___rustc13___rdl_dealloc (56,045,791 samples, 0.13%)</title><rect x="80.0823%" y="341" width="0.1294%" height="15" fill="rgb(206,173,20)" fg:x="34678850182" fg:w="56045791"/><text x="80.3323%" y="351.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (37,833,086 samples, 0.09%)</title><rect x="80.1243%" y="325" width="0.0874%" height="15" fill="rgb(233,88,34)" fg:x="34697062887" fg:w="37833086"/><text x="80.3743%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (827,388,974 samples, 1.91%)</title><rect x="80.0669%" y="373" width="1.9107%" height="15" fill="rgb(223,209,46)" fg:x="34672193652" fg:w="827388974"/><text x="80.3169%" y="383.50">&lt;..</text></g><g><title>alloc::alloc::dealloc (827,388,974 samples, 1.91%)</title><rect x="80.0669%" y="357" width="1.9107%" height="15" fill="rgb(250,43,18)" fg:x="34672193652" fg:w="827388974"/><text x="80.3169%" y="367.50">a..</text></g><g><title>cfree (764,686,653 samples, 1.77%)</title><rect x="80.2117%" y="341" width="1.7659%" height="15" fill="rgb(208,13,10)" fg:x="34734895973" fg:w="764686653"/><text x="80.4617%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;XLang_Rust::vm::ir::IR&gt; (1,196,560,090 samples, 2.76%)</title><rect x="79.2350%" y="421" width="2.7632%" height="15" fill="rgb(212,200,36)" fg:x="34311957183" fg:w="1196560090"/><text x="79.4850%" y="431.50">co..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (874,486,570 samples, 2.02%)</title><rect x="79.9788%" y="405" width="2.0194%" height="15" fill="rgb(225,90,30)" fg:x="34634030703" fg:w="874486570"/><text x="80.2288%" y="415.50">&lt;..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (836,323,621 samples, 1.93%)</title><rect x="80.0669%" y="389" width="1.9313%" height="15" fill="rgb(236,182,39)" fg:x="34672193652" fg:w="836323621"/><text x="80.3169%" y="399.50">a..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (8,934,647 samples, 0.02%)</title><rect x="81.9775%" y="373" width="0.0206%" height="15" fill="rgb(212,144,35)" fg:x="35499582626" fg:w="8934647"/><text x="82.2275%" y="383.50"></text></g><g><title>XLang_Rust::vm::executor::vm::IRExecutor::execute_instruction (24,126,560,600 samples, 55.71%)</title><rect x="26.5226%" y="437" width="55.7144%" height="15" fill="rgb(228,63,44)" fg:x="11485348701" fg:w="24126560600"/><text x="26.7726%" y="447.50">XLang_Rust::vm::executor::vm::IRExecutor::execute_instruction</text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (103,392,028 samples, 0.24%)</title><rect x="81.9982%" y="421" width="0.2388%" height="15" fill="rgb(228,109,6)" fg:x="35508517273" fg:w="103392028"/><text x="82.2482%" y="431.50"></text></g><g><title>&lt;XLang_Rust::vm::executor::variable::VMInstructions as XLang_Rust::vm::gc::gc::GCObject&gt;::get_const_traceable (420,546,325 samples, 0.97%)</title><rect x="88.3060%" y="389" width="0.9711%" height="15" fill="rgb(238,117,24)" fg:x="38240077179" fg:w="420546325"/><text x="88.5560%" y="399.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCRef::get_const_traceable (2,015,167,718 samples, 4.65%)</title><rect x="85.0466%" y="405" width="4.6535%" height="15" fill="rgb(242,26,26)" fg:x="36828603944" fg:w="2015167718"/><text x="85.2966%" y="415.50">XLang..</text></g><g><title>&lt;XLang_Rust::vm::executor::variable::VMLambda as XLang_Rust::vm::gc::gc::GCObject&gt;::get_const_traceable (183,148,158 samples, 0.42%)</title><rect x="89.2772%" y="389" width="0.4229%" height="15" fill="rgb(221,92,48)" fg:x="38660623504" fg:w="183148158"/><text x="89.5272%" y="399.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCRef::as_const_type (3,293,673,994 samples, 7.61%)</title><rect x="82.2369%" y="437" width="7.6059%" height="15" fill="rgb(209,209,32)" fg:x="35611909301" fg:w="3293673994"/><text x="82.4869%" y="447.50">XLang_Rust..</text></g><g><title>XLang_Rust::vm::gc::gc::GCRef::isinstance (2,076,979,351 samples, 4.80%)</title><rect x="85.0466%" y="421" width="4.7963%" height="15" fill="rgb(221,70,22)" fg:x="36828603944" fg:w="2076979351"/><text x="85.2966%" y="431.50">XLang_..</text></g><g><title>XLang_Rust::vm::gc::gc::GCTraceable::isinstance (61,811,633 samples, 0.14%)</title><rect x="89.7001%" y="405" width="0.1427%" height="15" fill="rgb(248,145,5)" fg:x="38843771662" fg:w="61811633"/><text x="89.9501%" y="415.50"></text></g><g><title>&lt;core::any::TypeId as core::cmp::PartialEq&gt;::eq (61,811,633 samples, 0.14%)</title><rect x="89.7001%" y="389" width="0.1427%" height="15" fill="rgb(226,116,26)" fg:x="38843771662" fg:w="61811633"/><text x="89.9501%" y="399.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialEq for (U,T)&gt;::eq (61,811,633 samples, 0.14%)</title><rect x="89.7001%" y="373" width="0.1427%" height="15" fill="rgb(244,5,17)" fg:x="38843771662" fg:w="61811633"/><text x="89.9501%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u64&gt;::eq (61,811,633 samples, 0.14%)</title><rect x="89.7001%" y="357" width="0.1427%" height="15" fill="rgb(252,159,33)" fg:x="38843771662" fg:w="61811633"/><text x="89.9501%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::is_empty (195,397,130 samples, 0.45%)</title><rect x="89.8429%" y="437" width="0.4512%" height="15" fill="rgb(206,71,0)" fg:x="38905583295" fg:w="195397130"/><text x="90.0929%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (195,397,130 samples, 0.45%)</title><rect x="89.8429%" y="421" width="0.4512%" height="15" fill="rgb(233,118,54)" fg:x="38905583295" fg:w="195397130"/><text x="90.0929%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (421,421,276 samples, 0.97%)</title><rect x="90.2941%" y="437" width="0.9732%" height="15" fill="rgb(234,83,48)" fg:x="39100980425" fg:w="421421276"/><text x="90.5441%" y="447.50"></text></g><g><title>core::cmp::PartialEq::ne (56,225,599 samples, 0.13%)</title><rect x="91.2673%" y="437" width="0.1298%" height="15" fill="rgb(228,3,54)" fg:x="39522401701" fg:w="56225599"/><text x="91.5173%" y="447.50"></text></g><g><title>&lt;XLang_Rust::vm::executor::variable::VMCoroutineStatus as core::cmp::PartialEq&gt;::eq (56,225,599 samples, 0.13%)</title><rect x="91.2673%" y="421" width="0.1298%" height="15" fill="rgb(226,155,13)" fg:x="39522401701" fg:w="56225599"/><text x="91.5173%" y="431.50"></text></g><g><title>XLang_Rust::vm::executor::vm::IRExecutor::step (37,446,273,886 samples, 86.47%)</title><rect x="5.0169%" y="453" width="86.4729%" height="15" fill="rgb(241,28,37)" fg:x="2172498694" fg:w="37446273886"/><text x="5.2669%" y="463.50">XLang_Rust::vm::executor::vm::IRExecutor::step</text></g><g><title>core::option::Option&lt;T&gt;::unwrap (40,145,280 samples, 0.09%)</title><rect x="91.3971%" y="437" width="0.0927%" height="15" fill="rgb(233,93,10)" fg:x="39578627300" fg:w="40145280"/><text x="91.6471%" y="447.50"></text></g><g><title>XLang_Rust::vm::executor::vm::VMCoroutinePool::step_all (39,488,647,618 samples, 91.19%)</title><rect x="0.6540%" y="469" width="91.1893%" height="15" fill="rgb(225,113,19)" fg:x="283227418" fg:w="39488647618"/><text x="0.9040%" y="479.50">XLang_Rust::vm::executor::vm::VMCoroutinePool::step_all</text></g><g><title>alloc::vec::Vec&lt;T&gt;::new (153,102,456 samples, 0.35%)</title><rect x="91.4898%" y="453" width="0.3536%" height="15" fill="rgb(241,2,18)" fg:x="39618772580" fg:w="153102456"/><text x="91.7398%" y="463.50"></text></g><g><title>&lt;XLang_Rust::vm::executor::variable::VMCoroutineStatus as core::cmp::PartialEq&gt;::eq (433,611,053 samples, 1.00%)</title><rect x="91.9366%" y="453" width="1.0013%" height="15" fill="rgb(228,207,21)" fg:x="39812249130" fg:w="433611053"/><text x="92.1866%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (412,475,961 samples, 0.95%)</title><rect x="92.9379%" y="453" width="0.9525%" height="15" fill="rgb(213,211,35)" fg:x="40245860183" fg:w="412475961"/><text x="93.1879%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (412,475,961 samples, 0.95%)</title><rect x="92.9379%" y="437" width="0.9525%" height="15" fill="rgb(209,83,10)" fg:x="40245860183" fg:w="412475961"/><text x="93.1879%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (220,003,751 samples, 0.51%)</title><rect x="93.3824%" y="421" width="0.5080%" height="15" fill="rgb(209,164,1)" fg:x="40438332393" fg:w="220003751"/><text x="93.6324%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (220,003,751 samples, 0.51%)</title><rect x="93.3824%" y="405" width="0.5080%" height="15" fill="rgb(213,184,43)" fg:x="40438332393" fg:w="220003751"/><text x="93.6324%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (220,003,751 samples, 0.51%)</title><rect x="93.3824%" y="389" width="0.5080%" height="15" fill="rgb(231,61,34)" fg:x="40438332393" fg:w="220003751"/><text x="93.6324%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (220,003,751 samples, 0.51%)</title><rect x="93.3824%" y="373" width="0.5080%" height="15" fill="rgb(235,75,3)" fg:x="40438332393" fg:w="220003751"/><text x="93.6324%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (138,872,202 samples, 0.32%)</title><rect x="93.8904%" y="453" width="0.3207%" height="15" fill="rgb(220,106,47)" fg:x="40658336144" fg:w="138872202"/><text x="94.1404%" y="463.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (138,872,202 samples, 0.32%)</title><rect x="93.8904%" y="437" width="0.3207%" height="15" fill="rgb(210,196,33)" fg:x="40658336144" fg:w="138872202"/><text x="94.1404%" y="447.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (80,677,116 samples, 0.19%)</title><rect x="94.0248%" y="421" width="0.1863%" height="15" fill="rgb(229,154,42)" fg:x="40716531230" fg:w="80677116"/><text x="94.2748%" y="431.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCRef::as_const_type (2,240,187,133 samples, 5.17%)</title><rect x="94.2111%" y="453" width="5.1732%" height="15" fill="rgb(228,114,26)" fg:x="40797208346" fg:w="2240187133"/><text x="94.4611%" y="463.50">XLang_..</text></g><g><title>XLang_Rust::vm::gc::gc::GCRef::isinstance (1,912,568,845 samples, 4.42%)</title><rect x="94.9677%" y="437" width="4.4166%" height="15" fill="rgb(208,144,1)" fg:x="41124826634" fg:w="1912568845"/><text x="95.2177%" y="447.50">XLang..</text></g><g><title>XLang_Rust::vm::gc::gc::GCRef::get_const_traceable (1,912,568,845 samples, 4.42%)</title><rect x="94.9677%" y="421" width="4.4166%" height="15" fill="rgb(239,112,37)" fg:x="41124826634" fg:w="1912568845"/><text x="95.2177%" y="431.50">XLang..</text></g><g><title>&lt;XLang_Rust::vm::executor::variable::VMLambda as XLang_Rust::vm::gc::gc::GCObject&gt;::get_const_traceable (223,912,641 samples, 0.52%)</title><rect x="98.8672%" y="405" width="0.5171%" height="15" fill="rgb(210,96,50)" fg:x="42813482838" fg:w="223912641"/><text x="99.1172%" y="415.50"></text></g><g><title>XLang_Rust::vm::executor::vm::VMCoroutinePool::sweep_finished (3,351,105,649 samples, 7.74%)</title><rect x="91.8434%" y="469" width="7.7386%" height="15" fill="rgb(222,178,2)" fg:x="39771875036" fg:w="3351105649"/><text x="92.0934%" y="479.50">XLang_Rust:..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (83,350,083 samples, 0.19%)</title><rect x="99.3894%" y="453" width="0.1925%" height="15" fill="rgb(226,74,18)" fg:x="43039630602" fg:w="83350083"/><text x="99.6394%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (83,350,083 samples, 0.19%)</title><rect x="99.3894%" y="437" width="0.1925%" height="15" fill="rgb(225,67,54)" fg:x="43039630602" fg:w="83350083"/><text x="99.6394%" y="447.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (83,350,083 samples, 0.19%)</title><rect x="99.3894%" y="421" width="0.1925%" height="15" fill="rgb(251,92,32)" fg:x="43039630602" fg:w="83350083"/><text x="99.6394%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (69,613,713 samples, 0.16%)</title><rect x="99.4211%" y="405" width="0.1608%" height="15" fill="rgb(228,149,22)" fg:x="43053366972" fg:w="69613713"/><text x="99.6711%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (69,613,713 samples, 0.16%)</title><rect x="99.4211%" y="389" width="0.1608%" height="15" fill="rgb(243,54,13)" fg:x="43053366972" fg:w="69613713"/><text x="99.6711%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::is_empty (4,498,543 samples, 0.01%)</title><rect x="99.5819%" y="469" width="0.0104%" height="15" fill="rgb(243,180,28)" fg:x="43122980685" fg:w="4498543"/><text x="99.8319%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (4,498,543 samples, 0.01%)</title><rect x="99.5819%" y="453" width="0.0104%" height="15" fill="rgb(208,167,24)" fg:x="43122980685" fg:w="4498543"/><text x="99.8319%" y="463.50"></text></g><g><title>XLang_Rust::vm::executor::vm::VMCoroutinePool::run_until_finished (43,113,736,838 samples, 99.56%)</title><rect x="0.1976%" y="485" width="99.5606%" height="15" fill="rgb(245,73,45)" fg:x="85571567" fg:w="43113736838"/><text x="0.4476%" y="495.50">XLang_Rust::vm::executor::vm::VMCoroutinePool::run_until_finished</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;XLang_Rust::vm::executor::vm::SpawnedCoroutine&gt;&gt; (71,829,177 samples, 0.17%)</title><rect x="99.5923%" y="469" width="0.1659%" height="15" fill="rgb(237,203,48)" fg:x="43127479228" fg:w="71829177"/><text x="99.8423%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;XLang_Rust::vm::executor::vm::SpawnedCoroutine&gt;&gt; (71,829,177 samples, 0.17%)</title><rect x="99.5923%" y="453" width="0.1659%" height="15" fill="rgb(211,197,16)" fg:x="43127479228" fg:w="71829177"/><text x="99.8423%" y="463.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (71,829,177 samples, 0.17%)</title><rect x="99.5923%" y="437" width="0.1659%" height="15" fill="rgb(243,99,51)" fg:x="43127479228" fg:w="71829177"/><text x="99.8423%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (71,829,177 samples, 0.17%)</title><rect x="99.5923%" y="421" width="0.1659%" height="15" fill="rgb(215,123,29)" fg:x="43127479228" fg:w="71829177"/><text x="99.8423%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (71,829,177 samples, 0.17%)</title><rect x="99.5923%" y="405" width="0.1659%" height="15" fill="rgb(239,186,37)" fg:x="43127479228" fg:w="71829177"/><text x="99.8423%" y="415.50"></text></g><g><title>XLang_Rust::run_file (43,121,885,499 samples, 99.58%)</title><rect x="0.1895%" y="517" width="99.5794%" height="15" fill="rgb(252,136,39)" fg:x="82064373" fg:w="43121885499"/><text x="0.4395%" y="527.50">XLang_Rust::run_file</text></g><g><title>XLang_Rust::execute_ir (43,118,378,305 samples, 99.57%)</title><rect x="0.1976%" y="501" width="99.5713%" height="15" fill="rgb(223,213,32)" fg:x="85571567" fg:w="43118378305"/><text x="0.4476%" y="511.50">XLang_Rust::execute_ir</text></g><g><title>XLang_Rust::vm::gc::gc::GCSystem::collect (4,641,467 samples, 0.01%)</title><rect x="99.7582%" y="485" width="0.0107%" height="15" fill="rgb(233,115,5)" fg:x="43199308405" fg:w="4641467"/><text x="100.0082%" y="495.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCSystem::immediate_collect (4,641,467 samples, 0.01%)</title><rect x="99.7582%" y="469" width="0.0107%" height="15" fill="rgb(207,226,44)" fg:x="43199308405" fg:w="4641467"/><text x="100.0082%" y="479.50"></text></g><g><title>_start (43,122,142,090 samples, 99.58%)</title><rect x="0.1895%" y="789" width="99.5800%" height="15" fill="rgb(208,126,0)" fg:x="82064373" fg:w="43122142090"/><text x="0.4395%" y="799.50">_start</text></g><g><title>__libc_start_main (43,122,142,090 samples, 99.58%)</title><rect x="0.1895%" y="773" width="99.5800%" height="15" fill="rgb(244,66,21)" fg:x="82064373" fg:w="43122142090"/><text x="0.4395%" y="783.50">__libc_start_main</text></g><g><title>[libc.so.6] (43,122,142,090 samples, 99.58%)</title><rect x="0.1895%" y="757" width="99.5800%" height="15" fill="rgb(222,97,12)" fg:x="82064373" fg:w="43122142090"/><text x="0.4395%" y="767.50">[libc.so.6]</text></g><g><title>main (43,122,142,090 samples, 99.58%)</title><rect x="0.1895%" y="741" width="99.5800%" height="15" fill="rgb(219,213,19)" fg:x="82064373" fg:w="43122142090"/><text x="0.4395%" y="751.50">main</text></g><g><title>std::rt::lang_start_internal (43,122,142,090 samples, 99.58%)</title><rect x="0.1895%" y="725" width="99.5800%" height="15" fill="rgb(252,169,30)" fg:x="82064373" fg:w="43122142090"/><text x="0.4395%" y="735.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (43,122,142,090 samples, 99.58%)</title><rect x="0.1895%" y="709" width="99.5800%" height="15" fill="rgb(206,32,51)" fg:x="82064373" fg:w="43122142090"/><text x="0.4395%" y="719.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (43,122,142,090 samples, 99.58%)</title><rect x="0.1895%" y="693" width="99.5800%" height="15" fill="rgb(250,172,42)" fg:x="82064373" fg:w="43122142090"/><text x="0.4395%" y="703.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (43,122,142,090 samples, 99.58%)</title><rect x="0.1895%" y="677" width="99.5800%" height="15" fill="rgb(209,34,43)" fg:x="82064373" fg:w="43122142090"/><text x="0.4395%" y="687.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (43,122,142,090 samples, 99.58%)</title><rect x="0.1895%" y="661" width="99.5800%" height="15" fill="rgb(223,11,35)" fg:x="82064373" fg:w="43122142090"/><text x="0.4395%" y="671.50">std::rt::lang_start_internal::_{{closure}}</text></g><g><title>std::panic::catch_unwind (43,122,142,090 samples, 99.58%)</title><rect x="0.1895%" y="645" width="99.5800%" height="15" fill="rgb(251,219,26)" fg:x="82064373" fg:w="43122142090"/><text x="0.4395%" y="655.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (43,122,142,090 samples, 99.58%)</title><rect x="0.1895%" y="629" width="99.5800%" height="15" fill="rgb(231,119,3)" fg:x="82064373" fg:w="43122142090"/><text x="0.4395%" y="639.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (43,122,142,090 samples, 99.58%)</title><rect x="0.1895%" y="613" width="99.5800%" height="15" fill="rgb(216,97,11)" fg:x="82064373" fg:w="43122142090"/><text x="0.4395%" y="623.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (43,122,142,090 samples, 99.58%)</title><rect x="0.1895%" y="597" width="99.5800%" height="15" fill="rgb(223,59,9)" fg:x="82064373" fg:w="43122142090"/><text x="0.4395%" y="607.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (43,122,142,090 samples, 99.58%)</title><rect x="0.1895%" y="581" width="99.5800%" height="15" fill="rgb(233,93,31)" fg:x="82064373" fg:w="43122142090"/><text x="0.4395%" y="591.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (43,122,142,090 samples, 99.58%)</title><rect x="0.1895%" y="565" width="99.5800%" height="15" fill="rgb(239,81,33)" fg:x="82064373" fg:w="43122142090"/><text x="0.4395%" y="575.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (43,122,142,090 samples, 99.58%)</title><rect x="0.1895%" y="549" width="99.5800%" height="15" fill="rgb(213,120,34)" fg:x="82064373" fg:w="43122142090"/><text x="0.4395%" y="559.50">core::ops::function::FnOnce::call_once</text></g><g><title>XLang_Rust::main (43,122,142,090 samples, 99.58%)</title><rect x="0.1895%" y="533" width="99.5800%" height="15" fill="rgb(243,49,53)" fg:x="82064373" fg:w="43122142090"/><text x="0.4395%" y="543.50">XLang_Rust::main</text></g><g><title>free@plt (48,884,706 samples, 0.11%)</title><rect x="99.7783%" y="789" width="0.1129%" height="15" fill="rgb(247,216,33)" fg:x="43208005885" fg:w="48884706"/><text x="100.0283%" y="799.50"></text></g><g><title>malloc@plt (28,368,655 samples, 0.07%)</title><rect x="99.8911%" y="789" width="0.0655%" height="15" fill="rgb(226,26,14)" fg:x="43256890591" fg:w="28368655"/><text x="100.1411%" y="799.50"></text></g><g><title>regex::builders::Builder::build_one_string (7,681,351 samples, 0.02%)</title><rect x="99.9618%" y="789" width="0.0177%" height="15" fill="rgb(215,49,53)" fg:x="43287506305" fg:w="7681351"/><text x="100.2118%" y="799.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (7,681,351 samples, 0.02%)</title><rect x="99.9618%" y="773" width="0.0177%" height="15" fill="rgb(245,162,40)" fg:x="43287506305" fg:w="7681351"/><text x="100.2118%" y="783.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many (7,681,351 samples, 0.02%)</title><rect x="99.9618%" y="757" width="0.0177%" height="15" fill="rgb(229,68,17)" fg:x="43287506305" fg:w="7681351"/><text x="100.2118%" y="767.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir (7,681,351 samples, 0.02%)</title><rect x="99.9618%" y="741" width="0.0177%" height="15" fill="rgb(213,182,10)" fg:x="43287506305" fg:w="7681351"/><text x="100.2118%" y="751.50"></text></g><g><title>regex_automata::meta::strategy::new (7,681,351 samples, 0.02%)</title><rect x="99.9618%" y="725" width="0.0177%" height="15" fill="rgb(245,125,30)" fg:x="43287506305" fg:w="7681351"/><text x="100.2118%" y="735.50"></text></g><g><title>regex_automata::meta::strategy::Core::new (7,681,351 samples, 0.02%)</title><rect x="99.9618%" y="709" width="0.0177%" height="15" fill="rgb(232,202,2)" fg:x="43287506305" fg:w="7681351"/><text x="100.2118%" y="719.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::build_many_from_hir (7,681,351 samples, 0.02%)</title><rect x="99.9618%" y="693" width="0.0177%" height="15" fill="rgb(237,140,51)" fg:x="43287506305" fg:w="7681351"/><text x="100.2118%" y="703.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (7,681,351 samples, 0.02%)</title><rect x="99.9618%" y="677" width="0.0177%" height="15" fill="rgb(236,157,25)" fg:x="43287506305" fg:w="7681351"/><text x="100.2118%" y="687.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_alt_iter (7,681,351 samples, 0.02%)</title><rect x="99.9618%" y="661" width="0.0177%" height="15" fill="rgb(219,209,0)" fg:x="43287506305" fg:w="7681351"/><text x="100.2118%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (7,681,351 samples, 0.02%)</title><rect x="99.9618%" y="645" width="0.0177%" height="15" fill="rgb(240,116,54)" fg:x="43287506305" fg:w="7681351"/><text x="100.2118%" y="655.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (7,681,351 samples, 0.02%)</title><rect x="99.9618%" y="629" width="0.0177%" height="15" fill="rgb(216,10,36)" fg:x="43287506305" fg:w="7681351"/><text x="100.2118%" y="639.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (7,681,351 samples, 0.02%)</title><rect x="99.9618%" y="613" width="0.0177%" height="15" fill="rgb(222,72,44)" fg:x="43287506305" fg:w="7681351"/><text x="100.2118%" y="623.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile::_{{closure}} (7,681,351 samples, 0.02%)</title><rect x="99.9618%" y="597" width="0.0177%" height="15" fill="rgb(232,159,9)" fg:x="43287506305" fg:w="7681351"/><text x="100.2118%" y="607.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (7,429,658 samples, 0.02%)</title><rect x="99.9624%" y="581" width="0.0172%" height="15" fill="rgb(210,39,32)" fg:x="43287757998" fg:w="7429658"/><text x="100.2124%" y="591.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (7,429,658 samples, 0.02%)</title><rect x="99.9624%" y="565" width="0.0172%" height="15" fill="rgb(216,194,45)" fg:x="43287757998" fg:w="7429658"/><text x="100.2124%" y="575.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_concat (7,429,658 samples, 0.02%)</title><rect x="99.9624%" y="549" width="0.0172%" height="15" fill="rgb(218,18,35)" fg:x="43287757998" fg:w="7429658"/><text x="100.2124%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (7,429,658 samples, 0.02%)</title><rect x="99.9624%" y="533" width="0.0172%" height="15" fill="rgb(207,83,51)" fg:x="43287757998" fg:w="7429658"/><text x="100.2124%" y="543.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (7,429,658 samples, 0.02%)</title><rect x="99.9624%" y="517" width="0.0172%" height="15" fill="rgb(225,63,43)" fg:x="43287757998" fg:w="7429658"/><text x="100.2124%" y="527.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (7,429,658 samples, 0.02%)</title><rect x="99.9624%" y="501" width="0.0172%" height="15" fill="rgb(207,57,36)" fg:x="43287757998" fg:w="7429658"/><text x="100.2124%" y="511.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c::_{{closure}} (7,429,658 samples, 0.02%)</title><rect x="99.9624%" y="485" width="0.0172%" height="15" fill="rgb(216,99,33)" fg:x="43287757998" fg:w="7429658"/><text x="100.2124%" y="495.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (7,429,658 samples, 0.02%)</title><rect x="99.9624%" y="469" width="0.0172%" height="15" fill="rgb(225,42,16)" fg:x="43287757998" fg:w="7429658"/><text x="100.2124%" y="479.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (7,429,658 samples, 0.02%)</title><rect x="99.9624%" y="453" width="0.0172%" height="15" fill="rgb(220,201,45)" fg:x="43287757998" fg:w="7429658"/><text x="100.2124%" y="463.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_unicode_class (7,429,658 samples, 0.02%)</title><rect x="99.9624%" y="437" width="0.0172%" height="15" fill="rgb(225,33,4)" fg:x="43287757998" fg:w="7429658"/><text x="100.2124%" y="447.50"></text></g><g><title>all (43,304,032,526 samples, 100%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(224,33,50)" fg:x="0" fg:w="43304032526"/><text x="0.2500%" y="831.50"></text></g><g><title>XLang-Rust (43,304,032,526 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(246,198,51)" fg:x="0" fg:w="43304032526"/><text x="0.2500%" y="815.50">XLang-Rust</text></g></svg></svg>