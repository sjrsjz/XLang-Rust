<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="870" onload="init(evt)" viewBox="0 0 1200 870" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="870" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="853.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="853.00"> </text><svg id="frames" x="10" width="1180" total_samples="5176895843"><g><title>malloc@plt (6,892,582 samples, 0.13%)</title><rect x="0.0000%" y="773" width="0.1331%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="6892582"/><text x="0.2500%" y="783.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (8,617,562 samples, 0.17%)</title><rect x="0.0000%" y="789" width="0.1665%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="8617562"/><text x="0.2500%" y="799.50"></text></g><g><title>memcpy@plt (1,724,980 samples, 0.03%)</title><rect x="0.1331%" y="773" width="0.0333%" height="15" fill="rgb(221,193,54)" fg:x="6892582" fg:w="1724980"/><text x="0.3831%" y="783.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (2,590,089 samples, 0.05%)</title><rect x="0.1665%" y="597" width="0.0500%" height="15" fill="rgb(248,212,6)" fg:x="8617562" fg:w="2590089"/><text x="0.4165%" y="607.50"></text></g><g><title>regex_automata::meta::wrappers::OnePassEngine::new (2,590,089 samples, 0.05%)</title><rect x="0.1665%" y="581" width="0.0500%" height="15" fill="rgb(208,68,35)" fg:x="8617562" fg:w="2590089"/><text x="0.4165%" y="591.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (2,590,089 samples, 0.05%)</title><rect x="0.1665%" y="565" width="0.0500%" height="15" fill="rgb(232,128,0)" fg:x="8617562" fg:w="2590089"/><text x="0.4165%" y="575.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::new (1,449,265 samples, 0.03%)</title><rect x="0.1885%" y="549" width="0.0280%" height="15" fill="rgb(207,160,47)" fg:x="9758386" fg:w="1449265"/><text x="0.4385%" y="559.50"></text></g><g><title>alloc::vec::from_elem (1,449,265 samples, 0.03%)</title><rect x="0.1885%" y="533" width="0.0280%" height="15" fill="rgb(228,23,34)" fg:x="9758386" fg:w="1449265"/><text x="0.4385%" y="543.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (1,449,265 samples, 0.03%)</title><rect x="0.1885%" y="517" width="0.0280%" height="15" fill="rgb(218,30,26)" fg:x="9758386" fg:w="1449265"/><text x="0.4385%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (1,449,265 samples, 0.03%)</title><rect x="0.1885%" y="501" width="0.0280%" height="15" fill="rgb(220,122,19)" fg:x="9758386" fg:w="1449265"/><text x="0.4385%" y="511.50"></text></g><g><title>core::ptr::write (1,449,265 samples, 0.03%)</title><rect x="0.1885%" y="485" width="0.0280%" height="15" fill="rgb(250,228,42)" fg:x="9758386" fg:w="1449265"/><text x="0.4385%" y="495.50"></text></g><g><title>memset (1,449,265 samples, 0.03%)</title><rect x="0.1885%" y="469" width="0.0280%" height="15" fill="rgb(240,193,28)" fg:x="9758386" fg:w="1449265"/><text x="0.4385%" y="479.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (716,765 samples, 0.01%)</title><rect x="0.2165%" y="325" width="0.0138%" height="15" fill="rgb(216,20,37)" fg:x="11207651" fg:w="716765"/><text x="0.4665%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::patch (1,399,814 samples, 0.03%)</title><rect x="0.2303%" y="325" width="0.0270%" height="15" fill="rgb(206,188,39)" fg:x="11924416" fg:w="1399814"/><text x="0.4803%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1,399,814 samples, 0.03%)</title><rect x="0.2303%" y="309" width="0.0270%" height="15" fill="rgb(217,207,13)" fg:x="11924416" fg:w="1399814"/><text x="0.4803%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::get (1,320,900 samples, 0.03%)</title><rect x="0.2574%" y="325" width="0.0255%" height="15" fill="rgb(231,73,38)" fg:x="13324230" fg:w="1320900"/><text x="0.5074%" y="335.50"></text></g><g><title>XLang_Rust::build_code (7,199,984 samples, 0.14%)</title><rect x="0.1665%" y="789" width="0.1391%" height="15" fill="rgb(225,20,46)" fg:x="8617562" fg:w="7199984"/><text x="0.4165%" y="799.50"></text></g><g><title>XLang_Rust::parser::lexer::lexer::tokenize (7,199,984 samples, 0.14%)</title><rect x="0.1665%" y="773" width="0.1391%" height="15" fill="rgb(210,31,41)" fg:x="8617562" fg:w="7199984"/><text x="0.4165%" y="783.50"></text></g><g><title>XLang_Rust::parser::lexer::lexer::tokenize::_{{closure}} (7,199,984 samples, 0.14%)</title><rect x="0.1665%" y="757" width="0.1391%" height="15" fill="rgb(221,200,47)" fg:x="8617562" fg:w="7199984"/><text x="0.4165%" y="767.50"></text></g><g><title>XLang_Rust::parser::lexer::lexer::tokenize::_{{closure}} (7,199,984 samples, 0.14%)</title><rect x="0.1665%" y="741" width="0.1391%" height="15" fill="rgb(226,26,5)" fg:x="8617562" fg:w="7199984"/><text x="0.4165%" y="751.50"></text></g><g><title>regex::regex::string::Regex::new (7,199,984 samples, 0.14%)</title><rect x="0.1665%" y="725" width="0.1391%" height="15" fill="rgb(249,33,26)" fg:x="8617562" fg:w="7199984"/><text x="0.4165%" y="735.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (7,199,984 samples, 0.14%)</title><rect x="0.1665%" y="709" width="0.1391%" height="15" fill="rgb(235,183,28)" fg:x="8617562" fg:w="7199984"/><text x="0.4165%" y="719.50"></text></g><g><title>regex::builders::Builder::build_one_string (7,199,984 samples, 0.14%)</title><rect x="0.1665%" y="693" width="0.1391%" height="15" fill="rgb(221,5,38)" fg:x="8617562" fg:w="7199984"/><text x="0.4165%" y="703.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (7,199,984 samples, 0.14%)</title><rect x="0.1665%" y="677" width="0.1391%" height="15" fill="rgb(247,18,42)" fg:x="8617562" fg:w="7199984"/><text x="0.4165%" y="687.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many (7,199,984 samples, 0.14%)</title><rect x="0.1665%" y="661" width="0.1391%" height="15" fill="rgb(241,131,45)" fg:x="8617562" fg:w="7199984"/><text x="0.4165%" y="671.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir (7,199,984 samples, 0.14%)</title><rect x="0.1665%" y="645" width="0.1391%" height="15" fill="rgb(249,31,29)" fg:x="8617562" fg:w="7199984"/><text x="0.4165%" y="655.50"></text></g><g><title>regex_automata::meta::strategy::new (7,199,984 samples, 0.14%)</title><rect x="0.1665%" y="629" width="0.1391%" height="15" fill="rgb(225,111,53)" fg:x="8617562" fg:w="7199984"/><text x="0.4165%" y="639.50"></text></g><g><title>regex_automata::meta::strategy::Core::new (7,199,984 samples, 0.14%)</title><rect x="0.1665%" y="613" width="0.1391%" height="15" fill="rgb(238,160,17)" fg:x="8617562" fg:w="7199984"/><text x="0.4165%" y="623.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::build_many_from_hir (4,609,895 samples, 0.09%)</title><rect x="0.2165%" y="597" width="0.0890%" height="15" fill="rgb(214,148,48)" fg:x="11207651" fg:w="4609895"/><text x="0.4665%" y="607.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (4,609,895 samples, 0.09%)</title><rect x="0.2165%" y="581" width="0.0890%" height="15" fill="rgb(232,36,49)" fg:x="11207651" fg:w="4609895"/><text x="0.4665%" y="591.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_alt_iter (4,609,895 samples, 0.09%)</title><rect x="0.2165%" y="565" width="0.0890%" height="15" fill="rgb(209,103,24)" fg:x="11207651" fg:w="4609895"/><text x="0.4665%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (4,609,895 samples, 0.09%)</title><rect x="0.2165%" y="549" width="0.0890%" height="15" fill="rgb(229,88,8)" fg:x="11207651" fg:w="4609895"/><text x="0.4665%" y="559.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (4,609,895 samples, 0.09%)</title><rect x="0.2165%" y="533" width="0.0890%" height="15" fill="rgb(213,181,19)" fg:x="11207651" fg:w="4609895"/><text x="0.4665%" y="543.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (4,609,895 samples, 0.09%)</title><rect x="0.2165%" y="517" width="0.0890%" height="15" fill="rgb(254,191,54)" fg:x="11207651" fg:w="4609895"/><text x="0.4665%" y="527.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile::_{{closure}} (4,609,895 samples, 0.09%)</title><rect x="0.2165%" y="501" width="0.0890%" height="15" fill="rgb(241,83,37)" fg:x="11207651" fg:w="4609895"/><text x="0.4665%" y="511.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (4,609,895 samples, 0.09%)</title><rect x="0.2165%" y="485" width="0.0890%" height="15" fill="rgb(233,36,39)" fg:x="11207651" fg:w="4609895"/><text x="0.4665%" y="495.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_concat (4,609,895 samples, 0.09%)</title><rect x="0.2165%" y="469" width="0.0890%" height="15" fill="rgb(226,3,54)" fg:x="11207651" fg:w="4609895"/><text x="0.4665%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (4,609,895 samples, 0.09%)</title><rect x="0.2165%" y="453" width="0.0890%" height="15" fill="rgb(245,192,40)" fg:x="11207651" fg:w="4609895"/><text x="0.4665%" y="463.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (4,609,895 samples, 0.09%)</title><rect x="0.2165%" y="437" width="0.0890%" height="15" fill="rgb(238,167,29)" fg:x="11207651" fg:w="4609895"/><text x="0.4665%" y="447.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (4,609,895 samples, 0.09%)</title><rect x="0.2165%" y="421" width="0.0890%" height="15" fill="rgb(232,182,51)" fg:x="11207651" fg:w="4609895"/><text x="0.4665%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c::_{{closure}} (4,609,895 samples, 0.09%)</title><rect x="0.2165%" y="405" width="0.0890%" height="15" fill="rgb(231,60,39)" fg:x="11207651" fg:w="4609895"/><text x="0.4665%" y="415.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (4,609,895 samples, 0.09%)</title><rect x="0.2165%" y="389" width="0.0890%" height="15" fill="rgb(208,69,12)" fg:x="11207651" fg:w="4609895"/><text x="0.4665%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (4,609,895 samples, 0.09%)</title><rect x="0.2165%" y="373" width="0.0890%" height="15" fill="rgb(235,93,37)" fg:x="11207651" fg:w="4609895"/><text x="0.4665%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_unicode_class (4,609,895 samples, 0.09%)</title><rect x="0.2165%" y="357" width="0.0890%" height="15" fill="rgb(213,116,39)" fg:x="11207651" fg:w="4609895"/><text x="0.4665%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_unicode_class_reverse_with_suffix (4,609,895 samples, 0.09%)</title><rect x="0.2165%" y="341" width="0.0890%" height="15" fill="rgb(222,207,29)" fg:x="11207651" fg:w="4609895"/><text x="0.4665%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::hash (1,172,416 samples, 0.02%)</title><rect x="0.2829%" y="325" width="0.0226%" height="15" fill="rgb(206,96,30)" fg:x="14645130" fg:w="1172416"/><text x="0.5329%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (1,172,416 samples, 0.02%)</title><rect x="0.2829%" y="309" width="0.0226%" height="15" fill="rgb(218,138,4)" fg:x="14645130" fg:w="1172416"/><text x="0.5329%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1,115,650 samples, 0.02%)</title><rect x="0.3055%" y="517" width="0.0216%" height="15" fill="rgb(250,191,14)" fg:x="15817546" fg:w="1115650"/><text x="0.5555%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1,115,650 samples, 0.02%)</title><rect x="0.3055%" y="501" width="0.0216%" height="15" fill="rgb(239,60,40)" fg:x="15817546" fg:w="1115650"/><text x="0.5555%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1,115,650 samples, 0.02%)</title><rect x="0.3055%" y="485" width="0.0216%" height="15" fill="rgb(206,27,48)" fg:x="15817546" fg:w="1115650"/><text x="0.5555%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1,115,650 samples, 0.02%)</title><rect x="0.3055%" y="469" width="0.0216%" height="15" fill="rgb(225,35,8)" fg:x="15817546" fg:w="1115650"/><text x="0.5555%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,115,650 samples, 0.02%)</title><rect x="0.3055%" y="453" width="0.0216%" height="15" fill="rgb(250,213,24)" fg:x="15817546" fg:w="1115650"/><text x="0.5555%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,115,650 samples, 0.02%)</title><rect x="0.3055%" y="437" width="0.0216%" height="15" fill="rgb(247,123,22)" fg:x="15817546" fg:w="1115650"/><text x="0.5555%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (1,115,650 samples, 0.02%)</title><rect x="0.3055%" y="421" width="0.0216%" height="15" fill="rgb(231,138,38)" fg:x="15817546" fg:w="1115650"/><text x="0.5555%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (1,115,650 samples, 0.02%)</title><rect x="0.3055%" y="405" width="0.0216%" height="15" fill="rgb(231,145,46)" fg:x="15817546" fg:w="1115650"/><text x="0.5555%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,115,650 samples, 0.02%)</title><rect x="0.3055%" y="389" width="0.0216%" height="15" fill="rgb(251,118,11)" fg:x="15817546" fg:w="1115650"/><text x="0.5555%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,115,650 samples, 0.02%)</title><rect x="0.3055%" y="373" width="0.0216%" height="15" fill="rgb(217,147,25)" fg:x="15817546" fg:w="1115650"/><text x="0.5555%" y="383.50"></text></g><g><title>alloc::alloc::alloc (1,115,650 samples, 0.02%)</title><rect x="0.3055%" y="357" width="0.0216%" height="15" fill="rgb(247,81,37)" fg:x="15817546" fg:w="1115650"/><text x="0.5555%" y="367.50"></text></g><g><title>malloc (1,115,650 samples, 0.02%)</title><rect x="0.3055%" y="341" width="0.0216%" height="15" fill="rgb(209,12,38)" fg:x="15817546" fg:w="1115650"/><text x="0.5555%" y="351.50"></text></g><g><title>[libc.so.6] (1,115,650 samples, 0.02%)</title><rect x="0.3055%" y="325" width="0.0216%" height="15" fill="rgb(227,1,9)" fg:x="15817546" fg:w="1115650"/><text x="0.5555%" y="335.50"></text></g><g><title>XLang_Rust::main (2,664,085 samples, 0.05%)</title><rect x="0.3055%" y="789" width="0.0515%" height="15" fill="rgb(248,47,43)" fg:x="15817546" fg:w="2664085"/><text x="0.5555%" y="799.50"></text></g><g><title>XLang_Rust::run_file (2,664,085 samples, 0.05%)</title><rect x="0.3055%" y="773" width="0.0515%" height="15" fill="rgb(221,10,30)" fg:x="15817546" fg:w="2664085"/><text x="0.5555%" y="783.50"></text></g><g><title>XLang_Rust::build_code (2,664,085 samples, 0.05%)</title><rect x="0.3055%" y="757" width="0.0515%" height="15" fill="rgb(210,229,1)" fg:x="15817546" fg:w="2664085"/><text x="0.5555%" y="767.50"></text></g><g><title>XLang_Rust::parser::lexer::lexer::tokenize (2,664,085 samples, 0.05%)</title><rect x="0.3055%" y="741" width="0.0515%" height="15" fill="rgb(222,148,37)" fg:x="15817546" fg:w="2664085"/><text x="0.5555%" y="751.50"></text></g><g><title>XLang_Rust::parser::lexer::lexer::tokenize::_{{closure}} (2,664,085 samples, 0.05%)</title><rect x="0.3055%" y="725" width="0.0515%" height="15" fill="rgb(234,67,33)" fg:x="15817546" fg:w="2664085"/><text x="0.5555%" y="735.50"></text></g><g><title>XLang_Rust::parser::lexer::lexer::tokenize::_{{closure}} (2,664,085 samples, 0.05%)</title><rect x="0.3055%" y="709" width="0.0515%" height="15" fill="rgb(247,98,35)" fg:x="15817546" fg:w="2664085"/><text x="0.5555%" y="719.50"></text></g><g><title>regex::regex::string::Regex::new (2,664,085 samples, 0.05%)</title><rect x="0.3055%" y="693" width="0.0515%" height="15" fill="rgb(247,138,52)" fg:x="15817546" fg:w="2664085"/><text x="0.5555%" y="703.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (2,664,085 samples, 0.05%)</title><rect x="0.3055%" y="677" width="0.0515%" height="15" fill="rgb(213,79,30)" fg:x="15817546" fg:w="2664085"/><text x="0.5555%" y="687.50"></text></g><g><title>regex::builders::Builder::build_one_string (2,664,085 samples, 0.05%)</title><rect x="0.3055%" y="661" width="0.0515%" height="15" fill="rgb(246,177,23)" fg:x="15817546" fg:w="2664085"/><text x="0.5555%" y="671.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (2,664,085 samples, 0.05%)</title><rect x="0.3055%" y="645" width="0.0515%" height="15" fill="rgb(230,62,27)" fg:x="15817546" fg:w="2664085"/><text x="0.5555%" y="655.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many (2,664,085 samples, 0.05%)</title><rect x="0.3055%" y="629" width="0.0515%" height="15" fill="rgb(216,154,8)" fg:x="15817546" fg:w="2664085"/><text x="0.5555%" y="639.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir (2,664,085 samples, 0.05%)</title><rect x="0.3055%" y="613" width="0.0515%" height="15" fill="rgb(244,35,45)" fg:x="15817546" fg:w="2664085"/><text x="0.5555%" y="623.50"></text></g><g><title>regex_automata::meta::strategy::new (2,664,085 samples, 0.05%)</title><rect x="0.3055%" y="597" width="0.0515%" height="15" fill="rgb(251,115,12)" fg:x="15817546" fg:w="2664085"/><text x="0.5555%" y="607.50"></text></g><g><title>regex_automata::meta::strategy::Core::new (2,664,085 samples, 0.05%)</title><rect x="0.3055%" y="581" width="0.0515%" height="15" fill="rgb(240,54,50)" fg:x="15817546" fg:w="2664085"/><text x="0.5555%" y="591.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::build_many_from_hir (2,664,085 samples, 0.05%)</title><rect x="0.3055%" y="565" width="0.0515%" height="15" fill="rgb(233,84,52)" fg:x="15817546" fg:w="2664085"/><text x="0.5555%" y="575.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (2,664,085 samples, 0.05%)</title><rect x="0.3055%" y="549" width="0.0515%" height="15" fill="rgb(207,117,47)" fg:x="15817546" fg:w="2664085"/><text x="0.5555%" y="559.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (2,664,085 samples, 0.05%)</title><rect x="0.3055%" y="533" width="0.0515%" height="15" fill="rgb(249,43,39)" fg:x="15817546" fg:w="2664085"/><text x="0.5555%" y="543.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1,197,410 samples, 0.02%)</title><rect x="0.3339%" y="517" width="0.0231%" height="15" fill="rgb(209,38,44)" fg:x="17284221" fg:w="1197410"/><text x="0.5839%" y="527.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::State::remap (1,197,410 samples, 0.02%)</title><rect x="0.3339%" y="501" width="0.0231%" height="15" fill="rgb(236,212,23)" fg:x="17284221" fg:w="1197410"/><text x="0.5839%" y="511.50"></text></g><g><title>regex_automata::util::primitives::&lt;impl core::ops::index::Index&lt;regex_automata::util::primitives::StateID&gt; for [T]&gt;::index (1,197,410 samples, 0.02%)</title><rect x="0.3339%" y="485" width="0.0231%" height="15" fill="rgb(242,79,21)" fg:x="17284221" fg:w="1197410"/><text x="0.5839%" y="495.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (848,391 samples, 0.02%)</title><rect x="0.3570%" y="341" width="0.0164%" height="15" fill="rgb(211,96,35)" fg:x="18481631" fg:w="848391"/><text x="0.6070%" y="351.50"></text></g><g><title>XLang_Rust::parser::lexer::lexer::tokenize (1,204,674 samples, 0.02%)</title><rect x="0.3570%" y="789" width="0.0233%" height="15" fill="rgb(253,215,40)" fg:x="18481631" fg:w="1204674"/><text x="0.6070%" y="799.50"></text></g><g><title>XLang_Rust::parser::lexer::lexer::tokenize::_{{closure}} (1,204,674 samples, 0.02%)</title><rect x="0.3570%" y="773" width="0.0233%" height="15" fill="rgb(211,81,21)" fg:x="18481631" fg:w="1204674"/><text x="0.6070%" y="783.50"></text></g><g><title>XLang_Rust::parser::lexer::lexer::tokenize::_{{closure}} (1,204,674 samples, 0.02%)</title><rect x="0.3570%" y="757" width="0.0233%" height="15" fill="rgb(208,190,38)" fg:x="18481631" fg:w="1204674"/><text x="0.6070%" y="767.50"></text></g><g><title>regex::regex::string::Regex::new (1,204,674 samples, 0.02%)</title><rect x="0.3570%" y="741" width="0.0233%" height="15" fill="rgb(235,213,38)" fg:x="18481631" fg:w="1204674"/><text x="0.6070%" y="751.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (1,204,674 samples, 0.02%)</title><rect x="0.3570%" y="725" width="0.0233%" height="15" fill="rgb(237,122,38)" fg:x="18481631" fg:w="1204674"/><text x="0.6070%" y="735.50"></text></g><g><title>regex::builders::Builder::build_one_string (1,204,674 samples, 0.02%)</title><rect x="0.3570%" y="709" width="0.0233%" height="15" fill="rgb(244,218,35)" fg:x="18481631" fg:w="1204674"/><text x="0.6070%" y="719.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (1,204,674 samples, 0.02%)</title><rect x="0.3570%" y="693" width="0.0233%" height="15" fill="rgb(240,68,47)" fg:x="18481631" fg:w="1204674"/><text x="0.6070%" y="703.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many (1,204,674 samples, 0.02%)</title><rect x="0.3570%" y="677" width="0.0233%" height="15" fill="rgb(210,16,53)" fg:x="18481631" fg:w="1204674"/><text x="0.6070%" y="687.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir (1,204,674 samples, 0.02%)</title><rect x="0.3570%" y="661" width="0.0233%" height="15" fill="rgb(235,124,12)" fg:x="18481631" fg:w="1204674"/><text x="0.6070%" y="671.50"></text></g><g><title>regex_automata::meta::strategy::new (1,204,674 samples, 0.02%)</title><rect x="0.3570%" y="645" width="0.0233%" height="15" fill="rgb(224,169,11)" fg:x="18481631" fg:w="1204674"/><text x="0.6070%" y="655.50"></text></g><g><title>regex_automata::meta::strategy::Core::new (1,204,674 samples, 0.02%)</title><rect x="0.3570%" y="629" width="0.0233%" height="15" fill="rgb(250,166,2)" fg:x="18481631" fg:w="1204674"/><text x="0.6070%" y="639.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::build_many_from_hir (1,204,674 samples, 0.02%)</title><rect x="0.3570%" y="613" width="0.0233%" height="15" fill="rgb(242,216,29)" fg:x="18481631" fg:w="1204674"/><text x="0.6070%" y="623.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (1,204,674 samples, 0.02%)</title><rect x="0.3570%" y="597" width="0.0233%" height="15" fill="rgb(230,116,27)" fg:x="18481631" fg:w="1204674"/><text x="0.6070%" y="607.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_alt_iter (1,204,674 samples, 0.02%)</title><rect x="0.3570%" y="581" width="0.0233%" height="15" fill="rgb(228,99,48)" fg:x="18481631" fg:w="1204674"/><text x="0.6070%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,204,674 samples, 0.02%)</title><rect x="0.3570%" y="565" width="0.0233%" height="15" fill="rgb(253,11,6)" fg:x="18481631" fg:w="1204674"/><text x="0.6070%" y="575.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1,204,674 samples, 0.02%)</title><rect x="0.3570%" y="549" width="0.0233%" height="15" fill="rgb(247,143,39)" fg:x="18481631" fg:w="1204674"/><text x="0.6070%" y="559.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1,204,674 samples, 0.02%)</title><rect x="0.3570%" y="533" width="0.0233%" height="15" fill="rgb(236,97,10)" fg:x="18481631" fg:w="1204674"/><text x="0.6070%" y="543.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile::_{{closure}} (1,204,674 samples, 0.02%)</title><rect x="0.3570%" y="517" width="0.0233%" height="15" fill="rgb(233,208,19)" fg:x="18481631" fg:w="1204674"/><text x="0.6070%" y="527.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1,204,674 samples, 0.02%)</title><rect x="0.3570%" y="501" width="0.0233%" height="15" fill="rgb(216,164,2)" fg:x="18481631" fg:w="1204674"/><text x="0.6070%" y="511.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1,204,674 samples, 0.02%)</title><rect x="0.3570%" y="485" width="0.0233%" height="15" fill="rgb(220,129,5)" fg:x="18481631" fg:w="1204674"/><text x="0.6070%" y="495.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_concat (1,204,674 samples, 0.02%)</title><rect x="0.3570%" y="469" width="0.0233%" height="15" fill="rgb(242,17,10)" fg:x="18481631" fg:w="1204674"/><text x="0.6070%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,204,674 samples, 0.02%)</title><rect x="0.3570%" y="453" width="0.0233%" height="15" fill="rgb(242,107,0)" fg:x="18481631" fg:w="1204674"/><text x="0.6070%" y="463.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1,204,674 samples, 0.02%)</title><rect x="0.3570%" y="437" width="0.0233%" height="15" fill="rgb(251,28,31)" fg:x="18481631" fg:w="1204674"/><text x="0.6070%" y="447.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1,204,674 samples, 0.02%)</title><rect x="0.3570%" y="421" width="0.0233%" height="15" fill="rgb(233,223,10)" fg:x="18481631" fg:w="1204674"/><text x="0.6070%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c::_{{closure}} (1,204,674 samples, 0.02%)</title><rect x="0.3570%" y="405" width="0.0233%" height="15" fill="rgb(215,21,27)" fg:x="18481631" fg:w="1204674"/><text x="0.6070%" y="415.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1,204,674 samples, 0.02%)</title><rect x="0.3570%" y="389" width="0.0233%" height="15" fill="rgb(232,23,21)" fg:x="18481631" fg:w="1204674"/><text x="0.6070%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1,204,674 samples, 0.02%)</title><rect x="0.3570%" y="373" width="0.0233%" height="15" fill="rgb(244,5,23)" fg:x="18481631" fg:w="1204674"/><text x="0.6070%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_unicode_class (1,204,674 samples, 0.02%)</title><rect x="0.3570%" y="357" width="0.0233%" height="15" fill="rgb(226,81,46)" fg:x="18481631" fg:w="1204674"/><text x="0.6070%" y="367.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCSystem::new_object (1,727,241 samples, 0.03%)</title><rect x="0.3803%" y="789" width="0.0334%" height="15" fill="rgb(247,70,30)" fg:x="19686305" fg:w="1727241"/><text x="0.6303%" y="799.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (1,727,241 samples, 0.03%)</title><rect x="0.3803%" y="773" width="0.0334%" height="15" fill="rgb(212,68,19)" fg:x="19686305" fg:w="1727241"/><text x="0.6303%" y="783.50"></text></g><g><title>alloc::alloc::exchange_malloc (1,727,241 samples, 0.03%)</title><rect x="0.3803%" y="757" width="0.0334%" height="15" fill="rgb(240,187,13)" fg:x="19686305" fg:w="1727241"/><text x="0.6303%" y="767.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,727,241 samples, 0.03%)</title><rect x="0.3803%" y="741" width="0.0334%" height="15" fill="rgb(223,113,26)" fg:x="19686305" fg:w="1727241"/><text x="0.6303%" y="751.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,727,241 samples, 0.03%)</title><rect x="0.3803%" y="725" width="0.0334%" height="15" fill="rgb(206,192,2)" fg:x="19686305" fg:w="1727241"/><text x="0.6303%" y="735.50"></text></g><g><title>alloc::alloc::alloc (1,727,241 samples, 0.03%)</title><rect x="0.3803%" y="709" width="0.0334%" height="15" fill="rgb(241,108,4)" fg:x="19686305" fg:w="1727241"/><text x="0.6303%" y="719.50"></text></g><g><title>malloc@plt (1,727,241 samples, 0.03%)</title><rect x="0.3803%" y="693" width="0.0334%" height="15" fill="rgb(247,173,49)" fg:x="19686305" fg:w="1727241"/><text x="0.6303%" y="703.50"></text></g><g><title>[ld-linux-aarch64.so.1] (536,435 samples, 0.01%)</title><rect x="0.4138%" y="709" width="0.0104%" height="15" fill="rgb(224,114,35)" fg:x="21421903" fg:w="536435"/><text x="0.6638%" y="719.50"></text></g><g><title>[ld-linux-aarch64.so.1] (597,799 samples, 0.01%)</title><rect x="0.4136%" y="757" width="0.0115%" height="15" fill="rgb(245,159,27)" fg:x="21414158" fg:w="597799"/><text x="0.6636%" y="767.50"></text></g><g><title>[ld-linux-aarch64.so.1] (597,799 samples, 0.01%)</title><rect x="0.4136%" y="741" width="0.0115%" height="15" fill="rgb(245,172,44)" fg:x="21414158" fg:w="597799"/><text x="0.6636%" y="751.50"></text></g><g><title>[ld-linux-aarch64.so.1] (590,054 samples, 0.01%)</title><rect x="0.4138%" y="725" width="0.0114%" height="15" fill="rgb(236,23,11)" fg:x="21421903" fg:w="590054"/><text x="0.6638%" y="735.50"></text></g><g><title>[ld-linux-aarch64.so.1] (598,480 samples, 0.01%)</title><rect x="0.4136%" y="773" width="0.0116%" height="15" fill="rgb(205,117,38)" fg:x="21413546" fg:w="598480"/><text x="0.6636%" y="783.50"></text></g><g><title>[ld-linux-aarch64.so.1] (598,481 samples, 0.01%)</title><rect x="0.4136%" y="789" width="0.0116%" height="15" fill="rgb(237,72,25)" fg:x="21413546" fg:w="598481"/><text x="0.6636%" y="799.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (534,597 samples, 0.01%)</title><rect x="0.4252%" y="581" width="0.0103%" height="15" fill="rgb(244,70,9)" fg:x="22012027" fg:w="534597"/><text x="0.6752%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;regex_automata::meta::regex::RegexI&gt;&gt; (971,903 samples, 0.02%)</title><rect x="0.4355%" y="533" width="0.0188%" height="15" fill="rgb(217,125,39)" fg:x="22546624" fg:w="971903"/><text x="0.6855%" y="543.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (971,903 samples, 0.02%)</title><rect x="0.4355%" y="517" width="0.0188%" height="15" fill="rgb(235,36,10)" fg:x="22546624" fg:w="971903"/><text x="0.6855%" y="527.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (971,903 samples, 0.02%)</title><rect x="0.4355%" y="501" width="0.0188%" height="15" fill="rgb(251,123,47)" fg:x="22546624" fg:w="971903"/><text x="0.6855%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;regex_automata::meta::regex::RegexI,&amp;alloc::alloc::Global&gt;&gt; (971,903 samples, 0.02%)</title><rect x="0.4355%" y="485" width="0.0188%" height="15" fill="rgb(221,13,13)" fg:x="22546624" fg:w="971903"/><text x="0.6855%" y="495.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (971,903 samples, 0.02%)</title><rect x="0.4355%" y="469" width="0.0188%" height="15" fill="rgb(238,131,9)" fg:x="22546624" fg:w="971903"/><text x="0.6855%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe&gt;&gt; (1,059,432 samples, 0.02%)</title><rect x="0.4543%" y="485" width="0.0205%" height="15" fill="rgb(211,50,8)" fg:x="23518527" fg:w="1059432"/><text x="0.7043%" y="495.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1,059,432 samples, 0.02%)</title><rect x="0.4543%" y="469" width="0.0205%" height="15" fill="rgb(245,182,24)" fg:x="23518527" fg:w="1059432"/><text x="0.7043%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;dyn regex_automata::meta::strategy::Strategy&gt; (1,059,432 samples, 0.02%)</title><rect x="0.4543%" y="453" width="0.0205%" height="15" fill="rgb(242,14,37)" fg:x="23518527" fg:w="1059432"/><text x="0.7043%" y="463.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1,059,432 samples, 0.02%)</title><rect x="0.4543%" y="437" width="0.0205%" height="15" fill="rgb(246,228,12)" fg:x="23518527" fg:w="1059432"/><text x="0.7043%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::nfa::Inner&gt; (1,059,432 samples, 0.02%)</title><rect x="0.4543%" y="421" width="0.0205%" height="15" fill="rgb(213,55,15)" fg:x="23518527" fg:w="1059432"/><text x="0.7043%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;regex_automata::nfa::thompson::nfa::State&gt;&gt; (1,059,432 samples, 0.02%)</title><rect x="0.4543%" y="405" width="0.0205%" height="15" fill="rgb(209,9,3)" fg:x="23518527" fg:w="1059432"/><text x="0.7043%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;regex_automata::nfa::thompson::nfa::State&gt;&gt; (1,059,432 samples, 0.02%)</title><rect x="0.4543%" y="389" width="0.0205%" height="15" fill="rgb(230,59,30)" fg:x="23518527" fg:w="1059432"/><text x="0.7043%" y="399.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,059,432 samples, 0.02%)</title><rect x="0.4543%" y="373" width="0.0205%" height="15" fill="rgb(209,121,21)" fg:x="23518527" fg:w="1059432"/><text x="0.7043%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (1,059,432 samples, 0.02%)</title><rect x="0.4543%" y="357" width="0.0205%" height="15" fill="rgb(220,109,13)" fg:x="23518527" fg:w="1059432"/><text x="0.7043%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1,059,432 samples, 0.02%)</title><rect x="0.4543%" y="341" width="0.0205%" height="15" fill="rgb(232,18,1)" fg:x="23518527" fg:w="1059432"/><text x="0.7043%" y="351.50"></text></g><g><title>alloc::alloc::dealloc (1,059,432 samples, 0.02%)</title><rect x="0.4543%" y="325" width="0.0205%" height="15" fill="rgb(215,41,42)" fg:x="23518527" fg:w="1059432"/><text x="0.7043%" y="335.50"></text></g><g><title>cfree (1,059,432 samples, 0.02%)</title><rect x="0.4543%" y="309" width="0.0205%" height="15" fill="rgb(224,123,36)" fg:x="23518527" fg:w="1059432"/><text x="0.7043%" y="319.50"></text></g><g><title>[libc.so.6] (1,059,432 samples, 0.02%)</title><rect x="0.4543%" y="293" width="0.0205%" height="15" fill="rgb(240,125,3)" fg:x="23518527" fg:w="1059432"/><text x="0.7043%" y="303.50"></text></g><g><title>[libc.so.6] (1,059,432 samples, 0.02%)</title><rect x="0.4543%" y="277" width="0.0205%" height="15" fill="rgb(205,98,50)" fg:x="23518527" fg:w="1059432"/><text x="0.7043%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (3,257,958 samples, 0.06%)</title><rect x="0.4355%" y="565" width="0.0629%" height="15" fill="rgb(205,185,37)" fg:x="22546624" fg:w="3257958"/><text x="0.6855%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Regex&gt; (3,257,958 samples, 0.06%)</title><rect x="0.4355%" y="549" width="0.0629%" height="15" fill="rgb(238,207,15)" fg:x="22546624" fg:w="3257958"/><text x="0.6855%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (2,286,055 samples, 0.04%)</title><rect x="0.4543%" y="533" width="0.0442%" height="15" fill="rgb(213,199,42)" fg:x="23518527" fg:w="2286055"/><text x="0.7043%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;regex_automata::util::pool::inner::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt;&gt; (2,286,055 samples, 0.04%)</title><rect x="0.4543%" y="517" width="0.0442%" height="15" fill="rgb(235,201,11)" fg:x="23518527" fg:w="2286055"/><text x="0.7043%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::inner::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (2,286,055 samples, 0.04%)</title><rect x="0.4543%" y="501" width="0.0442%" height="15" fill="rgb(207,46,11)" fg:x="23518527" fg:w="2286055"/><text x="0.7043%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;core::option::Option&lt;regex_automata::meta::regex::Cache&gt;&gt;&gt; (1,226,623 samples, 0.02%)</title><rect x="0.4748%" y="485" width="0.0237%" height="15" fill="rgb(241,35,35)" fg:x="24577959" fg:w="1226623"/><text x="0.7248%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;regex_automata::meta::regex::Cache&gt;&gt; (1,226,623 samples, 0.02%)</title><rect x="0.4748%" y="469" width="0.0237%" height="15" fill="rgb(243,32,47)" fg:x="24577959" fg:w="1226623"/><text x="0.7248%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1,226,623 samples, 0.02%)</title><rect x="0.4748%" y="453" width="0.0237%" height="15" fill="rgb(247,202,23)" fg:x="24577959" fg:w="1226623"/><text x="0.7248%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::HybridCache&gt; (1,226,623 samples, 0.02%)</title><rect x="0.4748%" y="437" width="0.0237%" height="15" fill="rgb(219,102,11)" fg:x="24577959" fg:w="1226623"/><text x="0.7248%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;regex_automata::hybrid::regex::Cache&gt;&gt; (1,226,623 samples, 0.02%)</title><rect x="0.4748%" y="421" width="0.0237%" height="15" fill="rgb(243,110,44)" fg:x="24577959" fg:w="1226623"/><text x="0.7248%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::regex::Cache&gt; (1,226,623 samples, 0.02%)</title><rect x="0.4748%" y="405" width="0.0237%" height="15" fill="rgb(222,74,54)" fg:x="24577959" fg:w="1226623"/><text x="0.7248%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1,226,623 samples, 0.02%)</title><rect x="0.4748%" y="389" width="0.0237%" height="15" fill="rgb(216,99,12)" fg:x="24577959" fg:w="1226623"/><text x="0.7248%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::sparse_set::SparseSets&gt; (1,226,623 samples, 0.02%)</title><rect x="0.4748%" y="373" width="0.0237%" height="15" fill="rgb(226,22,26)" fg:x="24577959" fg:w="1226623"/><text x="0.7248%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::sparse_set::SparseSet&gt; (1,226,623 samples, 0.02%)</title><rect x="0.4748%" y="357" width="0.0237%" height="15" fill="rgb(217,163,10)" fg:x="24577959" fg:w="1226623"/><text x="0.7248%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;regex_automata::util::primitives::StateID&gt;&gt; (1,226,623 samples, 0.02%)</title><rect x="0.4748%" y="341" width="0.0237%" height="15" fill="rgb(213,25,53)" fg:x="24577959" fg:w="1226623"/><text x="0.7248%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;regex_automata::util::primitives::StateID&gt;&gt; (1,226,623 samples, 0.02%)</title><rect x="0.4748%" y="325" width="0.0237%" height="15" fill="rgb(252,105,26)" fg:x="24577959" fg:w="1226623"/><text x="0.7248%" y="335.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,226,623 samples, 0.02%)</title><rect x="0.4748%" y="309" width="0.0237%" height="15" fill="rgb(220,39,43)" fg:x="24577959" fg:w="1226623"/><text x="0.7248%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (1,226,623 samples, 0.02%)</title><rect x="0.4748%" y="293" width="0.0237%" height="15" fill="rgb(229,68,48)" fg:x="24577959" fg:w="1226623"/><text x="0.7248%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1,226,623 samples, 0.02%)</title><rect x="0.4748%" y="277" width="0.0237%" height="15" fill="rgb(252,8,32)" fg:x="24577959" fg:w="1226623"/><text x="0.7248%" y="287.50"></text></g><g><title>alloc::alloc::dealloc (1,226,623 samples, 0.02%)</title><rect x="0.4748%" y="261" width="0.0237%" height="15" fill="rgb(223,20,43)" fg:x="24577959" fg:w="1226623"/><text x="0.7248%" y="271.50"></text></g><g><title>cfree (1,226,623 samples, 0.02%)</title><rect x="0.4748%" y="245" width="0.0237%" height="15" fill="rgb(229,81,49)" fg:x="24577959" fg:w="1226623"/><text x="0.7248%" y="255.50"></text></g><g><title>[libc.so.6] (1,226,623 samples, 0.02%)</title><rect x="0.4748%" y="229" width="0.0237%" height="15" fill="rgb(236,28,36)" fg:x="24577959" fg:w="1226623"/><text x="0.7248%" y="239.50"></text></g><g><title>[libc.so.6] (1,226,623 samples, 0.02%)</title><rect x="0.4748%" y="213" width="0.0237%" height="15" fill="rgb(249,185,26)" fg:x="24577959" fg:w="1226623"/><text x="0.7248%" y="223.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (1,050,386 samples, 0.02%)</title><rect x="0.4985%" y="517" width="0.0203%" height="15" fill="rgb(249,174,33)" fg:x="25804582" fg:w="1050386"/><text x="0.7485%" y="527.50"></text></g><g><title>regex_automata::meta::wrappers::HybridEngine::try_search (1,050,386 samples, 0.02%)</title><rect x="0.4985%" y="501" width="0.0203%" height="15" fill="rgb(233,201,37)" fg:x="25804582" fg:w="1050386"/><text x="0.7485%" y="511.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (1,050,386 samples, 0.02%)</title><rect x="0.4985%" y="485" width="0.0203%" height="15" fill="rgb(221,78,26)" fg:x="25804582" fg:w="1050386"/><text x="0.7485%" y="495.50"></text></g><g><title>regex_automata::hybrid::dfa::DFA::try_search_fwd (1,050,386 samples, 0.02%)</title><rect x="0.4985%" y="469" width="0.0203%" height="15" fill="rgb(250,127,30)" fg:x="25804582" fg:w="1050386"/><text x="0.7485%" y="479.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1,050,386 samples, 0.02%)</title><rect x="0.4985%" y="453" width="0.0203%" height="15" fill="rgb(230,49,44)" fg:x="25804582" fg:w="1050386"/><text x="0.7485%" y="463.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd_imp (1,050,386 samples, 0.02%)</title><rect x="0.4985%" y="437" width="0.0203%" height="15" fill="rgb(229,67,23)" fg:x="25804582" fg:w="1050386"/><text x="0.7485%" y="447.50"></text></g><g><title>regex_automata::hybrid::dfa::DFA::next_state (1,050,386 samples, 0.02%)</title><rect x="0.4985%" y="421" width="0.0203%" height="15" fill="rgb(249,83,47)" fg:x="25804582" fg:w="1050386"/><text x="0.7485%" y="431.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1,050,386 samples, 0.02%)</title><rect x="0.4985%" y="405" width="0.0203%" height="15" fill="rgb(215,43,3)" fg:x="25804582" fg:w="1050386"/><text x="0.7485%" y="415.50"></text></g><g><title>regex_automata::util::determinize::next (1,050,386 samples, 0.02%)</title><rect x="0.4985%" y="389" width="0.0203%" height="15" fill="rgb(238,154,13)" fg:x="25804582" fg:w="1050386"/><text x="0.7485%" y="399.50"></text></g><g><title>regex::regex::string::Regex::find (2,094,235 samples, 0.04%)</title><rect x="0.4985%" y="565" width="0.0405%" height="15" fill="rgb(219,56,2)" fg:x="25804582" fg:w="2094235"/><text x="0.7485%" y="575.50"></text></g><g><title>regex::regex::string::Regex::find_at (2,094,235 samples, 0.04%)</title><rect x="0.4985%" y="549" width="0.0405%" height="15" fill="rgb(233,0,4)" fg:x="25804582" fg:w="2094235"/><text x="0.7485%" y="559.50"></text></g><g><title>regex_automata::meta::regex::Regex::search (2,094,235 samples, 0.04%)</title><rect x="0.4985%" y="533" width="0.0405%" height="15" fill="rgb(235,30,7)" fg:x="25804582" fg:w="2094235"/><text x="0.7485%" y="543.50"></text></g><g><title>regex_automata::util::pool::Pool&lt;T,F&gt;::get (1,043,849 samples, 0.02%)</title><rect x="0.5187%" y="517" width="0.0202%" height="15" fill="rgb(250,79,13)" fg:x="26854968" fg:w="1043849"/><text x="0.7687%" y="527.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get (1,043,849 samples, 0.02%)</title><rect x="0.5187%" y="501" width="0.0202%" height="15" fill="rgb(211,146,34)" fg:x="26854968" fg:w="1043849"/><text x="0.7687%" y="511.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (1,043,849 samples, 0.02%)</title><rect x="0.5187%" y="485" width="0.0202%" height="15" fill="rgb(228,22,38)" fg:x="26854968" fg:w="1043849"/><text x="0.7687%" y="495.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::Fn&lt;Args&gt;&gt;::call (1,043,849 samples, 0.02%)</title><rect x="0.5187%" y="469" width="0.0202%" height="15" fill="rgb(235,168,5)" fg:x="26854968" fg:w="1043849"/><text x="0.7687%" y="479.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (1,043,849 samples, 0.02%)</title><rect x="0.5187%" y="453" width="0.0202%" height="15" fill="rgb(221,155,16)" fg:x="26854968" fg:w="1043849"/><text x="0.7687%" y="463.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::create_cache (1,043,849 samples, 0.02%)</title><rect x="0.5187%" y="437" width="0.0202%" height="15" fill="rgb(215,215,53)" fg:x="26854968" fg:w="1043849"/><text x="0.7687%" y="447.50"></text></g><g><title>regex_automata::meta::wrappers::HybridCache::new (1,043,849 samples, 0.02%)</title><rect x="0.5187%" y="421" width="0.0202%" height="15" fill="rgb(223,4,10)" fg:x="26854968" fg:w="1043849"/><text x="0.7687%" y="431.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1,043,849 samples, 0.02%)</title><rect x="0.5187%" y="405" width="0.0202%" height="15" fill="rgb(234,103,6)" fg:x="26854968" fg:w="1043849"/><text x="0.7687%" y="415.50"></text></g><g><title>regex_automata::meta::wrappers::HybridCache::new::_{{closure}} (1,043,849 samples, 0.02%)</title><rect x="0.5187%" y="389" width="0.0202%" height="15" fill="rgb(227,97,0)" fg:x="26854968" fg:w="1043849"/><text x="0.7687%" y="399.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::create_cache (1,043,849 samples, 0.02%)</title><rect x="0.5187%" y="373" width="0.0202%" height="15" fill="rgb(234,150,53)" fg:x="26854968" fg:w="1043849"/><text x="0.7687%" y="383.50"></text></g><g><title>regex_automata::hybrid::regex::Cache::new (1,043,849 samples, 0.02%)</title><rect x="0.5187%" y="357" width="0.0202%" height="15" fill="rgb(228,201,54)" fg:x="26854968" fg:w="1043849"/><text x="0.7687%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (1,043,849 samples, 0.02%)</title><rect x="0.5187%" y="341" width="0.0202%" height="15" fill="rgb(222,22,37)" fg:x="26854968" fg:w="1043849"/><text x="0.7687%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (1,043,849 samples, 0.02%)</title><rect x="0.5187%" y="325" width="0.0202%" height="15" fill="rgb(237,53,32)" fg:x="26854968" fg:w="1043849"/><text x="0.7687%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_all_transitions (1,043,849 samples, 0.02%)</title><rect x="0.5187%" y="309" width="0.0202%" height="15" fill="rgb(233,25,53)" fg:x="26854968" fg:w="1043849"/><text x="0.7687%" y="319.50"></text></g><g><title>&lt;regex_automata::util::alphabet::ByteClassRepresentatives as core::iter::traits::iterator::Iterator&gt;::next (1,043,849 samples, 0.02%)</title><rect x="0.5187%" y="293" width="0.0202%" height="15" fill="rgb(210,40,34)" fg:x="26854968" fg:w="1043849"/><text x="0.7687%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;regex_syntax::ast::ClassBracketed&gt;&gt; (1,042,033 samples, 0.02%)</title><rect x="0.5389%" y="405" width="0.0201%" height="15" fill="rgb(241,220,44)" fg:x="27898817" fg:w="1042033"/><text x="0.7889%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassBracketed&gt; (1,042,033 samples, 0.02%)</title><rect x="0.5389%" y="389" width="0.0201%" height="15" fill="rgb(235,28,35)" fg:x="27898817" fg:w="1042033"/><text x="0.7889%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1,042,033 samples, 0.02%)</title><rect x="0.5389%" y="373" width="0.0201%" height="15" fill="rgb(210,56,17)" fg:x="27898817" fg:w="1042033"/><text x="0.7889%" y="383.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1,042,033 samples, 0.02%)</title><rect x="0.5389%" y="357" width="0.0201%" height="15" fill="rgb(224,130,29)" fg:x="27898817" fg:w="1042033"/><text x="0.7889%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (1,042,033 samples, 0.02%)</title><rect x="0.5389%" y="341" width="0.0201%" height="15" fill="rgb(235,212,8)" fg:x="27898817" fg:w="1042033"/><text x="0.7889%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1,042,033 samples, 0.02%)</title><rect x="0.5389%" y="325" width="0.0201%" height="15" fill="rgb(223,33,50)" fg:x="27898817" fg:w="1042033"/><text x="0.7889%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (1,042,033 samples, 0.02%)</title><rect x="0.5389%" y="309" width="0.0201%" height="15" fill="rgb(219,149,13)" fg:x="27898817" fg:w="1042033"/><text x="0.7889%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1,042,033 samples, 0.02%)</title><rect x="0.5389%" y="293" width="0.0201%" height="15" fill="rgb(250,156,29)" fg:x="27898817" fg:w="1042033"/><text x="0.7889%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1,042,033 samples, 0.02%)</title><rect x="0.5389%" y="277" width="0.0201%" height="15" fill="rgb(216,193,19)" fg:x="27898817" fg:w="1042033"/><text x="0.7889%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (1,042,033 samples, 0.02%)</title><rect x="0.5389%" y="261" width="0.0201%" height="15" fill="rgb(216,135,14)" fg:x="27898817" fg:w="1042033"/><text x="0.7889%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1,042,033 samples, 0.02%)</title><rect x="0.5389%" y="245" width="0.0201%" height="15" fill="rgb(241,47,5)" fg:x="27898817" fg:w="1042033"/><text x="0.7889%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (1,042,033 samples, 0.02%)</title><rect x="0.5389%" y="229" width="0.0201%" height="15" fill="rgb(233,42,35)" fg:x="27898817" fg:w="1042033"/><text x="0.7889%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1,042,033 samples, 0.02%)</title><rect x="0.5389%" y="213" width="0.0201%" height="15" fill="rgb(231,13,6)" fg:x="27898817" fg:w="1042033"/><text x="0.7889%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1,042,033 samples, 0.02%)</title><rect x="0.5389%" y="197" width="0.0201%" height="15" fill="rgb(207,181,40)" fg:x="27898817" fg:w="1042033"/><text x="0.7889%" y="207.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1,042,033 samples, 0.02%)</title><rect x="0.5389%" y="181" width="0.0201%" height="15" fill="rgb(254,173,49)" fg:x="27898817" fg:w="1042033"/><text x="0.7889%" y="191.50"></text></g><g><title>alloc::alloc::realloc (1,042,033 samples, 0.02%)</title><rect x="0.5389%" y="165" width="0.0201%" height="15" fill="rgb(221,1,38)" fg:x="27898817" fg:w="1042033"/><text x="0.7889%" y="175.50"></text></g><g><title>realloc (1,042,033 samples, 0.02%)</title><rect x="0.5389%" y="149" width="0.0201%" height="15" fill="rgb(206,124,46)" fg:x="27898817" fg:w="1042033"/><text x="0.7889%" y="159.50"></text></g><g><title>[libc.so.6] (1,042,033 samples, 0.02%)</title><rect x="0.5389%" y="133" width="0.0201%" height="15" fill="rgb(249,21,11)" fg:x="27898817" fg:w="1042033"/><text x="0.7889%" y="143.50"></text></g><g><title>memcpy (1,042,033 samples, 0.02%)</title><rect x="0.5389%" y="117" width="0.0201%" height="15" fill="rgb(222,201,40)" fg:x="27898817" fg:w="1042033"/><text x="0.7889%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;regex_syntax::ast::Ast&gt;&gt; (2,060,306 samples, 0.04%)</title><rect x="0.5389%" y="485" width="0.0398%" height="15" fill="rgb(235,61,29)" fg:x="27898817" fg:w="2060306"/><text x="0.7889%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2,060,306 samples, 0.04%)</title><rect x="0.5389%" y="469" width="0.0398%" height="15" fill="rgb(219,207,3)" fg:x="27898817" fg:w="2060306"/><text x="0.7889%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;[regex_syntax::ast::Ast]&gt; (2,060,306 samples, 0.04%)</title><rect x="0.5389%" y="453" width="0.0398%" height="15" fill="rgb(222,56,46)" fg:x="27898817" fg:w="2060306"/><text x="0.7889%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2,060,306 samples, 0.04%)</title><rect x="0.5389%" y="437" width="0.0398%" height="15" fill="rgb(239,76,54)" fg:x="27898817" fg:w="2060306"/><text x="0.7889%" y="447.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2,060,306 samples, 0.04%)</title><rect x="0.5389%" y="421" width="0.0398%" height="15" fill="rgb(231,124,27)" fg:x="27898817" fg:w="2060306"/><text x="0.7889%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1,018,273 samples, 0.02%)</title><rect x="0.5590%" y="405" width="0.0197%" height="15" fill="rgb(249,195,6)" fg:x="28940850" fg:w="1018273"/><text x="0.8090%" y="415.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1,018,273 samples, 0.02%)</title><rect x="0.5590%" y="389" width="0.0197%" height="15" fill="rgb(237,174,47)" fg:x="28940850" fg:w="1018273"/><text x="0.8090%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::is_empty (1,018,273 samples, 0.02%)</title><rect x="0.5590%" y="373" width="0.0197%" height="15" fill="rgb(206,201,31)" fg:x="28940850" fg:w="1018273"/><text x="0.8090%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (1,018,273 samples, 0.02%)</title><rect x="0.5590%" y="357" width="0.0197%" height="15" fill="rgb(231,57,52)" fg:x="28940850" fg:w="1018273"/><text x="0.8090%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;regex_syntax::hir::Hir&gt;&gt; (1,004,854 samples, 0.02%)</title><rect x="0.5787%" y="485" width="0.0194%" height="15" fill="rgb(248,177,22)" fg:x="29959123" fg:w="1004854"/><text x="0.8287%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,004,854 samples, 0.02%)</title><rect x="0.5787%" y="469" width="0.0194%" height="15" fill="rgb(215,211,37)" fg:x="29959123" fg:w="1004854"/><text x="0.8287%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;[regex_syntax::hir::Hir]&gt; (1,004,854 samples, 0.02%)</title><rect x="0.5787%" y="453" width="0.0194%" height="15" fill="rgb(241,128,51)" fg:x="29959123" fg:w="1004854"/><text x="0.8287%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::hir::Hir&gt; (1,004,854 samples, 0.02%)</title><rect x="0.5787%" y="437" width="0.0194%" height="15" fill="rgb(227,165,31)" fg:x="29959123" fg:w="1004854"/><text x="0.8287%" y="447.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1,004,854 samples, 0.02%)</title><rect x="0.5787%" y="421" width="0.0194%" height="15" fill="rgb(228,167,24)" fg:x="29959123" fg:w="1004854"/><text x="0.8287%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::hir::Hir&gt; (1,004,854 samples, 0.02%)</title><rect x="0.5787%" y="405" width="0.0194%" height="15" fill="rgb(228,143,12)" fg:x="29959123" fg:w="1004854"/><text x="0.8287%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::hir::Properties&gt; (1,004,854 samples, 0.02%)</title><rect x="0.5787%" y="389" width="0.0194%" height="15" fill="rgb(249,149,8)" fg:x="29959123" fg:w="1004854"/><text x="0.8287%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;regex_syntax::hir::PropertiesI&gt;&gt; (1,004,854 samples, 0.02%)</title><rect x="0.5787%" y="373" width="0.0194%" height="15" fill="rgb(243,35,44)" fg:x="29959123" fg:w="1004854"/><text x="0.8287%" y="383.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,004,854 samples, 0.02%)</title><rect x="0.5787%" y="357" width="0.0194%" height="15" fill="rgb(246,89,9)" fg:x="29959123" fg:w="1004854"/><text x="0.8287%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1,004,854 samples, 0.02%)</title><rect x="0.5787%" y="341" width="0.0194%" height="15" fill="rgb(233,213,13)" fg:x="29959123" fg:w="1004854"/><text x="0.8287%" y="351.50"></text></g><g><title>alloc::alloc::dealloc (1,004,854 samples, 0.02%)</title><rect x="0.5787%" y="325" width="0.0194%" height="15" fill="rgb(233,141,41)" fg:x="29959123" fg:w="1004854"/><text x="0.8287%" y="335.50"></text></g><g><title>cfree (1,004,854 samples, 0.02%)</title><rect x="0.5787%" y="309" width="0.0194%" height="15" fill="rgb(239,167,4)" fg:x="29959123" fg:w="1004854"/><text x="0.8287%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;core::option::Option&lt;alloc::sync::Arc&lt;str&gt;&gt;&gt;&gt;&gt; (568,107 samples, 0.01%)</title><rect x="0.5981%" y="373" width="0.0110%" height="15" fill="rgb(209,217,16)" fg:x="30963977" fg:w="568107"/><text x="0.8481%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (568,107 samples, 0.01%)</title><rect x="0.5981%" y="357" width="0.0110%" height="15" fill="rgb(219,88,35)" fg:x="30963977" fg:w="568107"/><text x="0.8481%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;core::option::Option&lt;alloc::sync::Arc&lt;str&gt;&gt;&gt;]&gt; (568,107 samples, 0.01%)</title><rect x="0.5981%" y="341" width="0.0110%" height="15" fill="rgb(220,193,23)" fg:x="30963977" fg:w="568107"/><text x="0.8481%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;core::option::Option&lt;alloc::sync::Arc&lt;str&gt;&gt;&gt;&gt; (568,107 samples, 0.01%)</title><rect x="0.5981%" y="325" width="0.0110%" height="15" fill="rgb(230,90,52)" fg:x="30963977" fg:w="568107"/><text x="0.8481%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::builder::Builder&gt;&gt; (1,357,074 samples, 0.03%)</title><rect x="0.5981%" y="421" width="0.0262%" height="15" fill="rgb(252,106,19)" fg:x="30963977" fg:w="1357074"/><text x="0.8481%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;regex_automata::nfa::thompson::builder::Builder&gt;&gt; (1,357,074 samples, 0.03%)</title><rect x="0.5981%" y="405" width="0.0262%" height="15" fill="rgb(206,74,20)" fg:x="30963977" fg:w="1357074"/><text x="0.8481%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::builder::Builder&gt; (1,357,074 samples, 0.03%)</title><rect x="0.5981%" y="389" width="0.0262%" height="15" fill="rgb(230,138,44)" fg:x="30963977" fg:w="1357074"/><text x="0.8481%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;regex_automata::nfa::thompson::builder::State&gt;&gt; (788,967 samples, 0.02%)</title><rect x="0.6091%" y="373" width="0.0152%" height="15" fill="rgb(235,182,43)" fg:x="31532084" fg:w="788967"/><text x="0.8591%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (788,967 samples, 0.02%)</title><rect x="0.6091%" y="357" width="0.0152%" height="15" fill="rgb(242,16,51)" fg:x="31532084" fg:w="788967"/><text x="0.8591%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;[regex_automata::nfa::thompson::builder::State]&gt; (788,967 samples, 0.02%)</title><rect x="0.6091%" y="341" width="0.0152%" height="15" fill="rgb(248,9,4)" fg:x="31532084" fg:w="788967"/><text x="0.8591%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::builder::State&gt; (788,967 samples, 0.02%)</title><rect x="0.6091%" y="325" width="0.0152%" height="15" fill="rgb(210,31,22)" fg:x="31532084" fg:w="788967"/><text x="0.8591%" y="335.50"></text></g><g><title>cfree (788,967 samples, 0.02%)</title><rect x="0.6091%" y="309" width="0.0152%" height="15" fill="rgb(239,54,39)" fg:x="31532084" fg:w="788967"/><text x="0.8591%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (3,007,557 samples, 0.06%)</title><rect x="0.5981%" y="437" width="0.0581%" height="15" fill="rgb(230,99,41)" fg:x="30963977" fg:w="3007557"/><text x="0.8481%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (1,650,483 samples, 0.03%)</title><rect x="0.6243%" y="421" width="0.0319%" height="15" fill="rgb(253,106,12)" fg:x="32321051" fg:w="1650483"/><text x="0.8743%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (1,650,483 samples, 0.03%)</title><rect x="0.6243%" y="405" width="0.0319%" height="15" fill="rgb(213,46,41)" fg:x="32321051" fg:w="1650483"/><text x="0.8743%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt; (1,650,483 samples, 0.03%)</title><rect x="0.6243%" y="389" width="0.0319%" height="15" fill="rgb(215,133,35)" fg:x="32321051" fg:w="1650483"/><text x="0.8743%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::map::Utf8BoundedMap&gt; (1,650,483 samples, 0.03%)</title><rect x="0.6243%" y="373" width="0.0319%" height="15" fill="rgb(213,28,5)" fg:x="32321051" fg:w="1650483"/><text x="0.8743%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;regex_automata::nfa::thompson::map::Utf8BoundedEntry&gt;&gt; (1,650,483 samples, 0.03%)</title><rect x="0.6243%" y="357" width="0.0319%" height="15" fill="rgb(215,77,49)" fg:x="32321051" fg:w="1650483"/><text x="0.8743%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,650,483 samples, 0.03%)</title><rect x="0.6243%" y="341" width="0.0319%" height="15" fill="rgb(248,100,22)" fg:x="32321051" fg:w="1650483"/><text x="0.8743%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;[regex_automata::nfa::thompson::map::Utf8BoundedEntry]&gt; (1,650,483 samples, 0.03%)</title><rect x="0.6243%" y="325" width="0.0319%" height="15" fill="rgb(208,67,9)" fg:x="32321051" fg:w="1650483"/><text x="0.8743%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::map::Utf8BoundedEntry&gt; (1,650,483 samples, 0.03%)</title><rect x="0.6243%" y="309" width="0.0319%" height="15" fill="rgb(219,133,21)" fg:x="32321051" fg:w="1650483"/><text x="0.8743%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;regex_automata::nfa::thompson::nfa::Transition&gt;&gt; (1,650,483 samples, 0.03%)</title><rect x="0.6243%" y="293" width="0.0319%" height="15" fill="rgb(246,46,29)" fg:x="32321051" fg:w="1650483"/><text x="0.8743%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;regex_automata::nfa::thompson::nfa::Transition&gt;&gt; (1,650,483 samples, 0.03%)</title><rect x="0.6243%" y="277" width="0.0319%" height="15" fill="rgb(246,185,52)" fg:x="32321051" fg:w="1650483"/><text x="0.8743%" y="287.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,650,483 samples, 0.03%)</title><rect x="0.6243%" y="261" width="0.0319%" height="15" fill="rgb(252,136,11)" fg:x="32321051" fg:w="1650483"/><text x="0.8743%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (1,304,095 samples, 0.03%)</title><rect x="0.6310%" y="245" width="0.0252%" height="15" fill="rgb(219,138,53)" fg:x="32667439" fg:w="1304095"/><text x="0.8810%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (1,304,095 samples, 0.03%)</title><rect x="0.6310%" y="229" width="0.0252%" height="15" fill="rgb(211,51,23)" fg:x="32667439" fg:w="1304095"/><text x="0.8810%" y="239.50"></text></g><g><title>regex_automata::meta::strategy::new (3,472,086 samples, 0.07%)</title><rect x="0.5981%" y="469" width="0.0671%" height="15" fill="rgb(247,221,28)" fg:x="30963977" fg:w="3472086"/><text x="0.8481%" y="479.50"></text></g><g><title>regex_automata::meta::strategy::Core::new (3,472,086 samples, 0.07%)</title><rect x="0.5981%" y="453" width="0.0671%" height="15" fill="rgb(251,222,45)" fg:x="30963977" fg:w="3472086"/><text x="0.8481%" y="463.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir (4,509,006 samples, 0.09%)</title><rect x="0.5981%" y="485" width="0.0871%" height="15" fill="rgb(217,162,53)" fg:x="30963977" fg:w="4509006"/><text x="0.8481%" y="495.50"></text></g><g><title>regex_automata::util::pool::Pool&lt;T,F&gt;::new (1,036,920 samples, 0.02%)</title><rect x="0.6652%" y="469" width="0.0200%" height="15" fill="rgb(229,93,14)" fg:x="34436063" fg:w="1036920"/><text x="0.9152%" y="479.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::new (1,036,920 samples, 0.02%)</title><rect x="0.6652%" y="453" width="0.0200%" height="15" fill="rgb(209,67,49)" fg:x="34436063" fg:w="1036920"/><text x="0.9152%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1,036,920 samples, 0.02%)</title><rect x="0.6652%" y="437" width="0.0200%" height="15" fill="rgb(213,87,29)" fg:x="34436063" fg:w="1036920"/><text x="0.9152%" y="447.50"></text></g><g><title>core::ptr::write (1,036,920 samples, 0.02%)</title><rect x="0.6652%" y="421" width="0.0200%" height="15" fill="rgb(205,151,52)" fg:x="34436063" fg:w="1036920"/><text x="0.9152%" y="431.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (652,954 samples, 0.01%)</title><rect x="0.6852%" y="421" width="0.0126%" height="15" fill="rgb(253,215,39)" fg:x="35472983" fg:w="652954"/><text x="0.9352%" y="431.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (926,928 samples, 0.02%)</title><rect x="0.6978%" y="421" width="0.0179%" height="15" fill="rgb(221,220,41)" fg:x="36125937" fg:w="926928"/><text x="0.9478%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (926,928 samples, 0.02%)</title><rect x="0.6978%" y="405" width="0.0179%" height="15" fill="rgb(218,133,21)" fg:x="36125937" fg:w="926928"/><text x="0.9478%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSetItem&gt; (926,928 samples, 0.02%)</title><rect x="0.6978%" y="389" width="0.0179%" height="15" fill="rgb(221,193,43)" fg:x="36125937" fg:w="926928"/><text x="0.9478%" y="399.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (2,640,234 samples, 0.05%)</title><rect x="0.6852%" y="485" width="0.0510%" height="15" fill="rgb(240,128,52)" fg:x="35472983" fg:w="2640234"/><text x="0.9352%" y="495.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse (2,640,234 samples, 0.05%)</title><rect x="0.6852%" y="469" width="0.0510%" height="15" fill="rgb(253,114,12)" fg:x="35472983" fg:w="2640234"/><text x="0.9352%" y="479.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2,640,234 samples, 0.05%)</title><rect x="0.6852%" y="453" width="0.0510%" height="15" fill="rgb(215,223,47)" fg:x="35472983" fg:w="2640234"/><text x="0.9352%" y="463.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2,640,234 samples, 0.05%)</title><rect x="0.6852%" y="437" width="0.0510%" height="15" fill="rgb(248,225,23)" fg:x="35472983" fg:w="2640234"/><text x="0.9352%" y="447.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1,060,352 samples, 0.02%)</title><rect x="0.7157%" y="421" width="0.0205%" height="15" fill="rgb(250,108,0)" fg:x="37052865" fg:w="1060352"/><text x="0.9657%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1,060,352 samples, 0.02%)</title><rect x="0.7157%" y="405" width="0.0205%" height="15" fill="rgb(228,208,7)" fg:x="37052865" fg:w="1060352"/><text x="0.9657%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1,060,352 samples, 0.02%)</title><rect x="0.7157%" y="389" width="0.0205%" height="15" fill="rgb(244,45,10)" fg:x="37052865" fg:w="1060352"/><text x="0.9657%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (1,060,352 samples, 0.02%)</title><rect x="0.7157%" y="373" width="0.0205%" height="15" fill="rgb(207,125,25)" fg:x="37052865" fg:w="1060352"/><text x="0.9657%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (1,060,352 samples, 0.02%)</title><rect x="0.7157%" y="357" width="0.0205%" height="15" fill="rgb(210,195,18)" fg:x="37052865" fg:w="1060352"/><text x="0.9657%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1,060,352 samples, 0.02%)</title><rect x="0.7157%" y="341" width="0.0205%" height="15" fill="rgb(249,80,12)" fg:x="37052865" fg:w="1060352"/><text x="0.9657%" y="351.50"></text></g><g><title>malloc (1,060,352 samples, 0.02%)</title><rect x="0.7157%" y="325" width="0.0205%" height="15" fill="rgb(221,65,9)" fg:x="37052865" fg:w="1060352"/><text x="0.9657%" y="335.50"></text></g><g><title>[libc.so.6] (1,060,352 samples, 0.02%)</title><rect x="0.7157%" y="309" width="0.0205%" height="15" fill="rgb(235,49,36)" fg:x="37052865" fg:w="1060352"/><text x="0.9657%" y="319.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1,063,407 samples, 0.02%)</title><rect x="0.7362%" y="437" width="0.0205%" height="15" fill="rgb(225,32,20)" fg:x="38113217" fg:w="1063407"/><text x="0.9862%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1,063,407 samples, 0.02%)</title><rect x="0.7362%" y="421" width="0.0205%" height="15" fill="rgb(215,141,46)" fg:x="38113217" fg:w="1063407"/><text x="0.9862%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1,063,407 samples, 0.02%)</title><rect x="0.7362%" y="405" width="0.0205%" height="15" fill="rgb(250,160,47)" fg:x="38113217" fg:w="1063407"/><text x="0.9862%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (1,063,407 samples, 0.02%)</title><rect x="0.7362%" y="389" width="0.0205%" height="15" fill="rgb(216,222,40)" fg:x="38113217" fg:w="1063407"/><text x="0.9862%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (1,063,407 samples, 0.02%)</title><rect x="0.7362%" y="373" width="0.0205%" height="15" fill="rgb(234,217,39)" fg:x="38113217" fg:w="1063407"/><text x="0.9862%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1,063,407 samples, 0.02%)</title><rect x="0.7362%" y="357" width="0.0205%" height="15" fill="rgb(207,178,40)" fg:x="38113217" fg:w="1063407"/><text x="0.9862%" y="367.50"></text></g><g><title>malloc (1,063,407 samples, 0.02%)</title><rect x="0.7362%" y="341" width="0.0205%" height="15" fill="rgb(221,136,13)" fg:x="38113217" fg:w="1063407"/><text x="0.9862%" y="351.50"></text></g><g><title>XLang_Rust::build_code (18,513,691 samples, 0.36%)</title><rect x="0.4252%" y="629" width="0.3576%" height="15" fill="rgb(249,199,10)" fg:x="22012027" fg:w="18513691"/><text x="0.6752%" y="639.50"></text></g><g><title>XLang_Rust::parser::lexer::lexer::tokenize (18,513,691 samples, 0.36%)</title><rect x="0.4252%" y="613" width="0.3576%" height="15" fill="rgb(249,222,13)" fg:x="22012027" fg:w="18513691"/><text x="0.6752%" y="623.50"></text></g><g><title>XLang_Rust::parser::lexer::lexer::tokenize::_{{closure}} (18,513,691 samples, 0.36%)</title><rect x="0.4252%" y="597" width="0.3576%" height="15" fill="rgb(244,185,38)" fg:x="22012027" fg:w="18513691"/><text x="0.6752%" y="607.50"></text></g><g><title>XLang_Rust::parser::lexer::lexer::tokenize::_{{closure}} (17,979,094 samples, 0.35%)</title><rect x="0.4355%" y="581" width="0.3473%" height="15" fill="rgb(236,202,9)" fg:x="22546624" fg:w="17979094"/><text x="0.6855%" y="591.50"></text></g><g><title>regex::regex::string::Regex::new (12,626,901 samples, 0.24%)</title><rect x="0.5389%" y="565" width="0.2439%" height="15" fill="rgb(250,229,37)" fg:x="27898817" fg:w="12626901"/><text x="0.7889%" y="575.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (12,626,901 samples, 0.24%)</title><rect x="0.5389%" y="549" width="0.2439%" height="15" fill="rgb(206,174,23)" fg:x="27898817" fg:w="12626901"/><text x="0.7889%" y="559.50"></text></g><g><title>regex::builders::Builder::build_one_string (12,626,901 samples, 0.24%)</title><rect x="0.5389%" y="533" width="0.2439%" height="15" fill="rgb(211,33,43)" fg:x="27898817" fg:w="12626901"/><text x="0.7889%" y="543.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (12,626,901 samples, 0.24%)</title><rect x="0.5389%" y="517" width="0.2439%" height="15" fill="rgb(245,58,50)" fg:x="27898817" fg:w="12626901"/><text x="0.7889%" y="527.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many (12,626,901 samples, 0.24%)</title><rect x="0.5389%" y="501" width="0.2439%" height="15" fill="rgb(244,68,36)" fg:x="27898817" fg:w="12626901"/><text x="0.7889%" y="511.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (2,412,501 samples, 0.05%)</title><rect x="0.7362%" y="485" width="0.0466%" height="15" fill="rgb(232,229,15)" fg:x="38113217" fg:w="2412501"/><text x="0.9862%" y="495.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2,412,501 samples, 0.05%)</title><rect x="0.7362%" y="469" width="0.0466%" height="15" fill="rgb(254,30,23)" fg:x="38113217" fg:w="2412501"/><text x="0.9862%" y="479.50"></text></g><g><title>regex_syntax::ast::visitor::HeapVisitor::visit (2,412,501 samples, 0.05%)</title><rect x="0.7362%" y="453" width="0.0466%" height="15" fill="rgb(235,160,14)" fg:x="38113217" fg:w="2412501"/><text x="0.9862%" y="463.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1,349,094 samples, 0.03%)</title><rect x="0.7568%" y="437" width="0.0261%" height="15" fill="rgb(212,155,44)" fg:x="39176624" fg:w="1349094"/><text x="1.0068%" y="447.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1,349,094 samples, 0.03%)</title><rect x="0.7568%" y="421" width="0.0261%" height="15" fill="rgb(226,2,50)" fg:x="39176624" fg:w="1349094"/><text x="1.0068%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1,349,094 samples, 0.03%)</title><rect x="0.7568%" y="405" width="0.0261%" height="15" fill="rgb(234,177,6)" fg:x="39176624" fg:w="1349094"/><text x="1.0068%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1,349,094 samples, 0.03%)</title><rect x="0.7568%" y="389" width="0.0261%" height="15" fill="rgb(217,24,9)" fg:x="39176624" fg:w="1349094"/><text x="1.0068%" y="399.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (8,691,222 samples, 0.17%)</title><rect x="2.0577%" y="597" width="0.1679%" height="15" fill="rgb(220,13,46)" fg:x="106522687" fg:w="8691222"/><text x="2.3077%" y="607.50"></text></g><g><title>&lt;&amp;mut alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (25,521,544 samples, 0.49%)</title><rect x="5.7233%" y="581" width="0.4930%" height="15" fill="rgb(239,221,27)" fg:x="296288965" fg:w="25521544"/><text x="5.9733%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (25,521,544 samples, 0.49%)</title><rect x="5.7233%" y="565" width="0.4930%" height="15" fill="rgb(222,198,25)" fg:x="296288965" fg:w="25521544"/><text x="5.9733%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_slice (25,521,544 samples, 0.49%)</title><rect x="5.7233%" y="549" width="0.4930%" height="15" fill="rgb(211,99,13)" fg:x="296288965" fg:w="25521544"/><text x="5.9733%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (25,521,544 samples, 0.49%)</title><rect x="5.7233%" y="533" width="0.4930%" height="15" fill="rgb(232,111,31)" fg:x="296288965" fg:w="25521544"/><text x="5.9733%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (25,521,544 samples, 0.49%)</title><rect x="5.7233%" y="517" width="0.4930%" height="15" fill="rgb(245,82,37)" fg:x="296288965" fg:w="25521544"/><text x="5.9733%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (25,521,544 samples, 0.49%)</title><rect x="5.7233%" y="501" width="0.4930%" height="15" fill="rgb(227,149,46)" fg:x="296288965" fg:w="25521544"/><text x="5.9733%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (25,521,544 samples, 0.49%)</title><rect x="5.7233%" y="485" width="0.4930%" height="15" fill="rgb(218,36,50)" fg:x="296288965" fg:w="25521544"/><text x="5.9733%" y="495.50"></text></g><g><title>&lt;XLang_Rust::vm::ir::DebugInfo as core::clone::Clone&gt;::clone (10,499,545 samples, 0.20%)</title><rect x="22.5531%" y="549" width="0.2028%" height="15" fill="rgb(226,80,48)" fg:x="1167549663" fg:w="10499545"/><text x="22.8031%" y="559.50"></text></g><g><title>__rdl_alloc (1,720,267 samples, 0.03%)</title><rect x="23.8800%" y="533" width="0.0332%" height="15" fill="rgb(238,224,15)" fg:x="1236243995" fg:w="1720267"/><text x="24.1300%" y="543.50"></text></g><g><title>malloc (53,524,320 samples, 1.03%)</title><rect x="23.9133%" y="533" width="1.0339%" height="15" fill="rgb(241,136,10)" fg:x="1237964262" fg:w="53524320"/><text x="24.1633%" y="543.50"></text></g><g><title>&lt;XLang_Rust::vm::ir::IR as core::clone::Clone&gt;::clone (693,709,792 samples, 13.40%)</title><rect x="12.0836%" y="565" width="13.4001%" height="15" fill="rgb(208,32,45)" fg:x="625556739" fg:w="693709792"/><text x="12.3336%" y="575.50">&lt;XLang_Rust::vm::ir:..</text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (141,217,323 samples, 2.73%)</title><rect x="22.7559%" y="549" width="2.7278%" height="15" fill="rgb(207,135,9)" fg:x="1178049208" fg:w="141217323"/><text x="23.0059%" y="559.50">&lt;a..</text></g><g><title>memcpy (27,777,949 samples, 0.54%)</title><rect x="24.9472%" y="533" width="0.5366%" height="15" fill="rgb(206,86,44)" fg:x="1291488582" fg:w="27777949"/><text x="25.1972%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (8,678,115 samples, 0.17%)</title><rect x="25.4837%" y="549" width="0.1676%" height="15" fill="rgb(245,177,15)" fg:x="1319266531" fg:w="8678115"/><text x="25.7337%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (8,678,115 samples, 0.17%)</title><rect x="25.4837%" y="533" width="0.1676%" height="15" fill="rgb(206,64,50)" fg:x="1319266531" fg:w="8678115"/><text x="25.7337%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (8,678,115 samples, 0.17%)</title><rect x="25.4837%" y="517" width="0.1676%" height="15" fill="rgb(234,36,40)" fg:x="1319266531" fg:w="8678115"/><text x="25.7337%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (8,678,115 samples, 0.17%)</title><rect x="25.4837%" y="501" width="0.1676%" height="15" fill="rgb(213,64,8)" fg:x="1319266531" fg:w="8678115"/><text x="25.7337%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (8,678,115 samples, 0.17%)</title><rect x="25.4837%" y="485" width="0.1676%" height="15" fill="rgb(210,75,36)" fg:x="1319266531" fg:w="8678115"/><text x="25.7337%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (8,678,115 samples, 0.17%)</title><rect x="25.4837%" y="469" width="0.1676%" height="15" fill="rgb(229,88,21)" fg:x="1319266531" fg:w="8678115"/><text x="25.7337%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (12,101,127 samples, 0.23%)</title><rect x="25.4837%" y="565" width="0.2338%" height="15" fill="rgb(252,204,47)" fg:x="1319266531" fg:w="12101127"/><text x="25.7337%" y="575.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (3,423,012 samples, 0.07%)</title><rect x="25.6514%" y="549" width="0.0661%" height="15" fill="rgb(208,77,27)" fg:x="1327944646" fg:w="3423012"/><text x="25.9014%" y="559.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (3,423,012 samples, 0.07%)</title><rect x="25.6514%" y="533" width="0.0661%" height="15" fill="rgb(221,76,26)" fg:x="1327944646" fg:w="3423012"/><text x="25.9014%" y="543.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (48,322,961 samples, 0.93%)</title><rect x="25.7175%" y="565" width="0.9334%" height="15" fill="rgb(225,139,18)" fg:x="1331367658" fg:w="48322961"/><text x="25.9675%" y="575.50"></text></g><g><title>&lt;XLang_Rust::vm::executor::variable::VMStackObject as core::clone::Clone&gt;::clone (1,780,633 samples, 0.03%)</title><rect x="35.5096%" y="549" width="0.0344%" height="15" fill="rgb(230,137,11)" fg:x="1838294736" fg:w="1780633"/><text x="35.7596%" y="559.50"></text></g><g><title>&lt;XLang_Rust::vm::gc::gc::GCRef as core::clone::Clone&gt;::clone (1,780,633 samples, 0.03%)</title><rect x="35.5096%" y="533" width="0.0344%" height="15" fill="rgb(212,28,1)" fg:x="1838294736" fg:w="1780633"/><text x="35.7596%" y="543.50"></text></g><g><title>&lt;XLang_Rust::vm::ir::DebugInfo as core::clone::Clone&gt;::clone (3,487,057 samples, 0.07%)</title><rect x="35.5440%" y="549" width="0.0674%" height="15" fill="rgb(248,164,17)" fg:x="1840075369" fg:w="3487057"/><text x="35.7940%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (6,914,807 samples, 0.13%)</title><rect x="35.6113%" y="549" width="0.1336%" height="15" fill="rgb(222,171,42)" fg:x="1843562426" fg:w="6914807"/><text x="35.8613%" y="559.50"></text></g><g><title>alloc::string::String::as_str (6,914,807 samples, 0.13%)</title><rect x="35.6113%" y="533" width="0.1336%" height="15" fill="rgb(243,84,45)" fg:x="1843562426" fg:w="6914807"/><text x="35.8613%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (6,914,807 samples, 0.13%)</title><rect x="35.6113%" y="517" width="0.1336%" height="15" fill="rgb(252,49,23)" fg:x="1843562426" fg:w="6914807"/><text x="35.8613%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (6,914,807 samples, 0.13%)</title><rect x="35.6113%" y="501" width="0.1336%" height="15" fill="rgb(215,19,7)" fg:x="1843562426" fg:w="6914807"/><text x="35.8613%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (6,914,807 samples, 0.13%)</title><rect x="35.6113%" y="485" width="0.1336%" height="15" fill="rgb(238,81,41)" fg:x="1843562426" fg:w="6914807"/><text x="35.8613%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (6,914,807 samples, 0.13%)</title><rect x="35.6113%" y="469" width="0.1336%" height="15" fill="rgb(210,199,37)" fg:x="1843562426" fg:w="6914807"/><text x="35.8613%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (6,914,807 samples, 0.13%)</title><rect x="35.6113%" y="453" width="0.1336%" height="15" fill="rgb(244,192,49)" fg:x="1843562426" fg:w="6914807"/><text x="35.8613%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (6,820,755 samples, 0.13%)</title><rect x="35.7449%" y="549" width="0.1318%" height="15" fill="rgb(226,211,11)" fg:x="1850477233" fg:w="6820755"/><text x="35.9949%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (6,820,755 samples, 0.13%)</title><rect x="35.7449%" y="533" width="0.1318%" height="15" fill="rgb(236,162,54)" fg:x="1850477233" fg:w="6820755"/><text x="35.9949%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1,737,999 samples, 0.03%)</title><rect x="35.8767%" y="549" width="0.0336%" height="15" fill="rgb(220,229,9)" fg:x="1857297988" fg:w="1737999"/><text x="36.1267%" y="559.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1,737,999 samples, 0.03%)</title><rect x="35.8767%" y="533" width="0.0336%" height="15" fill="rgb(250,87,22)" fg:x="1857297988" fg:w="1737999"/><text x="36.1267%" y="543.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1,737,999 samples, 0.03%)</title><rect x="35.8767%" y="517" width="0.0336%" height="15" fill="rgb(239,43,17)" fg:x="1857297988" fg:w="1737999"/><text x="36.1267%" y="527.50"></text></g><g><title>&lt;isize as core::ops::arith::AddAssign&lt;&amp;isize&gt;&gt;::add_assign (5,191,946 samples, 0.10%)</title><rect x="35.9102%" y="549" width="0.1003%" height="15" fill="rgb(231,177,25)" fg:x="1859035987" fg:w="5191946"/><text x="36.1602%" y="559.50"></text></g><g><title>&lt;isize as core::ops::arith::AddAssign&gt;::add_assign (1,739,822 samples, 0.03%)</title><rect x="35.9769%" y="533" width="0.0336%" height="15" fill="rgb(219,179,1)" fg:x="1862488111" fg:w="1739822"/><text x="36.2269%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (1,734,467 samples, 0.03%)</title><rect x="36.7770%" y="533" width="0.0335%" height="15" fill="rgb(238,219,53)" fg:x="1903905476" fg:w="1734467"/><text x="37.0270%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_slice (1,734,467 samples, 0.03%)</title><rect x="36.7770%" y="517" width="0.0335%" height="15" fill="rgb(232,167,36)" fg:x="1903905476" fg:w="1734467"/><text x="37.0270%" y="527.50"></text></g><g><title>&lt;XLang_Rust::vm::executor::variable::VMNativeFunction as XLang_Rust::vm::gc::gc::GCObject&gt;::get_traceable (1,747,076 samples, 0.03%)</title><rect x="36.9421%" y="517" width="0.0337%" height="15" fill="rgb(244,19,51)" fg:x="1912453649" fg:w="1747076"/><text x="37.1921%" y="527.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCRef::clone_ref (25,853,982 samples, 0.50%)</title><rect x="36.8105%" y="533" width="0.4994%" height="15" fill="rgb(224,6,22)" fg:x="1905639943" fg:w="25853982"/><text x="37.0605%" y="543.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCRef::is_online (17,293,200 samples, 0.33%)</title><rect x="36.9758%" y="517" width="0.3340%" height="15" fill="rgb(224,145,5)" fg:x="1914200725" fg:w="17293200"/><text x="37.2258%" y="527.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCRef::get_const_traceable (15,558,104 samples, 0.30%)</title><rect x="37.0094%" y="501" width="0.3005%" height="15" fill="rgb(234,130,49)" fg:x="1915935821" fg:w="15558104"/><text x="37.2594%" y="511.50"></text></g><g><title>&lt;XLang_Rust::vm::executor::variable::VMNativeFunction as XLang_Rust::vm::gc::gc::GCObject&gt;::get_const_traceable (8,667,729 samples, 0.17%)</title><rect x="37.1425%" y="485" width="0.1674%" height="15" fill="rgb(254,6,2)" fg:x="1922826196" fg:w="8667729"/><text x="37.3925%" y="495.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (3,448,038 samples, 0.07%)</title><rect x="37.9119%" y="453" width="0.0666%" height="15" fill="rgb(208,96,46)" fg:x="1962660304" fg:w="3448038"/><text x="38.1619%" y="463.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (3,448,038 samples, 0.07%)</title><rect x="37.9119%" y="437" width="0.0666%" height="15" fill="rgb(239,3,39)" fg:x="1962660304" fg:w="3448038"/><text x="38.1619%" y="447.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (3,448,038 samples, 0.07%)</title><rect x="37.9119%" y="421" width="0.0666%" height="15" fill="rgb(233,210,1)" fg:x="1962660304" fg:w="3448038"/><text x="38.1619%" y="431.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1,724,173 samples, 0.03%)</title><rect x="37.9785%" y="453" width="0.0333%" height="15" fill="rgb(244,137,37)" fg:x="1966108342" fg:w="1724173"/><text x="38.2285%" y="463.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (1,724,173 samples, 0.03%)</title><rect x="37.9785%" y="437" width="0.0333%" height="15" fill="rgb(240,136,2)" fg:x="1966108342" fg:w="1724173"/><text x="38.2285%" y="447.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (1,724,173 samples, 0.03%)</title><rect x="37.9785%" y="421" width="0.0333%" height="15" fill="rgb(239,18,37)" fg:x="1966108342" fg:w="1724173"/><text x="38.2285%" y="431.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (1,724,173 samples, 0.03%)</title><rect x="37.9785%" y="405" width="0.0333%" height="15" fill="rgb(218,185,22)" fg:x="1966108342" fg:w="1724173"/><text x="38.2285%" y="415.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (34,636,351 samples, 0.67%)</title><rect x="38.0453%" y="373" width="0.6691%" height="15" fill="rgb(225,218,4)" fg:x="1969567516" fg:w="34636351"/><text x="38.2953%" y="383.50"></text></g><g><title>core::hash::sip::u8to64_le (22,474,395 samples, 0.43%)</title><rect x="38.2803%" y="357" width="0.4341%" height="15" fill="rgb(230,182,32)" fg:x="1981729472" fg:w="22474395"/><text x="38.5303%" y="367.50"></text></g><g><title>hashbrown::map::make_hash (116,964,719 samples, 2.26%)</title><rect x="37.5440%" y="485" width="2.2594%" height="15" fill="rgb(242,56,43)" fg:x="1943611870" fg:w="116964719"/><text x="37.7940%" y="495.50">h..</text></g><g><title>core::hash::BuildHasher::hash_one (116,964,719 samples, 2.26%)</title><rect x="37.5440%" y="469" width="2.2594%" height="15" fill="rgb(233,99,24)" fg:x="1943611870" fg:w="116964719"/><text x="37.7940%" y="479.50">c..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (92,744,074 samples, 1.79%)</title><rect x="38.0118%" y="453" width="1.7915%" height="15" fill="rgb(234,209,42)" fg:x="1967832515" fg:w="92744074"/><text x="38.2618%" y="463.50">c..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (92,744,074 samples, 1.79%)</title><rect x="38.0118%" y="437" width="1.7915%" height="15" fill="rgb(227,7,12)" fg:x="1967832515" fg:w="92744074"/><text x="38.2618%" y="447.50">c..</text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (92,744,074 samples, 1.79%)</title><rect x="38.0118%" y="421" width="1.7915%" height="15" fill="rgb(245,203,43)" fg:x="1967832515" fg:w="92744074"/><text x="38.2618%" y="431.50">&lt;..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (92,744,074 samples, 1.79%)</title><rect x="38.0118%" y="405" width="1.7915%" height="15" fill="rgb(238,205,33)" fg:x="1967832515" fg:w="92744074"/><text x="38.2618%" y="415.50">&lt;..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (92,744,074 samples, 1.79%)</title><rect x="38.0118%" y="389" width="1.7915%" height="15" fill="rgb(231,56,7)" fg:x="1967832515" fg:w="92744074"/><text x="38.2618%" y="399.50">&lt;..</text></g><g><title>core::hash::Hasher::write_u8 (56,372,722 samples, 1.09%)</title><rect x="38.7144%" y="373" width="1.0889%" height="15" fill="rgb(244,186,29)" fg:x="2004203867" fg:w="56372722"/><text x="38.9644%" y="383.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (54,657,031 samples, 1.06%)</title><rect x="38.7475%" y="357" width="1.0558%" height="15" fill="rgb(234,111,31)" fg:x="2005919558" fg:w="54657031"/><text x="38.9975%" y="367.50"></text></g><g><title>core::hash::sip::u8to64_le (6,894,133 samples, 0.13%)</title><rect x="39.6702%" y="341" width="0.1332%" height="15" fill="rgb(241,149,10)" fg:x="2053682456" fg:w="6894133"/><text x="39.9202%" y="351.50"></text></g><g><title>&lt;hashbrown::control::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (25,920,961 samples, 0.50%)</title><rect x="39.8033%" y="437" width="0.5007%" height="15" fill="rgb(249,206,44)" fg:x="2060576589" fg:w="25920961"/><text x="40.0533%" y="447.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::lowest_set_bit (25,920,961 samples, 0.50%)</title><rect x="39.8033%" y="421" width="0.5007%" height="15" fill="rgb(251,153,30)" fg:x="2060576589" fg:w="25920961"/><text x="40.0533%" y="431.50"></text></g><g><title>core::intrinsics::likely (1,736,358 samples, 0.03%)</title><rect x="40.3040%" y="437" width="0.0335%" height="15" fill="rgb(239,152,38)" fg:x="2086497550" fg:w="1736358"/><text x="40.5540%" y="447.50"></text></g><g><title>hashbrown::control::group::neon::Group::load (1,769,026 samples, 0.03%)</title><rect x="40.3376%" y="437" width="0.0342%" height="15" fill="rgb(249,139,47)" fg:x="2088233908" fg:w="1769026"/><text x="40.5876%" y="447.50"></text></g><g><title>core::core_arch::aarch64::neon::vld1_u8 (1,769,026 samples, 0.03%)</title><rect x="40.3376%" y="421" width="0.0342%" height="15" fill="rgb(244,64,35)" fg:x="2088233908" fg:w="1769026"/><text x="40.5876%" y="431.50"></text></g><g><title>core::ptr::read_unaligned (1,769,026 samples, 0.03%)</title><rect x="40.3376%" y="405" width="0.0342%" height="15" fill="rgb(216,46,15)" fg:x="2088233908" fg:w="1769026"/><text x="40.5876%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,769,026 samples, 0.03%)</title><rect x="40.3376%" y="389" width="0.0342%" height="15" fill="rgb(250,74,19)" fg:x="2088233908" fg:w="1769026"/><text x="40.5876%" y="399.50"></text></g><g><title>hashbrown::control::group::neon::Group::match_tag (56,984,485 samples, 1.10%)</title><rect x="40.3717%" y="437" width="1.1007%" height="15" fill="rgb(249,42,33)" fg:x="2090002934" fg:w="56984485"/><text x="40.6217%" y="447.50"></text></g><g><title>core::core_arch::arm_shared::neon::generated::vceq_u8 (56,984,485 samples, 1.10%)</title><rect x="40.3717%" y="421" width="1.1007%" height="15" fill="rgb(242,149,17)" fg:x="2090002934" fg:w="56984485"/><text x="40.6217%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (65,124,820 samples, 1.26%)</title><rect x="41.4725%" y="437" width="1.2580%" height="15" fill="rgb(244,29,21)" fg:x="2146987419" fg:w="65124820"/><text x="41.7225%" y="447.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (65,124,820 samples, 1.26%)</title><rect x="41.4725%" y="421" width="1.2580%" height="15" fill="rgb(220,130,37)" fg:x="2146987419" fg:w="65124820"/><text x="41.7225%" y="431.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (65,124,820 samples, 1.26%)</title><rect x="41.4725%" y="405" width="1.2580%" height="15" fill="rgb(211,67,2)" fg:x="2146987419" fg:w="65124820"/><text x="41.7225%" y="415.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (56,469,971 samples, 1.09%)</title><rect x="41.6397%" y="389" width="1.0908%" height="15" fill="rgb(235,68,52)" fg:x="2155642268" fg:w="56469971"/><text x="41.8897%" y="399.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (56,469,971 samples, 1.09%)</title><rect x="41.6397%" y="373" width="1.0908%" height="15" fill="rgb(246,142,3)" fg:x="2155642268" fg:w="56469971"/><text x="41.8897%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (56,469,971 samples, 1.09%)</title><rect x="41.6397%" y="357" width="1.0908%" height="15" fill="rgb(241,25,7)" fg:x="2155642268" fg:w="56469971"/><text x="41.8897%" y="367.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (56,469,971 samples, 1.09%)</title><rect x="41.6397%" y="341" width="1.0908%" height="15" fill="rgb(242,119,39)" fg:x="2155642268" fg:w="56469971"/><text x="41.8897%" y="351.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (56,469,971 samples, 1.09%)</title><rect x="41.6397%" y="325" width="1.0908%" height="15" fill="rgb(241,98,45)" fg:x="2155642268" fg:w="56469971"/><text x="41.8897%" y="335.50"></text></g><g><title>memcmp (25,354,115 samples, 0.49%)</title><rect x="42.2407%" y="309" width="0.4898%" height="15" fill="rgb(254,28,30)" fg:x="2186758124" fg:w="25354115"/><text x="42.4907%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (160,232,284 samples, 3.10%)</title><rect x="39.8033%" y="485" width="3.0951%" height="15" fill="rgb(241,142,54)" fg:x="2060576589" fg:w="160232284"/><text x="40.0533%" y="495.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (160,232,284 samples, 3.10%)</title><rect x="39.8033%" y="469" width="3.0951%" height="15" fill="rgb(222,85,15)" fg:x="2060576589" fg:w="160232284"/><text x="40.0533%" y="479.50">has..</text></g><g><title>hashbrown::raw::RawTableInner::find_inner (160,232,284 samples, 3.10%)</title><rect x="39.8033%" y="453" width="3.0951%" height="15" fill="rgb(210,85,47)" fg:x="2060576589" fg:w="160232284"/><text x="40.0533%" y="463.50">has..</text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (8,696,634 samples, 0.17%)</title><rect x="42.7305%" y="437" width="0.1680%" height="15" fill="rgb(224,206,25)" fg:x="2212112239" fg:w="8696634"/><text x="42.9805%" y="447.50"></text></g><g><title>XLang_Rust::vm::executor::context::Context::get_var (358,295,688 samples, 6.92%)</title><rect x="36.0105%" y="549" width="6.9211%" height="15" fill="rgb(243,201,19)" fg:x="1864227933" fg:w="358295688"/><text x="36.2605%" y="559.50">XLang_Rus..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (291,029,696 samples, 5.62%)</title><rect x="37.3099%" y="533" width="5.6217%" height="15" fill="rgb(236,59,4)" fg:x="1931493925" fg:w="291029696"/><text x="37.5599%" y="543.50">std::co..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (291,029,696 samples, 5.62%)</title><rect x="37.3099%" y="517" width="5.6217%" height="15" fill="rgb(254,179,45)" fg:x="1931493925" fg:w="291029696"/><text x="37.5599%" y="527.50">hashbro..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (291,029,696 samples, 5.62%)</title><rect x="37.3099%" y="501" width="5.6217%" height="15" fill="rgb(226,14,10)" fg:x="1931493925" fg:w="291029696"/><text x="37.5599%" y="511.50">hashbro..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::is_empty (1,714,748 samples, 0.03%)</title><rect x="42.8985%" y="485" width="0.0331%" height="15" fill="rgb(244,27,41)" fg:x="2220808873" fg:w="1714748"/><text x="43.1485%" y="495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::len (1,714,748 samples, 0.03%)</title><rect x="42.8985%" y="469" width="0.0331%" height="15" fill="rgb(235,35,32)" fg:x="2220808873" fg:w="1714748"/><text x="43.1485%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity (8,668,905 samples, 0.17%)</title><rect x="43.0974%" y="517" width="0.1675%" height="15" fill="rgb(218,68,31)" fg:x="2231106567" fg:w="8668905"/><text x="43.3474%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::capacity (8,668,905 samples, 0.17%)</title><rect x="43.0974%" y="501" width="0.1675%" height="15" fill="rgb(207,120,37)" fg:x="2231106567" fg:w="8668905"/><text x="43.3474%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1,747,760 samples, 0.03%)</title><rect x="43.2648%" y="517" width="0.0338%" height="15" fill="rgb(227,98,0)" fg:x="2239775472" fg:w="1747760"/><text x="43.5148%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1,747,760 samples, 0.03%)</title><rect x="43.2648%" y="501" width="0.0338%" height="15" fill="rgb(207,7,3)" fg:x="2239775472" fg:w="1747760"/><text x="43.5148%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (1,747,760 samples, 0.03%)</title><rect x="43.2648%" y="485" width="0.0338%" height="15" fill="rgb(206,98,19)" fg:x="2239775472" fg:w="1747760"/><text x="43.5148%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (1,747,760 samples, 0.03%)</title><rect x="43.2648%" y="469" width="0.0338%" height="15" fill="rgb(217,5,26)" fg:x="2239775472" fg:w="1747760"/><text x="43.5148%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (25,984,429 samples, 0.50%)</title><rect x="43.0649%" y="533" width="0.5019%" height="15" fill="rgb(235,190,38)" fg:x="2229424578" fg:w="25984429"/><text x="43.3149%" y="543.50"></text></g><g><title>core::ptr::write (13,885,775 samples, 0.27%)</title><rect x="43.2986%" y="517" width="0.2682%" height="15" fill="rgb(247,86,24)" fg:x="2241523232" fg:w="13885775"/><text x="43.5486%" y="527.50"></text></g><g><title>XLang_Rust::vm::executor::context::Context::new_frame (34,600,662 samples, 0.67%)</title><rect x="42.9316%" y="549" width="0.6684%" height="15" fill="rgb(205,101,16)" fg:x="2222523621" fg:w="34600662"/><text x="43.1816%" y="559.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V&gt;::new (1,715,276 samples, 0.03%)</title><rect x="43.5668%" y="533" width="0.0331%" height="15" fill="rgb(246,168,33)" fg:x="2255409007" fg:w="1715276"/><text x="43.8168%" y="543.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (1,715,276 samples, 0.03%)</title><rect x="43.5668%" y="517" width="0.0331%" height="15" fill="rgb(231,114,1)" fg:x="2255409007" fg:w="1715276"/><text x="43.8168%" y="527.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::default::Default&gt;::default (1,715,276 samples, 0.03%)</title><rect x="43.5668%" y="501" width="0.0331%" height="15" fill="rgb(207,184,53)" fg:x="2255409007" fg:w="1715276"/><text x="43.8168%" y="511.50"></text></g><g><title>std::hash::random::RandomState::new (1,715,276 samples, 0.03%)</title><rect x="43.5668%" y="485" width="0.0331%" height="15" fill="rgb(224,95,51)" fg:x="2255409007" fg:w="1715276"/><text x="43.8168%" y="495.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1,715,276 samples, 0.03%)</title><rect x="43.5668%" y="469" width="0.0331%" height="15" fill="rgb(212,188,45)" fg:x="2255409007" fg:w="1715276"/><text x="43.8168%" y="479.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1,715,276 samples, 0.03%)</title><rect x="43.5668%" y="453" width="0.0331%" height="15" fill="rgb(223,154,38)" fg:x="2255409007" fg:w="1715276"/><text x="43.8168%" y="463.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1,715,276 samples, 0.03%)</title><rect x="43.5668%" y="437" width="0.0331%" height="15" fill="rgb(251,22,52)" fg:x="2255409007" fg:w="1715276"/><text x="43.8168%" y="447.50"></text></g><g><title>std::hash::random::RandomState::new::KEYS::_{{constant}}::_{{closure}} (1,715,276 samples, 0.03%)</title><rect x="43.5668%" y="421" width="0.0331%" height="15" fill="rgb(229,209,22)" fg:x="2255409007" fg:w="1715276"/><text x="43.8168%" y="431.50"></text></g><g><title>std::sys::thread_local::native::lazy::Storage&lt;T,D&gt;::get_or_init (1,715,276 samples, 0.03%)</title><rect x="43.5668%" y="405" width="0.0331%" height="15" fill="rgb(234,138,34)" fg:x="2255409007" fg:w="1715276"/><text x="43.8168%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (6,934,355 samples, 0.13%)</title><rect x="43.7004%" y="533" width="0.1339%" height="15" fill="rgb(212,95,11)" fg:x="2262324903" fg:w="6934355"/><text x="43.9504%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (6,934,355 samples, 0.13%)</title><rect x="43.7004%" y="517" width="0.1339%" height="15" fill="rgb(240,179,47)" fg:x="2262324903" fg:w="6934355"/><text x="43.9504%" y="527.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,739,518 samples, 0.03%)</title><rect x="43.8344%" y="533" width="0.0336%" height="15" fill="rgb(240,163,11)" fg:x="2269259258" fg:w="1739518"/><text x="44.0844%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::is_empty (3,451,782 samples, 0.07%)</title><rect x="43.8680%" y="533" width="0.0667%" height="15" fill="rgb(236,37,12)" fg:x="2270998776" fg:w="3451782"/><text x="44.1180%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (3,451,782 samples, 0.07%)</title><rect x="43.8680%" y="517" width="0.0667%" height="15" fill="rgb(232,164,16)" fg:x="2270998776" fg:w="3451782"/><text x="44.1180%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (5,156,368 samples, 0.10%)</title><rect x="43.9346%" y="533" width="0.0996%" height="15" fill="rgb(244,205,15)" fg:x="2274450558" fg:w="5156368"/><text x="44.1846%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (1,736,375 samples, 0.03%)</title><rect x="44.0007%" y="517" width="0.0335%" height="15" fill="rgb(223,117,47)" fg:x="2277870551" fg:w="1736375"/><text x="44.2507%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1,736,375 samples, 0.03%)</title><rect x="44.0007%" y="501" width="0.0335%" height="15" fill="rgb(244,107,35)" fg:x="2277870551" fg:w="1736375"/><text x="44.2507%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (1,736,375 samples, 0.03%)</title><rect x="44.0007%" y="485" width="0.0335%" height="15" fill="rgb(205,140,8)" fg:x="2277870551" fg:w="1736375"/><text x="44.2507%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (1,736,375 samples, 0.03%)</title><rect x="44.0007%" y="469" width="0.0335%" height="15" fill="rgb(228,84,46)" fg:x="2277870551" fg:w="1736375"/><text x="44.2507%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (32,973,821 samples, 0.64%)</title><rect x="44.0342%" y="533" width="0.6369%" height="15" fill="rgb(254,188,9)" fg:x="2279606926" fg:w="32973821"/><text x="44.2842%" y="543.50"></text></g><g><title>core::ptr::write (32,973,821 samples, 0.64%)</title><rect x="44.0342%" y="517" width="0.6369%" height="15" fill="rgb(206,112,54)" fg:x="2279606926" fg:w="32973821"/><text x="44.2842%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::truncate (1,746,204 samples, 0.03%)</title><rect x="44.6712%" y="533" width="0.0337%" height="15" fill="rgb(216,84,49)" fg:x="2312580747" fg:w="1746204"/><text x="44.9212%" y="543.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1,739,186 samples, 0.03%)</title><rect x="44.7049%" y="533" width="0.0336%" height="15" fill="rgb(214,194,35)" fg:x="2314326951" fg:w="1739186"/><text x="44.9549%" y="543.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1,739,186 samples, 0.03%)</title><rect x="44.7049%" y="517" width="0.0336%" height="15" fill="rgb(249,28,3)" fg:x="2314326951" fg:w="1739186"/><text x="44.9549%" y="527.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (12,036,017 samples, 0.23%)</title><rect x="44.7385%" y="533" width="0.2325%" height="15" fill="rgb(222,56,52)" fg:x="2316066137" fg:w="12036017"/><text x="44.9885%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (12,036,017 samples, 0.23%)</title><rect x="44.7385%" y="517" width="0.2325%" height="15" fill="rgb(245,217,50)" fg:x="2316066137" fg:w="12036017"/><text x="44.9885%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (10,305,586 samples, 0.20%)</title><rect x="44.7719%" y="501" width="0.1991%" height="15" fill="rgb(213,201,24)" fg:x="2317796568" fg:w="10305586"/><text x="45.0219%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1,673,877 samples, 0.03%)</title><rect x="44.9387%" y="485" width="0.0323%" height="15" fill="rgb(248,116,28)" fg:x="2326428277" fg:w="1673877"/><text x="45.1887%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,673,877 samples, 0.03%)</title><rect x="44.9387%" y="469" width="0.0323%" height="15" fill="rgb(219,72,43)" fg:x="2326428277" fg:w="1673877"/><text x="45.1887%" y="479.50"></text></g><g><title>&lt;std::collections::hash::map::Values&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,673,877 samples, 0.03%)</title><rect x="44.9387%" y="453" width="0.0323%" height="15" fill="rgb(209,138,14)" fg:x="2326428277" fg:w="1673877"/><text x="45.1887%" y="463.50"></text></g><g><title>&lt;std::collections::hash::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,673,877 samples, 0.03%)</title><rect x="44.9387%" y="437" width="0.0323%" height="15" fill="rgb(222,18,33)" fg:x="2326428277" fg:w="1673877"/><text x="45.1887%" y="447.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,673,877 samples, 0.03%)</title><rect x="44.9387%" y="421" width="0.0323%" height="15" fill="rgb(213,199,7)" fg:x="2326428277" fg:w="1673877"/><text x="45.1887%" y="431.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,673,877 samples, 0.03%)</title><rect x="44.9387%" y="405" width="0.0323%" height="15" fill="rgb(250,110,10)" fg:x="2326428277" fg:w="1673877"/><text x="45.1887%" y="415.50"></text></g><g><title>core::option::Option&lt;&amp;T&gt;::cloned (1,750,453 samples, 0.03%)</title><rect x="44.9710%" y="533" width="0.0338%" height="15" fill="rgb(248,123,6)" fg:x="2328102154" fg:w="1750453"/><text x="45.2210%" y="543.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for usize&gt;::clone (1,750,453 samples, 0.03%)</title><rect x="44.9710%" y="517" width="0.0338%" height="15" fill="rgb(206,91,31)" fg:x="2328102154" fg:w="1750453"/><text x="45.2210%" y="527.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (5,203,602 samples, 0.10%)</title><rect x="45.0048%" y="533" width="0.1005%" height="15" fill="rgb(211,154,13)" fg:x="2329852607" fg:w="5203602"/><text x="45.2548%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;(std::collections::hash::map::HashMap&lt;alloc::string::String,XLang_Rust::vm::gc::gc::GCRef&gt;,bool,usize,bool)&gt;&gt; (1,751,937 samples, 0.03%)</title><rect x="45.1053%" y="533" width="0.0338%" height="15" fill="rgb(225,148,7)" fg:x="2335056209" fg:w="1751937"/><text x="45.3553%" y="543.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::new (5,169,080 samples, 0.10%)</title><rect x="45.1392%" y="453" width="0.0998%" height="15" fill="rgb(220,160,43)" fg:x="2336808146" fg:w="5169080"/><text x="45.3892%" y="463.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (5,169,080 samples, 0.10%)</title><rect x="45.1392%" y="437" width="0.0998%" height="15" fill="rgb(213,52,39)" fg:x="2336808146" fg:w="5169080"/><text x="45.3892%" y="447.50"></text></g><g><title>XLang_Rust::vm::executor::context::Context::pop_frame_except_top (86,652,570 samples, 1.67%)</title><rect x="43.6000%" y="549" width="1.6738%" height="15" fill="rgb(243,137,7)" fg:x="2257124283" fg:w="86652570"/><text x="43.8500%" y="559.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::values (6,968,707 samples, 0.13%)</title><rect x="45.1392%" y="533" width="0.1346%" height="15" fill="rgb(230,79,13)" fg:x="2336808146" fg:w="6968707"/><text x="45.3892%" y="543.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::iter (6,968,707 samples, 0.13%)</title><rect x="45.1392%" y="517" width="0.1346%" height="15" fill="rgb(247,105,23)" fg:x="2336808146" fg:w="6968707"/><text x="45.3892%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (6,968,707 samples, 0.13%)</title><rect x="45.1392%" y="501" width="0.1346%" height="15" fill="rgb(223,179,41)" fg:x="2336808146" fg:w="6968707"/><text x="45.3892%" y="511.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter (6,968,707 samples, 0.13%)</title><rect x="45.1392%" y="485" width="0.1346%" height="15" fill="rgb(218,9,34)" fg:x="2336808146" fg:w="6968707"/><text x="45.3892%" y="495.50"></text></g><g><title>hashbrown::raw::RawTableInner::iter (6,968,707 samples, 0.13%)</title><rect x="45.1392%" y="469" width="0.1346%" height="15" fill="rgb(222,106,8)" fg:x="2336808146" fg:w="6968707"/><text x="45.3892%" y="479.50"></text></g><g><title>hashbrown::raw::RawTableInner::data_end (1,799,627 samples, 0.03%)</title><rect x="45.2390%" y="453" width="0.0348%" height="15" fill="rgb(211,220,0)" fg:x="2341977226" fg:w="1799627"/><text x="45.4890%" y="463.50"></text></g><g><title>core::ops::function::FnOnce::call_once (6,836,282 samples, 0.13%)</title><rect x="45.7372%" y="421" width="0.1321%" height="15" fill="rgb(229,52,16)" fg:x="2367768872" fg:w="6836282"/><text x="45.9872%" y="431.50"></text></g><g><title>std::hash::random::RandomState::new::KEYS::_{{constant}}::_{{closure}} (6,836,282 samples, 0.13%)</title><rect x="45.7372%" y="405" width="0.1321%" height="15" fill="rgb(212,155,18)" fg:x="2367768872" fg:w="6836282"/><text x="45.9872%" y="415.50"></text></g><g><title>std::sys::thread_local::native::lazy::Storage&lt;T,D&gt;::get_or_init (6,836,282 samples, 0.13%)</title><rect x="45.7372%" y="389" width="0.1321%" height="15" fill="rgb(242,21,14)" fg:x="2367768872" fg:w="6836282"/><text x="45.9872%" y="399.50"></text></g><g><title>XLang_Rust::vm::executor::variable::VMBoolean::new (32,222,704 samples, 0.62%)</title><rect x="45.2738%" y="549" width="0.6224%" height="15" fill="rgb(222,19,48)" fg:x="2343776853" fg:w="32222704"/><text x="45.5238%" y="559.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCTraceable::new (28,735,855 samples, 0.56%)</title><rect x="45.3411%" y="533" width="0.5551%" height="15" fill="rgb(232,45,27)" fg:x="2347263702" fg:w="28735855"/><text x="45.5911%" y="543.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V&gt;::new (8,230,685 samples, 0.16%)</title><rect x="45.7372%" y="517" width="0.1590%" height="15" fill="rgb(249,103,42)" fg:x="2367768872" fg:w="8230685"/><text x="45.9872%" y="527.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (8,230,685 samples, 0.16%)</title><rect x="45.7372%" y="501" width="0.1590%" height="15" fill="rgb(246,81,33)" fg:x="2367768872" fg:w="8230685"/><text x="45.9872%" y="511.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::default::Default&gt;::default (8,230,685 samples, 0.16%)</title><rect x="45.7372%" y="485" width="0.1590%" height="15" fill="rgb(252,33,42)" fg:x="2367768872" fg:w="8230685"/><text x="45.9872%" y="495.50"></text></g><g><title>std::hash::random::RandomState::new (8,230,685 samples, 0.16%)</title><rect x="45.7372%" y="469" width="0.1590%" height="15" fill="rgb(209,212,41)" fg:x="2367768872" fg:w="8230685"/><text x="45.9872%" y="479.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (8,230,685 samples, 0.16%)</title><rect x="45.7372%" y="453" width="0.1590%" height="15" fill="rgb(207,154,6)" fg:x="2367768872" fg:w="8230685"/><text x="45.9872%" y="463.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (8,230,685 samples, 0.16%)</title><rect x="45.7372%" y="437" width="0.1590%" height="15" fill="rgb(223,64,47)" fg:x="2367768872" fg:w="8230685"/><text x="45.9872%" y="447.50"></text></g><g><title>std::hash::random::RandomState::new::_{{closure}} (1,394,403 samples, 0.03%)</title><rect x="45.8693%" y="421" width="0.0269%" height="15" fill="rgb(211,161,38)" fg:x="2374605154" fg:w="1394403"/><text x="46.1193%" y="431.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (1,394,403 samples, 0.03%)</title><rect x="45.8693%" y="405" width="0.0269%" height="15" fill="rgb(219,138,40)" fg:x="2374605154" fg:w="1394403"/><text x="46.1193%" y="415.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (1,394,403 samples, 0.03%)</title><rect x="45.8693%" y="389" width="0.0269%" height="15" fill="rgb(241,228,46)" fg:x="2374605154" fg:w="1394403"/><text x="46.1193%" y="399.50"></text></g><g><title>core::mem::replace (1,394,403 samples, 0.03%)</title><rect x="45.8693%" y="373" width="0.0269%" height="15" fill="rgb(223,209,38)" fg:x="2374605154" fg:w="1394403"/><text x="46.1193%" y="383.50"></text></g><g><title>core::ptr::write (1,394,403 samples, 0.03%)</title><rect x="45.8693%" y="357" width="0.0269%" height="15" fill="rgb(236,164,45)" fg:x="2374605154" fg:w="1394403"/><text x="46.1193%" y="367.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1,740,007 samples, 0.03%)</title><rect x="46.6985%" y="421" width="0.0336%" height="15" fill="rgb(231,15,5)" fg:x="2417531298" fg:w="1740007"/><text x="46.9485%" y="431.50"></text></g><g><title>std::hash::random::RandomState::new::KEYS::_{{constant}}::_{{closure}} (1,740,007 samples, 0.03%)</title><rect x="46.6985%" y="405" width="0.0336%" height="15" fill="rgb(252,35,15)" fg:x="2417531298" fg:w="1740007"/><text x="46.9485%" y="415.50"></text></g><g><title>std::sys::thread_local::native::lazy::Storage&lt;T,D&gt;::get_or_init (1,740,007 samples, 0.03%)</title><rect x="46.6985%" y="389" width="0.0336%" height="15" fill="rgb(248,181,18)" fg:x="2417531298" fg:w="1740007"/><text x="46.9485%" y="399.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (1,723,477 samples, 0.03%)</title><rect x="46.7321%" y="405" width="0.0333%" height="15" fill="rgb(233,39,42)" fg:x="2419271305" fg:w="1723477"/><text x="46.9821%" y="415.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (1,723,477 samples, 0.03%)</title><rect x="46.7321%" y="389" width="0.0333%" height="15" fill="rgb(238,110,33)" fg:x="2419271305" fg:w="1723477"/><text x="46.9821%" y="399.50"></text></g><g><title>core::mem::replace (1,723,477 samples, 0.03%)</title><rect x="46.7321%" y="373" width="0.0333%" height="15" fill="rgb(233,195,10)" fg:x="2419271305" fg:w="1723477"/><text x="46.9821%" y="383.50"></text></g><g><title>core::ptr::write (1,723,477 samples, 0.03%)</title><rect x="46.7321%" y="357" width="0.0333%" height="15" fill="rgb(254,105,3)" fg:x="2419271305" fg:w="1723477"/><text x="46.9821%" y="367.50"></text></g><g><title>XLang_Rust::vm::executor::variable::VMInt::new (48,461,547 samples, 0.94%)</title><rect x="45.8962%" y="549" width="0.9361%" height="15" fill="rgb(221,225,9)" fg:x="2375999557" fg:w="48461547"/><text x="46.1462%" y="559.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCTraceable::new (43,260,943 samples, 0.84%)</title><rect x="45.9967%" y="533" width="0.8357%" height="15" fill="rgb(224,227,45)" fg:x="2381200161" fg:w="43260943"/><text x="46.2467%" y="543.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V&gt;::new (6,929,806 samples, 0.13%)</title><rect x="46.6985%" y="517" width="0.1339%" height="15" fill="rgb(229,198,43)" fg:x="2417531298" fg:w="6929806"/><text x="46.9485%" y="527.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (6,929,806 samples, 0.13%)</title><rect x="46.6985%" y="501" width="0.1339%" height="15" fill="rgb(206,209,35)" fg:x="2417531298" fg:w="6929806"/><text x="46.9485%" y="511.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::default::Default&gt;::default (6,929,806 samples, 0.13%)</title><rect x="46.6985%" y="485" width="0.1339%" height="15" fill="rgb(245,195,53)" fg:x="2417531298" fg:w="6929806"/><text x="46.9485%" y="495.50"></text></g><g><title>std::hash::random::RandomState::new (6,929,806 samples, 0.13%)</title><rect x="46.6985%" y="469" width="0.1339%" height="15" fill="rgb(240,92,26)" fg:x="2417531298" fg:w="6929806"/><text x="46.9485%" y="479.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (6,929,806 samples, 0.13%)</title><rect x="46.6985%" y="453" width="0.1339%" height="15" fill="rgb(207,40,23)" fg:x="2417531298" fg:w="6929806"/><text x="46.9485%" y="463.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (6,929,806 samples, 0.13%)</title><rect x="46.6985%" y="437" width="0.1339%" height="15" fill="rgb(223,111,35)" fg:x="2417531298" fg:w="6929806"/><text x="46.9485%" y="447.50"></text></g><g><title>std::hash::random::RandomState::new::_{{closure}} (5,189,799 samples, 0.10%)</title><rect x="46.7321%" y="421" width="0.1002%" height="15" fill="rgb(229,147,28)" fg:x="2419271305" fg:w="5189799"/><text x="46.9821%" y="431.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (3,466,322 samples, 0.07%)</title><rect x="46.7654%" y="405" width="0.0670%" height="15" fill="rgb(211,29,28)" fg:x="2420994782" fg:w="3466322"/><text x="47.0154%" y="415.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (5,184,146 samples, 0.10%)</title><rect x="47.2608%" y="405" width="0.1001%" height="15" fill="rgb(228,72,33)" fg:x="2446640415" fg:w="5184146"/><text x="47.5108%" y="415.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::default::Default&gt;::default (8,645,050 samples, 0.17%)</title><rect x="47.2608%" y="485" width="0.1670%" height="15" fill="rgb(205,214,31)" fg:x="2446640415" fg:w="8645050"/><text x="47.5108%" y="495.50"></text></g><g><title>std::hash::random::RandomState::new (8,645,050 samples, 0.17%)</title><rect x="47.2608%" y="469" width="0.1670%" height="15" fill="rgb(224,111,15)" fg:x="2446640415" fg:w="8645050"/><text x="47.5108%" y="479.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (8,645,050 samples, 0.17%)</title><rect x="47.2608%" y="453" width="0.1670%" height="15" fill="rgb(253,21,26)" fg:x="2446640415" fg:w="8645050"/><text x="47.5108%" y="463.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (8,645,050 samples, 0.17%)</title><rect x="47.2608%" y="437" width="0.1670%" height="15" fill="rgb(245,139,43)" fg:x="2446640415" fg:w="8645050"/><text x="47.5108%" y="447.50"></text></g><g><title>std::hash::random::RandomState::new::_{{closure}} (8,645,050 samples, 0.17%)</title><rect x="47.2608%" y="421" width="0.1670%" height="15" fill="rgb(252,170,7)" fg:x="2446640415" fg:w="8645050"/><text x="47.5108%" y="431.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (3,460,904 samples, 0.07%)</title><rect x="47.3609%" y="405" width="0.0669%" height="15" fill="rgb(231,118,14)" fg:x="2451824561" fg:w="3460904"/><text x="47.6109%" y="415.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (3,460,904 samples, 0.07%)</title><rect x="47.3609%" y="389" width="0.0669%" height="15" fill="rgb(238,83,0)" fg:x="2451824561" fg:w="3460904"/><text x="47.6109%" y="399.50"></text></g><g><title>core::mem::replace (3,460,904 samples, 0.07%)</title><rect x="47.3609%" y="373" width="0.0669%" height="15" fill="rgb(221,39,39)" fg:x="2451824561" fg:w="3460904"/><text x="47.6109%" y="383.50"></text></g><g><title>core::ptr::write (3,460,904 samples, 0.07%)</title><rect x="47.3609%" y="357" width="0.0669%" height="15" fill="rgb(222,119,46)" fg:x="2451824561" fg:w="3460904"/><text x="47.6109%" y="367.50"></text></g><g><title>XLang_Rust::vm::executor::variable::VMNull::new (34,250,915 samples, 0.66%)</title><rect x="46.8323%" y="549" width="0.6616%" height="15" fill="rgb(222,165,49)" fg:x="2424461104" fg:w="34250915"/><text x="47.0823%" y="559.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCTraceable::new (30,780,629 samples, 0.59%)</title><rect x="46.8994%" y="533" width="0.5946%" height="15" fill="rgb(219,113,52)" fg:x="2427931390" fg:w="30780629"/><text x="47.1494%" y="543.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V&gt;::new (12,071,604 samples, 0.23%)</title><rect x="47.2608%" y="517" width="0.2332%" height="15" fill="rgb(214,7,15)" fg:x="2446640415" fg:w="12071604"/><text x="47.5108%" y="527.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (12,071,604 samples, 0.23%)</title><rect x="47.2608%" y="501" width="0.2332%" height="15" fill="rgb(235,32,4)" fg:x="2446640415" fg:w="12071604"/><text x="47.5108%" y="511.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::with_hasher (3,426,554 samples, 0.07%)</title><rect x="47.4278%" y="485" width="0.0662%" height="15" fill="rgb(238,90,54)" fg:x="2455285465" fg:w="3426554"/><text x="47.6778%" y="495.50"></text></g><g><title>core::ops::function::FnOnce::call_once (3,426,718 samples, 0.07%)</title><rect x="48.1169%" y="389" width="0.0662%" height="15" fill="rgb(213,208,19)" fg:x="2490960043" fg:w="3426718"/><text x="48.3669%" y="399.50"></text></g><g><title>std::hash::random::RandomState::new::KEYS::_{{constant}}::_{{closure}} (3,426,718 samples, 0.07%)</title><rect x="48.1169%" y="373" width="0.0662%" height="15" fill="rgb(233,156,4)" fg:x="2490960043" fg:w="3426718"/><text x="48.3669%" y="383.50"></text></g><g><title>std::sys::thread_local::native::lazy::Storage&lt;T,D&gt;::get_or_init (3,426,718 samples, 0.07%)</title><rect x="48.1169%" y="357" width="0.0662%" height="15" fill="rgb(207,194,5)" fg:x="2490960043" fg:w="3426718"/><text x="48.3669%" y="367.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (3,454,827 samples, 0.07%)</title><rect x="48.1831%" y="373" width="0.0667%" height="15" fill="rgb(206,111,30)" fg:x="2494386761" fg:w="3454827"/><text x="48.4331%" y="383.50"></text></g><g><title>XLang_Rust::vm::executor::variable::VMInt::new (16,693,567 samples, 0.32%)</title><rect x="48.0511%" y="517" width="0.3225%" height="15" fill="rgb(243,70,54)" fg:x="2487555145" fg:w="16693567"/><text x="48.3011%" y="527.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCTraceable::new (16,693,567 samples, 0.32%)</title><rect x="48.0511%" y="501" width="0.3225%" height="15" fill="rgb(242,28,8)" fg:x="2487555145" fg:w="16693567"/><text x="48.3011%" y="511.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V&gt;::new (13,288,669 samples, 0.26%)</title><rect x="48.1169%" y="485" width="0.2567%" height="15" fill="rgb(219,106,18)" fg:x="2490960043" fg:w="13288669"/><text x="48.3669%" y="495.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (13,288,669 samples, 0.26%)</title><rect x="48.1169%" y="469" width="0.2567%" height="15" fill="rgb(244,222,10)" fg:x="2490960043" fg:w="13288669"/><text x="48.3669%" y="479.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::default::Default&gt;::default (13,288,669 samples, 0.26%)</title><rect x="48.1169%" y="453" width="0.2567%" height="15" fill="rgb(236,179,52)" fg:x="2490960043" fg:w="13288669"/><text x="48.3669%" y="463.50"></text></g><g><title>std::hash::random::RandomState::new (13,288,669 samples, 0.26%)</title><rect x="48.1169%" y="437" width="0.2567%" height="15" fill="rgb(213,23,39)" fg:x="2490960043" fg:w="13288669"/><text x="48.3669%" y="447.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (13,288,669 samples, 0.26%)</title><rect x="48.1169%" y="421" width="0.2567%" height="15" fill="rgb(238,48,10)" fg:x="2490960043" fg:w="13288669"/><text x="48.3669%" y="431.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (13,288,669 samples, 0.26%)</title><rect x="48.1169%" y="405" width="0.2567%" height="15" fill="rgb(251,196,23)" fg:x="2490960043" fg:w="13288669"/><text x="48.3669%" y="415.50"></text></g><g><title>std::hash::random::RandomState::new::_{{closure}} (9,861,951 samples, 0.19%)</title><rect x="48.1831%" y="389" width="0.1905%" height="15" fill="rgb(250,152,24)" fg:x="2494386761" fg:w="9861951"/><text x="48.4331%" y="399.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (6,407,124 samples, 0.12%)</title><rect x="48.2498%" y="373" width="0.1238%" height="15" fill="rgb(209,150,17)" fg:x="2497841588" fg:w="6407124"/><text x="48.4998%" y="383.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCRef::as_const_type (5,212,695 samples, 0.10%)</title><rect x="48.3736%" y="517" width="0.1007%" height="15" fill="rgb(234,202,34)" fg:x="2504248712" fg:w="5212695"/><text x="48.6236%" y="527.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCRef::isinstance (5,260,598 samples, 0.10%)</title><rect x="48.4742%" y="517" width="0.1016%" height="15" fill="rgb(253,148,53)" fg:x="2509461407" fg:w="5260598"/><text x="48.7242%" y="527.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCRef::get_const_traceable (5,260,598 samples, 0.10%)</title><rect x="48.4742%" y="501" width="0.1016%" height="15" fill="rgb(218,129,16)" fg:x="2509461407" fg:w="5260598"/><text x="48.7242%" y="511.50"></text></g><g><title>&lt;XLang_Rust::vm::executor::variable::VMNativeFunction as XLang_Rust::vm::gc::gc::GCObject&gt;::get_const_traceable (1,750,320 samples, 0.03%)</title><rect x="48.5421%" y="485" width="0.0338%" height="15" fill="rgb(216,85,19)" fg:x="2512971685" fg:w="1750320"/><text x="48.7921%" y="495.50"></text></g><g><title>__rdl_alloc (1,748,512 samples, 0.03%)</title><rect x="49.1381%" y="421" width="0.0338%" height="15" fill="rgb(235,228,7)" fg:x="2543830532" fg:w="1748512"/><text x="49.3881%" y="431.50"></text></g><g><title>[libc.so.6] (5,108,042 samples, 0.10%)</title><rect x="50.0362%" y="389" width="0.0987%" height="15" fill="rgb(245,175,0)" fg:x="2590323704" fg:w="5108042"/><text x="50.2862%" y="399.50"></text></g><g><title>[unknown] (1,728,188 samples, 0.03%)</title><rect x="50.1015%" y="373" width="0.0334%" height="15" fill="rgb(208,168,36)" fg:x="2593703558" fg:w="1728188"/><text x="50.3515%" y="383.50"></text></g><g><title>[unknown] (1,728,188 samples, 0.03%)</title><rect x="50.1015%" y="357" width="0.0334%" height="15" fill="rgb(246,171,24)" fg:x="2593703558" fg:w="1728188"/><text x="50.3515%" y="367.50"></text></g><g><title>[unknown] (1,728,188 samples, 0.03%)</title><rect x="50.1015%" y="341" width="0.0334%" height="15" fill="rgb(215,142,24)" fg:x="2593703558" fg:w="1728188"/><text x="50.3515%" y="351.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (65,105,634 samples, 1.26%)</title><rect x="49.0710%" y="501" width="1.2576%" height="15" fill="rgb(250,187,7)" fg:x="2540352659" fg:w="65105634"/><text x="49.3210%" y="511.50"></text></g><g><title>alloc::alloc::exchange_malloc (61,627,761 samples, 1.19%)</title><rect x="49.1381%" y="485" width="1.1904%" height="15" fill="rgb(228,66,33)" fg:x="2543830532" fg:w="61627761"/><text x="49.3881%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (61,627,761 samples, 1.19%)</title><rect x="49.1381%" y="469" width="1.1904%" height="15" fill="rgb(234,215,21)" fg:x="2543830532" fg:w="61627761"/><text x="49.3881%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (61,627,761 samples, 1.19%)</title><rect x="49.1381%" y="453" width="1.1904%" height="15" fill="rgb(222,191,20)" fg:x="2543830532" fg:w="61627761"/><text x="49.3881%" y="463.50"></text></g><g><title>alloc::alloc::alloc (61,627,761 samples, 1.19%)</title><rect x="49.1381%" y="437" width="1.1904%" height="15" fill="rgb(245,79,54)" fg:x="2543830532" fg:w="61627761"/><text x="49.3881%" y="447.50"></text></g><g><title>malloc (59,879,249 samples, 1.16%)</title><rect x="49.1719%" y="421" width="1.1567%" height="15" fill="rgb(240,10,37)" fg:x="2545579044" fg:w="59879249"/><text x="49.4219%" y="431.50"></text></g><g><title>[libc.so.6] (41,190,325 samples, 0.80%)</title><rect x="49.5329%" y="405" width="0.7957%" height="15" fill="rgb(214,192,32)" fg:x="2564267968" fg:w="41190325"/><text x="49.7829%" y="415.50"></text></g><g><title>[unknown] (10,026,547 samples, 0.19%)</title><rect x="50.1349%" y="389" width="0.1937%" height="15" fill="rgb(209,36,54)" fg:x="2595431746" fg:w="10026547"/><text x="50.3849%" y="399.50"></text></g><g><title>[unknown] (10,026,547 samples, 0.19%)</title><rect x="50.1349%" y="373" width="0.1937%" height="15" fill="rgb(220,10,11)" fg:x="2595431746" fg:w="10026547"/><text x="50.3849%" y="383.50"></text></g><g><title>[unknown] (10,026,547 samples, 0.19%)</title><rect x="50.1349%" y="357" width="0.1937%" height="15" fill="rgb(221,106,17)" fg:x="2595431746" fg:w="10026547"/><text x="50.3849%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (1,724,311 samples, 0.03%)</title><rect x="50.3286%" y="501" width="0.0333%" height="15" fill="rgb(251,142,44)" fg:x="2605458293" fg:w="1724311"/><text x="50.5786%" y="511.50"></text></g><g><title>[libc.so.6] (3,465,917 samples, 0.07%)</title><rect x="50.3619%" y="341" width="0.0669%" height="15" fill="rgb(238,13,15)" fg:x="2607182604" fg:w="3465917"/><text x="50.6119%" y="351.50"></text></g><g><title>[libc.so.6] (3,465,917 samples, 0.07%)</title><rect x="50.3619%" y="325" width="0.0669%" height="15" fill="rgb(208,107,27)" fg:x="2607182604" fg:w="3465917"/><text x="50.6119%" y="335.50"></text></g><g><title>[unknown] (3,465,917 samples, 0.07%)</title><rect x="50.3619%" y="309" width="0.0669%" height="15" fill="rgb(205,136,37)" fg:x="2607182604" fg:w="3465917"/><text x="50.6119%" y="319.50"></text></g><g><title>[unknown] (3,465,917 samples, 0.07%)</title><rect x="50.3619%" y="293" width="0.0669%" height="15" fill="rgb(250,205,27)" fg:x="2607182604" fg:w="3465917"/><text x="50.6119%" y="303.50"></text></g><g><title>[unknown] (3,465,917 samples, 0.07%)</title><rect x="50.3619%" y="277" width="0.0669%" height="15" fill="rgb(210,80,43)" fg:x="2607182604" fg:w="3465917"/><text x="50.6119%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (20,754,069 samples, 0.40%)</title><rect x="50.3619%" y="485" width="0.4009%" height="15" fill="rgb(247,160,36)" fg:x="2607182604" fg:w="20754069"/><text x="50.6119%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (20,754,069 samples, 0.40%)</title><rect x="50.3619%" y="469" width="0.4009%" height="15" fill="rgb(234,13,49)" fg:x="2607182604" fg:w="20754069"/><text x="50.6119%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (20,754,069 samples, 0.40%)</title><rect x="50.3619%" y="453" width="0.4009%" height="15" fill="rgb(234,122,0)" fg:x="2607182604" fg:w="20754069"/><text x="50.6119%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (20,754,069 samples, 0.40%)</title><rect x="50.3619%" y="437" width="0.4009%" height="15" fill="rgb(207,146,38)" fg:x="2607182604" fg:w="20754069"/><text x="50.6119%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (20,754,069 samples, 0.40%)</title><rect x="50.3619%" y="421" width="0.4009%" height="15" fill="rgb(207,177,25)" fg:x="2607182604" fg:w="20754069"/><text x="50.6119%" y="431.50"></text></g><g><title>alloc::alloc::Global::grow_impl (20,754,069 samples, 0.40%)</title><rect x="50.3619%" y="405" width="0.4009%" height="15" fill="rgb(211,178,42)" fg:x="2607182604" fg:w="20754069"/><text x="50.6119%" y="415.50"></text></g><g><title>alloc::alloc::realloc (20,754,069 samples, 0.40%)</title><rect x="50.3619%" y="389" width="0.4009%" height="15" fill="rgb(230,69,54)" fg:x="2607182604" fg:w="20754069"/><text x="50.6119%" y="399.50"></text></g><g><title>realloc (20,754,069 samples, 0.40%)</title><rect x="50.3619%" y="373" width="0.4009%" height="15" fill="rgb(214,135,41)" fg:x="2607182604" fg:w="20754069"/><text x="50.6119%" y="383.50"></text></g><g><title>[libc.so.6] (20,754,069 samples, 0.40%)</title><rect x="50.3619%" y="357" width="0.4009%" height="15" fill="rgb(237,67,25)" fg:x="2607182604" fg:w="20754069"/><text x="50.6119%" y="367.50"></text></g><g><title>memcpy (17,288,152 samples, 0.33%)</title><rect x="50.4288%" y="341" width="0.3339%" height="15" fill="rgb(222,189,50)" fg:x="2610648521" fg:w="17288152"/><text x="50.6788%" y="351.50"></text></g><g><title>[unknown] (17,288,152 samples, 0.33%)</title><rect x="50.4288%" y="325" width="0.3339%" height="15" fill="rgb(245,148,34)" fg:x="2610648521" fg:w="17288152"/><text x="50.6788%" y="335.50"></text></g><g><title>[unknown] (17,288,152 samples, 0.33%)</title><rect x="50.4288%" y="309" width="0.3339%" height="15" fill="rgb(222,29,6)" fg:x="2610648521" fg:w="17288152"/><text x="50.6788%" y="319.50"></text></g><g><title>[unknown] (17,288,152 samples, 0.33%)</title><rect x="50.4288%" y="293" width="0.3339%" height="15" fill="rgb(221,189,43)" fg:x="2610648521" fg:w="17288152"/><text x="50.6788%" y="303.50"></text></g><g><title>XLang_Rust::vm::executor::variable::VMInt::add (150,852,253 samples, 2.91%)</title><rect x="47.9165%" y="533" width="2.9140%" height="15" fill="rgb(207,36,27)" fg:x="2480589288" fg:w="150852253"/><text x="48.1665%" y="543.50">XL..</text></g><g><title>XLang_Rust::vm::gc::gc::GCSystem::new_object (116,719,536 samples, 2.25%)</title><rect x="48.5759%" y="517" width="2.2546%" height="15" fill="rgb(217,90,24)" fg:x="2514722005" fg:w="116719536"/><text x="48.8259%" y="527.50">X..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (24,258,937 samples, 0.47%)</title><rect x="50.3619%" y="501" width="0.4686%" height="15" fill="rgb(224,66,35)" fg:x="2607182604" fg:w="24258937"/><text x="50.6119%" y="511.50"></text></g><g><title>core::ptr::write (3,504,868 samples, 0.07%)</title><rect x="50.7628%" y="485" width="0.0677%" height="15" fill="rgb(221,13,50)" fg:x="2627936673" fg:w="3504868"/><text x="51.0128%" y="495.50"></text></g><g><title>[unknown] (1,777,254 samples, 0.03%)</title><rect x="50.7962%" y="469" width="0.0343%" height="15" fill="rgb(236,68,49)" fg:x="2629664287" fg:w="1777254"/><text x="51.0462%" y="479.50"></text></g><g><title>[unknown] (1,777,254 samples, 0.03%)</title><rect x="50.7962%" y="453" width="0.0343%" height="15" fill="rgb(229,146,28)" fg:x="2629664287" fg:w="1777254"/><text x="51.0462%" y="463.50"></text></g><g><title>[unknown] (1,777,254 samples, 0.03%)</title><rect x="50.7962%" y="437" width="0.0343%" height="15" fill="rgb(225,31,38)" fg:x="2629664287" fg:w="1777254"/><text x="51.0462%" y="447.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCRef::as_const_type (5,190,140 samples, 0.10%)</title><rect x="50.8305%" y="533" width="0.1003%" height="15" fill="rgb(250,208,3)" fg:x="2631441541" fg:w="5190140"/><text x="51.0805%" y="543.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCRef::get_const_traceable (8,672,032 samples, 0.17%)</title><rect x="50.9307%" y="517" width="0.1675%" height="15" fill="rgb(246,54,23)" fg:x="2636631681" fg:w="8672032"/><text x="51.1807%" y="527.50"></text></g><g><title>XLang_Rust::vm::executor::variable::try_add_as_vmobject (188,318,116 samples, 3.64%)</title><rect x="47.4939%" y="549" width="3.6377%" height="15" fill="rgb(243,76,11)" fg:x="2458712019" fg:w="188318116"/><text x="47.7439%" y="559.50">XLan..</text></g><g><title>XLang_Rust::vm::gc::gc::GCRef::isinstance (10,398,454 samples, 0.20%)</title><rect x="50.9307%" y="533" width="0.2009%" height="15" fill="rgb(245,21,50)" fg:x="2636631681" fg:w="10398454"/><text x="51.1807%" y="543.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCTraceable::isinstance (1,726,422 samples, 0.03%)</title><rect x="51.0983%" y="517" width="0.0333%" height="15" fill="rgb(228,9,43)" fg:x="2645303713" fg:w="1726422"/><text x="51.3483%" y="527.50"></text></g><g><title>&lt;core::any::TypeId as core::cmp::PartialEq&gt;::eq (1,726,422 samples, 0.03%)</title><rect x="51.0983%" y="501" width="0.0333%" height="15" fill="rgb(208,100,47)" fg:x="2645303713" fg:w="1726422"/><text x="51.3483%" y="511.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialEq for (U,T)&gt;::eq (1,726,422 samples, 0.03%)</title><rect x="51.0983%" y="485" width="0.0333%" height="15" fill="rgb(232,26,8)" fg:x="2645303713" fg:w="1726422"/><text x="51.3483%" y="495.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u64&gt;::eq (1,726,422 samples, 0.03%)</title><rect x="51.0983%" y="469" width="0.0333%" height="15" fill="rgb(216,166,38)" fg:x="2645303713" fg:w="1726422"/><text x="51.3483%" y="479.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCRef::get_const_traceable (12,203,415 samples, 0.24%)</title><rect x="51.5328%" y="485" width="0.2357%" height="15" fill="rgb(251,202,51)" fg:x="2667797997" fg:w="12203415"/><text x="51.7828%" y="495.50"></text></g><g><title>&lt;XLang_Rust::vm::executor::variable::VMNativeFunction as XLang_Rust::vm::gc::gc::GCObject&gt;::get_const_traceable (6,982,647 samples, 0.13%)</title><rect x="51.6336%" y="469" width="0.1349%" height="15" fill="rgb(254,216,34)" fg:x="2673018765" fg:w="6982647"/><text x="51.8836%" y="479.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCRef::as_const_type (17,451,240 samples, 0.34%)</title><rect x="51.4658%" y="517" width="0.3371%" height="15" fill="rgb(251,32,27)" fg:x="2664330731" fg:w="17451240"/><text x="51.7158%" y="527.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCRef::isinstance (13,983,974 samples, 0.27%)</title><rect x="51.5328%" y="501" width="0.2701%" height="15" fill="rgb(208,127,28)" fg:x="2667797997" fg:w="13983974"/><text x="51.7828%" y="511.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCTraceable::isinstance (1,780,559 samples, 0.03%)</title><rect x="51.7685%" y="485" width="0.0344%" height="15" fill="rgb(224,137,22)" fg:x="2680001412" fg:w="1780559"/><text x="52.0185%" y="495.50"></text></g><g><title>&lt;core::any::TypeId as core::cmp::PartialEq&gt;::eq (1,780,559 samples, 0.03%)</title><rect x="51.7685%" y="469" width="0.0344%" height="15" fill="rgb(254,70,32)" fg:x="2680001412" fg:w="1780559"/><text x="52.0185%" y="479.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialEq for (U,T)&gt;::eq (1,780,559 samples, 0.03%)</title><rect x="51.7685%" y="453" width="0.0344%" height="15" fill="rgb(229,75,37)" fg:x="2680001412" fg:w="1780559"/><text x="52.0185%" y="463.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u64&gt;::eq (1,780,559 samples, 0.03%)</title><rect x="51.7685%" y="437" width="0.0344%" height="15" fill="rgb(252,64,23)" fg:x="2680001412" fg:w="1780559"/><text x="52.0185%" y="447.50"></text></g><g><title>&lt;XLang_Rust::vm::executor::variable::VMInt as XLang_Rust::vm::executor::variable::VMObject&gt;::assign (20,887,099 samples, 0.40%)</title><rect x="51.4658%" y="533" width="0.4035%" height="15" fill="rgb(232,162,48)" fg:x="2664330731" fg:w="20887099"/><text x="51.7158%" y="543.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCRef::isinstance (3,435,859 samples, 0.07%)</title><rect x="51.8029%" y="517" width="0.0664%" height="15" fill="rgb(246,160,12)" fg:x="2681781971" fg:w="3435859"/><text x="52.0529%" y="527.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCTraceable::isinstance (3,435,859 samples, 0.07%)</title><rect x="51.8029%" y="501" width="0.0664%" height="15" fill="rgb(247,166,0)" fg:x="2681781971" fg:w="3435859"/><text x="52.0529%" y="511.50"></text></g><g><title>&lt;core::any::TypeId as core::cmp::PartialEq&gt;::eq (3,435,859 samples, 0.07%)</title><rect x="51.8029%" y="485" width="0.0664%" height="15" fill="rgb(249,219,21)" fg:x="2681781971" fg:w="3435859"/><text x="52.0529%" y="495.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialEq for (U,T)&gt;::eq (3,435,859 samples, 0.07%)</title><rect x="51.8029%" y="469" width="0.0664%" height="15" fill="rgb(205,209,3)" fg:x="2681781971" fg:w="3435859"/><text x="52.0529%" y="479.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u64&gt;::eq (3,435,859 samples, 0.07%)</title><rect x="51.8029%" y="453" width="0.0664%" height="15" fill="rgb(243,44,1)" fg:x="2681781971" fg:w="3435859"/><text x="52.0529%" y="463.50"></text></g><g><title>&lt;XLang_Rust::vm::executor::variable::VMNativeFunction as XLang_Rust::vm::gc::gc::GCObject&gt;::get_const_traceable (1,712,992 samples, 0.03%)</title><rect x="51.8693%" y="533" width="0.0331%" height="15" fill="rgb(206,159,16)" fg:x="2685217830" fg:w="1712992"/><text x="52.1193%" y="543.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCRef::get_const_traceable (22,406,676 samples, 0.43%)</title><rect x="51.9024%" y="517" width="0.4328%" height="15" fill="rgb(244,77,30)" fg:x="2686930822" fg:w="22406676"/><text x="52.1524%" y="527.50"></text></g><g><title>&lt;XLang_Rust::vm::executor::variable::VMNativeFunction as XLang_Rust::vm::gc::gc::GCObject&gt;::get_const_traceable (1,741,097 samples, 0.03%)</title><rect x="52.3015%" y="501" width="0.0336%" height="15" fill="rgb(218,69,12)" fg:x="2707596401" fg:w="1741097"/><text x="52.5515%" y="511.50"></text></g><g><title>XLang_Rust::vm::executor::variable::try_assign_as_vmobject (65,804,631 samples, 1.27%)</title><rect x="51.1316%" y="549" width="1.2711%" height="15" fill="rgb(212,87,7)" fg:x="2647030135" fg:w="65804631"/><text x="51.3816%" y="559.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCRef::isinstance (25,903,944 samples, 0.50%)</title><rect x="51.9024%" y="533" width="0.5004%" height="15" fill="rgb(245,114,25)" fg:x="2686930822" fg:w="25903944"/><text x="52.1524%" y="543.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCTraceable::isinstance (3,497,268 samples, 0.07%)</title><rect x="52.3352%" y="517" width="0.0676%" height="15" fill="rgb(210,61,42)" fg:x="2709337498" fg:w="3497268"/><text x="52.5852%" y="527.50"></text></g><g><title>&lt;core::any::TypeId as core::cmp::PartialEq&gt;::eq (3,497,268 samples, 0.07%)</title><rect x="52.3352%" y="501" width="0.0676%" height="15" fill="rgb(211,52,33)" fg:x="2709337498" fg:w="3497268"/><text x="52.5852%" y="511.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialEq for (U,T)&gt;::eq (3,497,268 samples, 0.07%)</title><rect x="52.3352%" y="485" width="0.0676%" height="15" fill="rgb(234,58,33)" fg:x="2709337498" fg:w="3497268"/><text x="52.5852%" y="495.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u64&gt;::eq (3,497,268 samples, 0.07%)</title><rect x="52.3352%" y="469" width="0.0676%" height="15" fill="rgb(220,115,36)" fg:x="2709337498" fg:w="3497268"/><text x="52.5852%" y="479.50"></text></g><g><title>&lt;XLang_Rust::vm::executor::variable::VMNativeFunction as XLang_Rust::vm::gc::gc::GCObject&gt;::get_const_traceable (1,732,194 samples, 0.03%)</title><rect x="52.9028%" y="517" width="0.0335%" height="15" fill="rgb(243,153,54)" fg:x="2738725405" fg:w="1732194"/><text x="53.1528%" y="527.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCRef::as_const_type (5,181,490 samples, 0.10%)</title><rect x="52.9363%" y="517" width="0.1001%" height="15" fill="rgb(251,47,18)" fg:x="2740457599" fg:w="5181490"/><text x="53.1863%" y="527.50"></text></g><g><title>XLang_Rust::vm::executor::variable::VMInt::less_than (24,096,923 samples, 0.47%)</title><rect x="52.7043%" y="533" width="0.4655%" height="15" fill="rgb(242,102,42)" fg:x="2728444806" fg:w="24096923"/><text x="52.9543%" y="543.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCRef::isinstance (6,902,640 samples, 0.13%)</title><rect x="53.0364%" y="517" width="0.1333%" height="15" fill="rgb(234,31,38)" fg:x="2745639089" fg:w="6902640"/><text x="53.2864%" y="527.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCRef::get_const_traceable (6,902,640 samples, 0.13%)</title><rect x="53.0364%" y="501" width="0.1333%" height="15" fill="rgb(221,117,51)" fg:x="2745639089" fg:w="6902640"/><text x="53.2864%" y="511.50"></text></g><g><title>&lt;XLang_Rust::vm::executor::variable::VMNativeFunction as XLang_Rust::vm::gc::gc::GCObject&gt;::get_const_traceable (3,438,600 samples, 0.07%)</title><rect x="53.1033%" y="485" width="0.0664%" height="15" fill="rgb(212,20,18)" fg:x="2749103129" fg:w="3438600"/><text x="53.3533%" y="495.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCRef::as_const_type (1,681,649 samples, 0.03%)</title><rect x="53.1697%" y="533" width="0.0325%" height="15" fill="rgb(245,133,36)" fg:x="2752541729" fg:w="1681649"/><text x="53.4197%" y="543.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCRef::get_const_traceable (15,553,536 samples, 0.30%)</title><rect x="53.2022%" y="517" width="0.3004%" height="15" fill="rgb(212,6,19)" fg:x="2754223378" fg:w="15553536"/><text x="53.4522%" y="527.50"></text></g><g><title>XLang_Rust::vm::executor::variable::try_less_than_as_vmobject (62,092,569 samples, 1.20%)</title><rect x="52.4027%" y="549" width="1.1994%" height="15" fill="rgb(218,1,36)" fg:x="2712834766" fg:w="62092569"/><text x="52.6527%" y="559.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCRef::isinstance (20,703,957 samples, 0.40%)</title><rect x="53.2022%" y="533" width="0.3999%" height="15" fill="rgb(246,84,54)" fg:x="2754223378" fg:w="20703957"/><text x="53.4522%" y="543.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCTraceable::isinstance (5,150,421 samples, 0.10%)</title><rect x="53.5027%" y="517" width="0.0995%" height="15" fill="rgb(242,110,6)" fg:x="2769776914" fg:w="5150421"/><text x="53.7527%" y="527.50"></text></g><g><title>&lt;core::any::TypeId as core::cmp::PartialEq&gt;::eq (5,150,421 samples, 0.10%)</title><rect x="53.5027%" y="501" width="0.0995%" height="15" fill="rgb(214,47,5)" fg:x="2769776914" fg:w="5150421"/><text x="53.7527%" y="511.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialEq for (U,T)&gt;::eq (5,150,421 samples, 0.10%)</title><rect x="53.5027%" y="485" width="0.0995%" height="15" fill="rgb(218,159,25)" fg:x="2769776914" fg:w="5150421"/><text x="53.7527%" y="495.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u64&gt;::eq (5,150,421 samples, 0.10%)</title><rect x="53.5027%" y="469" width="0.0995%" height="15" fill="rgb(215,211,28)" fg:x="2769776914" fg:w="5150421"/><text x="53.7527%" y="479.50"></text></g><g><title>XLang_Rust::vm::executor::vm::IRExecutor::pop_object (3,501,699 samples, 0.07%)</title><rect x="53.6021%" y="549" width="0.0676%" height="15" fill="rgb(238,59,32)" fg:x="2774927335" fg:w="3501699"/><text x="53.8521%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (3,501,699 samples, 0.07%)</title><rect x="53.6021%" y="533" width="0.0676%" height="15" fill="rgb(226,82,3)" fg:x="2774927335" fg:w="3501699"/><text x="53.8521%" y="543.50"></text></g><g><title>XLang_Rust::vm::executor::vm::IRExecutor::pop_object_and_check (53,396,527 samples, 1.03%)</title><rect x="53.6698%" y="549" width="1.0314%" height="15" fill="rgb(240,164,32)" fg:x="2778429034" fg:w="53396527"/><text x="53.9198%" y="559.50"></text></g><g><title>XLang_Rust::vm::executor::vm::IRExecutor::pop_object (48,208,591 samples, 0.93%)</title><rect x="53.7700%" y="533" width="0.9312%" height="15" fill="rgb(232,46,7)" fg:x="2783616970" fg:w="48208591"/><text x="54.0200%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (48,208,591 samples, 0.93%)</title><rect x="53.7700%" y="517" width="0.9312%" height="15" fill="rgb(229,129,53)" fg:x="2783616970" fg:w="48208591"/><text x="54.0200%" y="527.50"></text></g><g><title>core::ptr::read (25,942,746 samples, 0.50%)</title><rect x="54.2001%" y="501" width="0.5011%" height="15" fill="rgb(234,188,29)" fg:x="2805882815" fg:w="25942746"/><text x="54.4501%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity (5,326,116 samples, 0.10%)</title><rect x="55.2685%" y="517" width="0.1029%" height="15" fill="rgb(246,141,4)" fg:x="2861194637" fg:w="5326116"/><text x="55.5185%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::capacity (5,326,116 samples, 0.10%)</title><rect x="55.2685%" y="501" width="0.1029%" height="15" fill="rgb(229,23,39)" fg:x="2861194637" fg:w="5326116"/><text x="55.5185%" y="511.50"></text></g><g><title>XLang_Rust::vm::executor::vm::IRExecutor::push_vmobject (65,301,304 samples, 1.26%)</title><rect x="54.7012%" y="549" width="1.2614%" height="15" fill="rgb(206,12,3)" fg:x="2831825561" fg:w="65301304"/><text x="54.9512%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (65,301,304 samples, 1.26%)</title><rect x="54.7012%" y="533" width="1.2614%" height="15" fill="rgb(252,226,20)" fg:x="2831825561" fg:w="65301304"/><text x="54.9512%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (30,606,112 samples, 0.59%)</title><rect x="55.3714%" y="517" width="0.5912%" height="15" fill="rgb(216,123,35)" fg:x="2866520753" fg:w="30606112"/><text x="55.6214%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (30,606,112 samples, 0.59%)</title><rect x="55.3714%" y="501" width="0.5912%" height="15" fill="rgb(212,68,40)" fg:x="2866520753" fg:w="30606112"/><text x="55.6214%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (30,606,112 samples, 0.59%)</title><rect x="55.3714%" y="485" width="0.5912%" height="15" fill="rgb(254,125,32)" fg:x="2866520753" fg:w="30606112"/><text x="55.6214%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (30,606,112 samples, 0.59%)</title><rect x="55.3714%" y="469" width="0.5912%" height="15" fill="rgb(253,97,22)" fg:x="2866520753" fg:w="30606112"/><text x="55.6214%" y="479.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCRef::get_const_traceable (5,193,893 samples, 0.10%)</title><rect x="56.0295%" y="517" width="0.1003%" height="15" fill="rgb(241,101,14)" fg:x="2900587831" fg:w="5193893"/><text x="56.2795%" y="527.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCRef::as_const_type (12,111,532 samples, 0.23%)</title><rect x="55.9626%" y="549" width="0.2340%" height="15" fill="rgb(238,103,29)" fg:x="2897126865" fg:w="12111532"/><text x="56.2126%" y="559.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCRef::isinstance (8,650,566 samples, 0.17%)</title><rect x="56.0295%" y="533" width="0.1671%" height="15" fill="rgb(233,195,47)" fg:x="2900587831" fg:w="8650566"/><text x="56.2795%" y="543.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCTraceable::isinstance (3,456,673 samples, 0.07%)</title><rect x="56.1298%" y="517" width="0.0668%" height="15" fill="rgb(246,218,30)" fg:x="2905781724" fg:w="3456673"/><text x="56.3798%" y="527.50"></text></g><g><title>&lt;core::any::TypeId as core::cmp::PartialEq&gt;::eq (3,456,673 samples, 0.07%)</title><rect x="56.1298%" y="501" width="0.0668%" height="15" fill="rgb(219,145,47)" fg:x="2905781724" fg:w="3456673"/><text x="56.3798%" y="511.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialEq for (U,T)&gt;::eq (3,456,673 samples, 0.07%)</title><rect x="56.1298%" y="485" width="0.0668%" height="15" fill="rgb(243,12,26)" fg:x="2905781724" fg:w="3456673"/><text x="56.3798%" y="495.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u64&gt;::eq (3,456,673 samples, 0.07%)</title><rect x="56.1298%" y="469" width="0.0668%" height="15" fill="rgb(214,87,16)" fg:x="2905781724" fg:w="3456673"/><text x="56.3798%" y="479.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCRef::clone_ref (27,942,980 samples, 0.54%)</title><rect x="56.1966%" y="549" width="0.5398%" height="15" fill="rgb(208,99,42)" fg:x="2909238397" fg:w="27942980"/><text x="56.4466%" y="559.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCRef::is_online (12,404,926 samples, 0.24%)</title><rect x="56.4967%" y="533" width="0.2396%" height="15" fill="rgb(253,99,2)" fg:x="2924776451" fg:w="12404926"/><text x="56.7467%" y="543.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCRef::get_const_traceable (12,404,926 samples, 0.24%)</title><rect x="56.4967%" y="517" width="0.2396%" height="15" fill="rgb(220,168,23)" fg:x="2924776451" fg:w="12404926"/><text x="56.7467%" y="527.50"></text></g><g><title>&lt;XLang_Rust::vm::executor::variable::VMNativeFunction as XLang_Rust::vm::gc::gc::GCObject&gt;::get_const_traceable (3,451,670 samples, 0.07%)</title><rect x="56.6697%" y="501" width="0.0667%" height="15" fill="rgb(242,38,24)" fg:x="2933729707" fg:w="3451670"/><text x="56.9197%" y="511.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCRef::drop_ref (93,472,243 samples, 1.81%)</title><rect x="56.7363%" y="549" width="1.8056%" height="15" fill="rgb(225,182,9)" fg:x="2937181377" fg:w="93472243"/><text x="56.9863%" y="559.50">X..</text></g><g><title>XLang_Rust::vm::gc::gc::GCRef::get_traceable (51,912,295 samples, 1.00%)</title><rect x="57.5391%" y="533" width="1.0028%" height="15" fill="rgb(243,178,37)" fg:x="2978741325" fg:w="51912295"/><text x="57.7891%" y="543.50"></text></g><g><title>&lt;XLang_Rust::vm::executor::variable::VMNativeFunction as XLang_Rust::vm::gc::gc::GCObject&gt;::get_traceable (5,156,828 samples, 0.10%)</title><rect x="58.4423%" y="517" width="0.0996%" height="15" fill="rgb(232,139,19)" fg:x="3025496792" fg:w="5156828"/><text x="58.6923%" y="527.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCRef::isinstance (1,785,273 samples, 0.03%)</title><rect x="58.5419%" y="549" width="0.0345%" height="15" fill="rgb(225,201,24)" fg:x="3030653620" fg:w="1785273"/><text x="58.7919%" y="559.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCRef::get_const_traceable (1,785,273 samples, 0.03%)</title><rect x="58.5419%" y="533" width="0.0345%" height="15" fill="rgb(221,47,46)" fg:x="3030653620" fg:w="1785273"/><text x="58.7919%" y="543.50"></text></g><g><title>&lt;XLang_Rust::vm::executor::variable::VMNativeFunction as XLang_Rust::vm::gc::gc::GCObject&gt;::get_const_traceable (1,785,273 samples, 0.03%)</title><rect x="58.5419%" y="517" width="0.0345%" height="15" fill="rgb(249,23,13)" fg:x="3030653620" fg:w="1785273"/><text x="58.7919%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (10,543,252 samples, 0.20%)</title><rect x="61.9970%" y="501" width="0.2037%" height="15" fill="rgb(219,9,5)" fg:x="3209521674" fg:w="10543252"/><text x="62.2470%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (10,543,252 samples, 0.20%)</title><rect x="61.9970%" y="485" width="0.2037%" height="15" fill="rgb(254,171,16)" fg:x="3209521674" fg:w="10543252"/><text x="62.2470%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (10,543,252 samples, 0.20%)</title><rect x="61.9970%" y="469" width="0.2037%" height="15" fill="rgb(230,171,20)" fg:x="3209521674" fg:w="10543252"/><text x="62.2470%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (5,263,316 samples, 0.10%)</title><rect x="62.0990%" y="453" width="0.1017%" height="15" fill="rgb(210,71,41)" fg:x="3214801610" fg:w="5263316"/><text x="62.3490%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (5,263,316 samples, 0.10%)</title><rect x="62.0990%" y="437" width="0.1017%" height="15" fill="rgb(206,173,20)" fg:x="3214801610" fg:w="5263316"/><text x="62.3490%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (5,263,316 samples, 0.10%)</title><rect x="62.0990%" y="421" width="0.1017%" height="15" fill="rgb(233,88,34)" fg:x="3214801610" fg:w="5263316"/><text x="62.3490%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (5,263,316 samples, 0.10%)</title><rect x="62.0990%" y="405" width="0.1017%" height="15" fill="rgb(223,209,46)" fg:x="3214801610" fg:w="5263316"/><text x="62.3490%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (8,709,741 samples, 0.17%)</title><rect x="62.2007%" y="485" width="0.1682%" height="15" fill="rgb(250,43,18)" fg:x="3220064926" fg:w="8709741"/><text x="62.4507%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_slice (8,709,741 samples, 0.17%)</title><rect x="62.2007%" y="469" width="0.1682%" height="15" fill="rgb(208,13,10)" fg:x="3220064926" fg:w="8709741"/><text x="62.4507%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (8,709,741 samples, 0.17%)</title><rect x="62.2007%" y="453" width="0.1682%" height="15" fill="rgb(212,200,36)" fg:x="3220064926" fg:w="8709741"/><text x="62.4507%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (8,709,741 samples, 0.17%)</title><rect x="62.2007%" y="437" width="0.1682%" height="15" fill="rgb(225,90,30)" fg:x="3220064926" fg:w="8709741"/><text x="62.4507%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (8,709,741 samples, 0.17%)</title><rect x="62.2007%" y="421" width="0.1682%" height="15" fill="rgb(236,182,39)" fg:x="3220064926" fg:w="8709741"/><text x="62.4507%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (8,709,741 samples, 0.17%)</title><rect x="62.2007%" y="405" width="0.1682%" height="15" fill="rgb(212,144,35)" fg:x="3220064926" fg:w="8709741"/><text x="62.4507%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (12,165,923 samples, 0.24%)</title><rect x="62.2007%" y="501" width="0.2350%" height="15" fill="rgb(228,63,44)" fg:x="3220064926" fg:w="12165923"/><text x="62.4507%" y="511.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (3,456,182 samples, 0.07%)</title><rect x="62.3689%" y="485" width="0.0668%" height="15" fill="rgb(228,109,6)" fg:x="3228774667" fg:w="3456182"/><text x="62.6189%" y="495.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (3,456,182 samples, 0.07%)</title><rect x="62.3689%" y="469" width="0.0668%" height="15" fill="rgb(238,117,24)" fg:x="3228774667" fg:w="3456182"/><text x="62.6189%" y="479.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1,740,804 samples, 0.03%)</title><rect x="62.4357%" y="485" width="0.0336%" height="15" fill="rgb(242,26,26)" fg:x="3232230849" fg:w="1740804"/><text x="62.6857%" y="495.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (6,939,523 samples, 0.13%)</title><rect x="62.4357%" y="501" width="0.1340%" height="15" fill="rgb(221,92,48)" fg:x="3232230849" fg:w="6939523"/><text x="62.6857%" y="511.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::read (5,198,719 samples, 0.10%)</title><rect x="62.4693%" y="485" width="0.1004%" height="15" fill="rgb(209,209,32)" fg:x="3233971653" fg:w="5198719"/><text x="62.7193%" y="495.50"></text></g><g><title>core::ptr::read (5,198,719 samples, 0.10%)</title><rect x="62.4693%" y="469" width="0.1004%" height="15" fill="rgb(221,70,22)" fg:x="3233971653" fg:w="5198719"/><text x="62.7193%" y="479.50"></text></g><g><title>&lt;XLang_Rust::vm::executor::variable::VMInstructions as XLang_Rust::vm::gc::gc::GCObject&gt;::free (13,899,130 samples, 0.27%)</title><rect x="63.3683%" y="485" width="0.2685%" height="15" fill="rgb(248,145,5)" fg:x="3280512889" fg:w="13899130"/><text x="63.6183%" y="495.50"></text></g><g><title>__rdl_dealloc (6,955,122 samples, 0.13%)</title><rect x="63.9051%" y="421" width="0.1343%" height="15" fill="rgb(226,116,26)" fg:x="3308302919" fg:w="6955122"/><text x="64.1551%" y="431.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (173,568,070 samples, 3.35%)</title><rect x="63.6708%" y="469" width="3.3527%" height="15" fill="rgb(244,5,17)" fg:x="3296173392" fg:w="173568070"/><text x="63.9208%" y="479.50">&lt;al..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (171,833,096 samples, 3.32%)</title><rect x="63.7044%" y="453" width="3.3192%" height="15" fill="rgb(252,159,33)" fg:x="3297908366" fg:w="171833096"/><text x="63.9544%" y="463.50">&lt;al..</text></g><g><title>alloc::alloc::dealloc (171,833,096 samples, 3.32%)</title><rect x="63.7044%" y="437" width="3.3192%" height="15" fill="rgb(206,71,0)" fg:x="3297908366" fg:w="171833096"/><text x="63.9544%" y="447.50">all..</text></g><g><title>cfree (154,483,421 samples, 2.98%)</title><rect x="64.0395%" y="421" width="2.9841%" height="15" fill="rgb(233,118,54)" fg:x="3315258041" fg:w="154483421"/><text x="64.2895%" y="431.50">cfr..</text></g><g><title>[libc.so.6] (69,489,041 samples, 1.34%)</title><rect x="65.6813%" y="405" width="1.3423%" height="15" fill="rgb(234,83,48)" fg:x="3400252421" fg:w="69489041"/><text x="65.9313%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (22,567,636 samples, 0.44%)</title><rect x="67.4624%" y="421" width="0.4359%" height="15" fill="rgb(228,3,54)" fg:x="3492456256" fg:w="22567636"/><text x="67.7124%" y="431.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&lt;&amp;usize&gt;&gt;::sum (22,567,636 samples, 0.44%)</title><rect x="67.4624%" y="405" width="0.4359%" height="15" fill="rgb(226,155,13)" fg:x="3492456256" fg:w="22567636"/><text x="67.7124%" y="415.50"></text></g><g><title>&lt;std::collections::hash::map::Values&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::fold (22,567,636 samples, 0.44%)</title><rect x="67.4624%" y="389" width="0.4359%" height="15" fill="rgb(241,28,37)" fg:x="3492456256" fg:w="22567636"/><text x="67.7124%" y="399.50"></text></g><g><title>&lt;std::collections::hash::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::fold (22,567,636 samples, 0.44%)</title><rect x="67.4624%" y="373" width="0.4359%" height="15" fill="rgb(233,93,10)" fg:x="3492456256" fg:w="22567636"/><text x="67.7124%" y="383.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::fold (22,567,636 samples, 0.44%)</title><rect x="67.4624%" y="357" width="0.4359%" height="15" fill="rgb(225,113,19)" fg:x="3492456256" fg:w="22567636"/><text x="67.7124%" y="367.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (22,567,636 samples, 0.44%)</title><rect x="67.4624%" y="341" width="0.4359%" height="15" fill="rgb(241,2,18)" fg:x="3492456256" fg:w="22567636"/><text x="67.7124%" y="351.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (22,567,636 samples, 0.44%)</title><rect x="67.4624%" y="325" width="0.4359%" height="15" fill="rgb(228,207,21)" fg:x="3492456256" fg:w="22567636"/><text x="67.7124%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;XLang_Rust::vm::gc::gc::GCTraceable&gt; (71,355,065 samples, 1.38%)</title><rect x="67.2260%" y="453" width="1.3783%" height="15" fill="rgb(213,211,35)" fg:x="3480218495" fg:w="71355065"/><text x="67.4760%" y="463.50"></text></g><g><title>&lt;XLang_Rust::vm::gc::gc::GCTraceable as core::ops::drop::Drop&gt;::drop (71,355,065 samples, 1.38%)</title><rect x="67.2260%" y="437" width="1.3783%" height="15" fill="rgb(209,83,10)" fg:x="3480218495" fg:w="71355065"/><text x="67.4760%" y="447.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::values (36,549,668 samples, 0.71%)</title><rect x="67.8983%" y="421" width="0.7060%" height="15" fill="rgb(209,164,1)" fg:x="3515023892" fg:w="36549668"/><text x="68.1483%" y="431.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::iter (36,549,668 samples, 0.71%)</title><rect x="67.8983%" y="405" width="0.7060%" height="15" fill="rgb(213,184,43)" fg:x="3515023892" fg:w="36549668"/><text x="68.1483%" y="415.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (36,549,668 samples, 0.71%)</title><rect x="67.8983%" y="389" width="0.7060%" height="15" fill="rgb(231,61,34)" fg:x="3515023892" fg:w="36549668"/><text x="68.1483%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter (36,549,668 samples, 0.71%)</title><rect x="67.8983%" y="373" width="0.7060%" height="15" fill="rgb(235,75,3)" fg:x="3515023892" fg:w="36549668"/><text x="68.1483%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::iter (36,549,668 samples, 0.71%)</title><rect x="67.8983%" y="357" width="0.7060%" height="15" fill="rgb(220,106,47)" fg:x="3515023892" fg:w="36549668"/><text x="68.1483%" y="367.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::new (20,895,079 samples, 0.40%)</title><rect x="68.2007%" y="341" width="0.4036%" height="15" fill="rgb(210,196,33)" fg:x="3530678481" fg:w="20895079"/><text x="68.4507%" y="351.50"></text></g><g><title>hashbrown::control::group::neon::Group::match_full (20,895,079 samples, 0.40%)</title><rect x="68.2007%" y="325" width="0.4036%" height="15" fill="rgb(229,154,42)" fg:x="3530678481" fg:w="20895079"/><text x="68.4507%" y="335.50"></text></g><g><title>core::core_arch::aarch64::neon::generated::vcgez_s8 (20,895,079 samples, 0.40%)</title><rect x="68.2007%" y="309" width="0.4036%" height="15" fill="rgb(228,114,26)" fg:x="3530678481" fg:w="20895079"/><text x="68.4507%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;XLang_Rust::vm::executor::variable::VMInt&gt; (83,570,423 samples, 1.61%)</title><rect x="67.0236%" y="469" width="1.6143%" height="15" fill="rgb(208,144,1)" fg:x="3469741462" fg:w="83570423"/><text x="67.2736%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt; (1,738,325 samples, 0.03%)</title><rect x="68.6043%" y="453" width="0.0336%" height="15" fill="rgb(239,112,37)" fg:x="3551573560" fg:w="1738325"/><text x="68.8543%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::string::String&gt;&gt; (1,738,325 samples, 0.03%)</title><rect x="68.6043%" y="437" width="0.0336%" height="15" fill="rgb(210,96,50)" fg:x="3551573560" fg:w="1738325"/><text x="68.8543%" y="447.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,738,325 samples, 0.03%)</title><rect x="68.6043%" y="421" width="0.0336%" height="15" fill="rgb(222,178,2)" fg:x="3551573560" fg:w="1738325"/><text x="68.8543%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (1,738,325 samples, 0.03%)</title><rect x="68.6043%" y="405" width="0.0336%" height="15" fill="rgb(226,74,18)" fg:x="3551573560" fg:w="1738325"/><text x="68.8543%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (1,738,325 samples, 0.03%)</title><rect x="68.6043%" y="389" width="0.0336%" height="15" fill="rgb(225,67,54)" fg:x="3551573560" fg:w="1738325"/><text x="68.8543%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (10,497,054 samples, 0.20%)</title><rect x="69.0076%" y="421" width="0.2028%" height="15" fill="rgb(251,92,32)" fg:x="3572452618" fg:w="10497054"/><text x="69.2576%" y="431.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&lt;&amp;usize&gt;&gt;::sum (10,497,054 samples, 0.20%)</title><rect x="69.0076%" y="405" width="0.2028%" height="15" fill="rgb(228,149,22)" fg:x="3572452618" fg:w="10497054"/><text x="69.2576%" y="415.50"></text></g><g><title>&lt;std::collections::hash::map::Values&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::fold (10,497,054 samples, 0.20%)</title><rect x="69.0076%" y="389" width="0.2028%" height="15" fill="rgb(243,54,13)" fg:x="3572452618" fg:w="10497054"/><text x="69.2576%" y="399.50"></text></g><g><title>&lt;std::collections::hash::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::fold (10,497,054 samples, 0.20%)</title><rect x="69.0076%" y="373" width="0.2028%" height="15" fill="rgb(243,180,28)" fg:x="3572452618" fg:w="10497054"/><text x="69.2576%" y="383.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::fold (10,497,054 samples, 0.20%)</title><rect x="69.0076%" y="357" width="0.2028%" height="15" fill="rgb(208,167,24)" fg:x="3572452618" fg:w="10497054"/><text x="69.2576%" y="367.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (10,497,054 samples, 0.20%)</title><rect x="69.0076%" y="341" width="0.2028%" height="15" fill="rgb(245,73,45)" fg:x="3572452618" fg:w="10497054"/><text x="69.2576%" y="351.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (10,497,054 samples, 0.20%)</title><rect x="69.0076%" y="325" width="0.2028%" height="15" fill="rgb(237,203,48)" fg:x="3572452618" fg:w="10497054"/><text x="69.2576%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;XLang_Rust::vm::gc::gc::GCTraceable&gt; (27,855,756 samples, 0.54%)</title><rect x="68.8401%" y="453" width="0.5381%" height="15" fill="rgb(211,197,16)" fg:x="3563778690" fg:w="27855756"/><text x="69.0901%" y="463.50"></text></g><g><title>&lt;XLang_Rust::vm::gc::gc::GCTraceable as core::ops::drop::Drop&gt;::drop (27,855,756 samples, 0.54%)</title><rect x="68.8401%" y="437" width="0.5381%" height="15" fill="rgb(243,99,51)" fg:x="3563778690" fg:w="27855756"/><text x="69.0901%" y="447.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::values (8,684,774 samples, 0.17%)</title><rect x="69.2104%" y="421" width="0.1678%" height="15" fill="rgb(215,123,29)" fg:x="3582949672" fg:w="8684774"/><text x="69.4604%" y="431.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::iter (8,684,774 samples, 0.17%)</title><rect x="69.2104%" y="405" width="0.1678%" height="15" fill="rgb(239,186,37)" fg:x="3582949672" fg:w="8684774"/><text x="69.4604%" y="415.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (8,684,774 samples, 0.17%)</title><rect x="69.2104%" y="389" width="0.1678%" height="15" fill="rgb(252,136,39)" fg:x="3582949672" fg:w="8684774"/><text x="69.4604%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter (8,684,774 samples, 0.17%)</title><rect x="69.2104%" y="373" width="0.1678%" height="15" fill="rgb(223,213,32)" fg:x="3582949672" fg:w="8684774"/><text x="69.4604%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::iter (8,684,774 samples, 0.17%)</title><rect x="69.2104%" y="357" width="0.1678%" height="15" fill="rgb(233,115,5)" fg:x="3582949672" fg:w="8684774"/><text x="69.4604%" y="367.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::new (6,953,034 samples, 0.13%)</title><rect x="69.2438%" y="341" width="0.1343%" height="15" fill="rgb(207,226,44)" fg:x="3584681412" fg:w="6953034"/><text x="69.4938%" y="351.50"></text></g><g><title>hashbrown::control::group::neon::Group::match_full (6,953,034 samples, 0.13%)</title><rect x="69.2438%" y="325" width="0.1343%" height="15" fill="rgb(208,126,0)" fg:x="3584681412" fg:w="6953034"/><text x="69.4938%" y="335.50"></text></g><g><title>core::core_arch::aarch64::neon::generated::vcgez_s8 (6,953,034 samples, 0.13%)</title><rect x="69.2438%" y="309" width="0.1343%" height="15" fill="rgb(244,66,21)" fg:x="3584681412" fg:w="6953034"/><text x="69.4938%" y="319.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCRef::free (354,226,798 samples, 6.84%)</title><rect x="62.5697%" y="501" width="6.8425%" height="15" fill="rgb(222,97,12)" fg:x="3239170372" fg:w="354226798"/><text x="62.8197%" y="511.50">XLang_Rus..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn XLang_Rust::vm::gc::gc::GCObject&gt;&gt; (298,985,151 samples, 5.78%)</title><rect x="63.6368%" y="485" width="5.7754%" height="15" fill="rgb(219,213,19)" fg:x="3294412019" fg:w="298985151"/><text x="63.8868%" y="495.50">core::p..</text></g><g><title>core::ptr::drop_in_place&lt;XLang_Rust::vm::executor::variable::VMNull&gt; (40,085,285 samples, 0.77%)</title><rect x="68.6379%" y="469" width="0.7743%" height="15" fill="rgb(252,169,30)" fg:x="3553311885" fg:w="40085285"/><text x="68.8879%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt; (1,762,724 samples, 0.03%)</title><rect x="69.3781%" y="453" width="0.0340%" height="15" fill="rgb(206,32,51)" fg:x="3591634446" fg:w="1762724"/><text x="69.6281%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::string::String&gt;&gt; (1,762,724 samples, 0.03%)</title><rect x="69.3781%" y="437" width="0.0340%" height="15" fill="rgb(250,172,42)" fg:x="3591634446" fg:w="1762724"/><text x="69.6281%" y="447.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,762,724 samples, 0.03%)</title><rect x="69.3781%" y="421" width="0.0340%" height="15" fill="rgb(209,34,43)" fg:x="3591634446" fg:w="1762724"/><text x="69.6281%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (1,762,724 samples, 0.03%)</title><rect x="69.3781%" y="405" width="0.0340%" height="15" fill="rgb(223,11,35)" fg:x="3591634446" fg:w="1762724"/><text x="69.6281%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (1,762,724 samples, 0.03%)</title><rect x="69.3781%" y="389" width="0.0340%" height="15" fill="rgb(251,219,26)" fg:x="3591634446" fg:w="1762724"/><text x="69.6281%" y="399.50"></text></g><g><title>&lt;XLang_Rust::vm::executor::variable::VMNativeFunction as XLang_Rust::vm::gc::gc::GCObject&gt;::get_traceable (13,938,712 samples, 0.27%)</title><rect x="70.3122%" y="485" width="0.2692%" height="15" fill="rgb(231,119,3)" fg:x="3639987147" fg:w="13938712"/><text x="70.5622%" y="495.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCRef::get_traceable (62,279,643 samples, 1.20%)</title><rect x="69.4122%" y="501" width="1.2030%" height="15" fill="rgb(216,97,11)" fg:x="3593397170" fg:w="62279643"/><text x="69.6622%" y="511.50"></text></g><g><title>&lt;XLang_Rust::vm::executor::variable::VMNull as XLang_Rust::vm::gc::gc::GCObject&gt;::get_traceable (1,750,954 samples, 0.03%)</title><rect x="70.5814%" y="485" width="0.0338%" height="15" fill="rgb(223,59,9)" fg:x="3653925859" fg:w="1750954"/><text x="70.8314%" y="495.50"></text></g><g><title>&lt;XLang_Rust::vm::executor::variable::VMNativeFunction as XLang_Rust::vm::gc::gc::GCObject&gt;::get_const_traceable (3,487,375 samples, 0.07%)</title><rect x="70.9181%" y="485" width="0.0674%" height="15" fill="rgb(233,93,31)" fg:x="3671357736" fg:w="3487375"/><text x="71.1681%" y="495.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCRef::is_locked (20,928,209 samples, 0.40%)</title><rect x="70.6152%" y="501" width="0.4043%" height="15" fill="rgb(239,81,33)" fg:x="3655676813" fg:w="20928209"/><text x="70.8652%" y="511.50"></text></g><g><title>&lt;XLang_Rust::vm::executor::variable::VMNull as XLang_Rust::vm::gc::gc::GCObject&gt;::get_const_traceable (1,759,911 samples, 0.03%)</title><rect x="70.9855%" y="485" width="0.0340%" height="15" fill="rgb(213,120,34)" fg:x="3674845111" fg:w="1759911"/><text x="71.2355%" y="495.50"></text></g><g><title>&lt;XLang_Rust::vm::executor::variable::VMNativeFunction as XLang_Rust::vm::gc::gc::GCObject&gt;::get_const_traceable (3,469,074 samples, 0.07%)</title><rect x="71.1539%" y="469" width="0.0670%" height="15" fill="rgb(243,49,53)" fg:x="3683562700" fg:w="3469074"/><text x="71.4039%" y="479.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCRef::is_online (12,161,901 samples, 0.23%)</title><rect x="71.0195%" y="501" width="0.2349%" height="15" fill="rgb(247,216,33)" fg:x="3676605022" fg:w="12161901"/><text x="71.2695%" y="511.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCRef::get_const_traceable (12,161,901 samples, 0.23%)</title><rect x="71.0195%" y="485" width="0.2349%" height="15" fill="rgb(226,26,14)" fg:x="3676605022" fg:w="12161901"/><text x="71.2695%" y="495.50"></text></g><g><title>&lt;XLang_Rust::vm::executor::variable::VMNull as XLang_Rust::vm::gc::gc::GCObject&gt;::get_const_traceable (1,735,149 samples, 0.03%)</title><rect x="71.2209%" y="469" width="0.0335%" height="15" fill="rgb(215,49,53)" fg:x="3687031774" fg:w="1735149"/><text x="71.4709%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,511,888 samples, 0.07%)</title><rect x="71.3222%" y="405" width="0.0678%" height="15" fill="rgb(245,162,40)" fg:x="3692275249" fg:w="3511888"/><text x="71.5722%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,511,888 samples, 0.07%)</title><rect x="71.3222%" y="389" width="0.0678%" height="15" fill="rgb(229,68,17)" fg:x="3692275249" fg:w="3511888"/><text x="71.5722%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (3,511,888 samples, 0.07%)</title><rect x="71.3222%" y="373" width="0.0678%" height="15" fill="rgb(213,182,10)" fg:x="3692275249" fg:w="3511888"/><text x="71.5722%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3,511,888 samples, 0.07%)</title><rect x="71.3222%" y="357" width="0.0678%" height="15" fill="rgb(245,125,30)" fg:x="3692275249" fg:w="3511888"/><text x="71.5722%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (3,511,888 samples, 0.07%)</title><rect x="71.3222%" y="341" width="0.0678%" height="15" fill="rgb(232,202,2)" fg:x="3692275249" fg:w="3511888"/><text x="71.5722%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::enumerate::_{{closure}} (3,511,888 samples, 0.07%)</title><rect x="71.3222%" y="325" width="0.0678%" height="15" fill="rgb(237,140,51)" fg:x="3692275249" fg:w="3511888"/><text x="71.5722%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::_{{closure}} (3,511,888 samples, 0.07%)</title><rect x="71.3222%" y="309" width="0.0678%" height="15" fill="rgb(236,157,25)" fg:x="3692275249" fg:w="3511888"/><text x="71.5722%" y="319.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (3,511,888 samples, 0.07%)</title><rect x="71.3222%" y="293" width="0.0678%" height="15" fill="rgb(219,209,0)" fg:x="3692275249" fg:w="3511888"/><text x="71.5722%" y="303.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCSystem::immediate_collect::_{{closure}} (3,511,888 samples, 0.07%)</title><rect x="71.3222%" y="277" width="0.0678%" height="15" fill="rgb(240,116,54)" fg:x="3692275249" fg:w="3511888"/><text x="71.5722%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (3,511,888 samples, 0.07%)</title><rect x="71.3222%" y="261" width="0.0678%" height="15" fill="rgb(216,10,36)" fg:x="3692275249" fg:w="3511888"/><text x="71.5722%" y="271.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (3,511,888 samples, 0.07%)</title><rect x="71.3222%" y="245" width="0.0678%" height="15" fill="rgb(222,72,44)" fg:x="3692275249" fg:w="3511888"/><text x="71.5722%" y="255.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (3,511,888 samples, 0.07%)</title><rect x="71.3222%" y="229" width="0.0678%" height="15" fill="rgb(232,159,9)" fg:x="3692275249" fg:w="3511888"/><text x="71.5722%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (15,602,092 samples, 0.30%)</title><rect x="71.2544%" y="501" width="0.3014%" height="15" fill="rgb(210,39,32)" fg:x="3688766923" fg:w="15602092"/><text x="71.5044%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (15,602,092 samples, 0.30%)</title><rect x="71.2544%" y="485" width="0.3014%" height="15" fill="rgb(216,194,45)" fg:x="3688766923" fg:w="15602092"/><text x="71.5044%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (15,602,092 samples, 0.30%)</title><rect x="71.2544%" y="469" width="0.3014%" height="15" fill="rgb(218,18,35)" fg:x="3688766923" fg:w="15602092"/><text x="71.5044%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (15,602,092 samples, 0.30%)</title><rect x="71.2544%" y="453" width="0.3014%" height="15" fill="rgb(207,83,51)" fg:x="3688766923" fg:w="15602092"/><text x="71.5044%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (15,602,092 samples, 0.30%)</title><rect x="71.2544%" y="437" width="0.3014%" height="15" fill="rgb(225,63,43)" fg:x="3688766923" fg:w="15602092"/><text x="71.5044%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (15,602,092 samples, 0.30%)</title><rect x="71.2544%" y="421" width="0.3014%" height="15" fill="rgb(207,57,36)" fg:x="3688766923" fg:w="15602092"/><text x="71.5044%" y="431.50"></text></g><g><title>core::ptr::write (8,581,878 samples, 0.17%)</title><rect x="71.3900%" y="405" width="0.1658%" height="15" fill="rgb(216,99,33)" fg:x="3695787137" fg:w="8581878"/><text x="71.6400%" y="415.50"></text></g><g><title>[unknown] (5,293,432 samples, 0.10%)</title><rect x="71.4535%" y="389" width="0.1023%" height="15" fill="rgb(225,42,16)" fg:x="3699075583" fg:w="5293432"/><text x="71.7035%" y="399.50"></text></g><g><title>[unknown] (5,293,432 samples, 0.10%)</title><rect x="71.4535%" y="373" width="0.1023%" height="15" fill="rgb(220,201,45)" fg:x="3699075583" fg:w="5293432"/><text x="71.7035%" y="383.50"></text></g><g><title>[unknown] (5,293,432 samples, 0.10%)</title><rect x="71.4535%" y="357" width="0.1023%" height="15" fill="rgb(225,33,4)" fg:x="3699075583" fg:w="5293432"/><text x="71.7035%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;bool&gt;&gt; (1,173,938 samples, 0.02%)</title><rect x="71.5558%" y="501" width="0.0227%" height="15" fill="rgb(224,33,50)" fg:x="3704369015" fg:w="1173938"/><text x="71.8058%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;bool&gt;&gt; (1,173,938 samples, 0.02%)</title><rect x="71.5558%" y="485" width="0.0227%" height="15" fill="rgb(246,198,51)" fg:x="3704369015" fg:w="1173938"/><text x="71.8058%" y="495.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,173,938 samples, 0.02%)</title><rect x="71.5558%" y="469" width="0.0227%" height="15" fill="rgb(205,22,4)" fg:x="3704369015" fg:w="1173938"/><text x="71.8058%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (1,173,938 samples, 0.02%)</title><rect x="71.5558%" y="453" width="0.0227%" height="15" fill="rgb(206,3,8)" fg:x="3704369015" fg:w="1173938"/><text x="71.8058%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1,173,938 samples, 0.02%)</title><rect x="71.5558%" y="437" width="0.0227%" height="15" fill="rgb(251,23,15)" fg:x="3704369015" fg:w="1173938"/><text x="71.8058%" y="447.50"></text></g><g><title>alloc::alloc::dealloc (1,173,938 samples, 0.02%)</title><rect x="71.5558%" y="421" width="0.0227%" height="15" fill="rgb(252,88,28)" fg:x="3704369015" fg:w="1173938"/><text x="71.8058%" y="431.50"></text></g><g><title>cfree (1,173,938 samples, 0.02%)</title><rect x="71.5558%" y="405" width="0.0227%" height="15" fill="rgb(212,127,14)" fg:x="3704369015" fg:w="1173938"/><text x="71.8058%" y="415.50"></text></g><g><title>[libc.so.6] (1,173,938 samples, 0.02%)</title><rect x="71.5558%" y="389" width="0.0227%" height="15" fill="rgb(247,145,37)" fg:x="3704369015" fg:w="1173938"/><text x="71.8058%" y="399.50"></text></g><g><title>[libc.so.6] (1,173,938 samples, 0.02%)</title><rect x="71.5558%" y="373" width="0.0227%" height="15" fill="rgb(209,117,53)" fg:x="3704369015" fg:w="1173938"/><text x="71.8058%" y="383.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCSystem::immediate_collect (747,363,762 samples, 14.44%)</title><rect x="59.9830%" y="517" width="14.4365%" height="15" fill="rgb(212,90,42)" fg:x="3105256364" fg:w="747363762"/><text x="60.2330%" y="527.50">XLang_Rust::vm::gc::gc..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;XLang_Rust::vm::gc::gc::GCRef&gt;&gt; (147,077,173 samples, 2.84%)</title><rect x="71.5785%" y="501" width="2.8410%" height="15" fill="rgb(218,164,37)" fg:x="3705542953" fg:w="147077173"/><text x="71.8285%" y="511.50">co..</text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (147,077,173 samples, 2.84%)</title><rect x="71.5785%" y="485" width="2.8410%" height="15" fill="rgb(246,65,34)" fg:x="3705542953" fg:w="147077173"/><text x="71.8285%" y="495.50">&lt;a..</text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;XLang_Rust::vm::gc::gc::GCRef,alloc::alloc::Global&gt;&gt; (147,077,173 samples, 2.84%)</title><rect x="71.5785%" y="469" width="2.8410%" height="15" fill="rgb(231,100,33)" fg:x="3705542953" fg:w="147077173"/><text x="71.8285%" y="479.50">co..</text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (147,077,173 samples, 2.84%)</title><rect x="71.5785%" y="453" width="2.8410%" height="15" fill="rgb(228,126,14)" fg:x="3705542953" fg:w="147077173"/><text x="71.8285%" y="463.50">&lt;&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;XLang_Rust::vm::gc::gc::GCRef&gt;&gt; (147,077,173 samples, 2.84%)</title><rect x="71.5785%" y="437" width="2.8410%" height="15" fill="rgb(215,173,21)" fg:x="3705542953" fg:w="147077173"/><text x="71.8285%" y="447.50">co..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (147,077,173 samples, 2.84%)</title><rect x="71.5785%" y="421" width="2.8410%" height="15" fill="rgb(210,6,40)" fg:x="3705542953" fg:w="147077173"/><text x="71.8285%" y="431.50">&lt;a..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (147,077,173 samples, 2.84%)</title><rect x="71.5785%" y="405" width="2.8410%" height="15" fill="rgb(212,48,18)" fg:x="3705542953" fg:w="147077173"/><text x="71.8285%" y="415.50">al..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (147,077,173 samples, 2.84%)</title><rect x="71.5785%" y="389" width="2.8410%" height="15" fill="rgb(230,214,11)" fg:x="3705542953" fg:w="147077173"/><text x="71.8285%" y="399.50">&lt;a..</text></g><g><title>alloc::alloc::dealloc (147,077,173 samples, 2.84%)</title><rect x="71.5785%" y="373" width="2.8410%" height="15" fill="rgb(254,105,39)" fg:x="3705542953" fg:w="147077173"/><text x="71.8285%" y="383.50">al..</text></g><g><title>cfree (147,077,173 samples, 2.84%)</title><rect x="71.5785%" y="357" width="2.8410%" height="15" fill="rgb(245,158,5)" fg:x="3705542953" fg:w="147077173"/><text x="71.8285%" y="367.50">cf..</text></g><g><title>[libc.so.6] (147,077,173 samples, 2.84%)</title><rect x="71.5785%" y="341" width="2.8410%" height="15" fill="rgb(249,208,11)" fg:x="3705542953" fg:w="147077173"/><text x="71.8285%" y="351.50">[l..</text></g><g><title>[libc.so.6] (147,077,173 samples, 2.84%)</title><rect x="71.5785%" y="325" width="2.8410%" height="15" fill="rgb(210,39,28)" fg:x="3705542953" fg:w="147077173"/><text x="71.8285%" y="335.50">[l..</text></g><g><title>[libc.so.6] (28,149,367 samples, 0.54%)</title><rect x="73.8758%" y="309" width="0.5437%" height="15" fill="rgb(211,56,53)" fg:x="3824470759" fg:w="28149367"/><text x="74.1258%" y="319.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCSystem::collect (749,050,191 samples, 14.47%)</title><rect x="59.9830%" y="533" width="14.4691%" height="15" fill="rgb(226,201,30)" fg:x="3105256364" fg:w="749050191"/><text x="60.2330%" y="543.50">XLang_Rust::vm::gc::gc..</text></g><g><title>XLang_Rust::vm::gc::gc::GCSystem::sweep (1,686,429 samples, 0.03%)</title><rect x="74.4195%" y="517" width="0.0326%" height="15" fill="rgb(239,101,34)" fg:x="3852620126" fg:w="1686429"/><text x="74.6695%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;XLang_Rust::vm::gc::gc::GCRef&gt;&gt; (1,686,429 samples, 0.03%)</title><rect x="74.4195%" y="501" width="0.0326%" height="15" fill="rgb(226,209,5)" fg:x="3852620126" fg:w="1686429"/><text x="74.6695%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;XLang_Rust::vm::gc::gc::GCRef&gt;&gt; (1,686,429 samples, 0.03%)</title><rect x="74.4195%" y="485" width="0.0326%" height="15" fill="rgb(250,105,47)" fg:x="3852620126" fg:w="1686429"/><text x="74.6695%" y="495.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,686,429 samples, 0.03%)</title><rect x="74.4195%" y="469" width="0.0326%" height="15" fill="rgb(230,72,3)" fg:x="3852620126" fg:w="1686429"/><text x="74.6695%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (1,686,429 samples, 0.03%)</title><rect x="74.4195%" y="453" width="0.0326%" height="15" fill="rgb(232,218,39)" fg:x="3852620126" fg:w="1686429"/><text x="74.6695%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1,686,429 samples, 0.03%)</title><rect x="74.4195%" y="437" width="0.0326%" height="15" fill="rgb(248,166,6)" fg:x="3852620126" fg:w="1686429"/><text x="74.6695%" y="447.50"></text></g><g><title>alloc::alloc::dealloc (1,686,429 samples, 0.03%)</title><rect x="74.4195%" y="421" width="0.0326%" height="15" fill="rgb(247,89,20)" fg:x="3852620126" fg:w="1686429"/><text x="74.6695%" y="431.50"></text></g><g><title>cfree (1,686,429 samples, 0.03%)</title><rect x="74.4195%" y="405" width="0.0326%" height="15" fill="rgb(248,130,54)" fg:x="3852620126" fg:w="1686429"/><text x="74.6695%" y="415.50"></text></g><g><title>[libc.so.6] (1,686,429 samples, 0.03%)</title><rect x="74.4195%" y="389" width="0.0326%" height="15" fill="rgb(234,196,4)" fg:x="3852620126" fg:w="1686429"/><text x="74.6695%" y="399.50"></text></g><g><title>__default_morecore (1,686,429 samples, 0.03%)</title><rect x="74.4195%" y="373" width="0.0326%" height="15" fill="rgb(250,143,31)" fg:x="3852620126" fg:w="1686429"/><text x="74.6695%" y="383.50"></text></g><g><title>__sbrk (1,686,429 samples, 0.03%)</title><rect x="74.4195%" y="357" width="0.0326%" height="15" fill="rgb(211,110,34)" fg:x="3852620126" fg:w="1686429"/><text x="74.6695%" y="367.50"></text></g><g><title>brk (1,686,429 samples, 0.03%)</title><rect x="74.4195%" y="341" width="0.0326%" height="15" fill="rgb(215,124,48)" fg:x="3852620126" fg:w="1686429"/><text x="74.6695%" y="351.50"></text></g><g><title>[unknown] (1,686,429 samples, 0.03%)</title><rect x="74.4195%" y="325" width="0.0326%" height="15" fill="rgb(216,46,13)" fg:x="3852620126" fg:w="1686429"/><text x="74.6695%" y="335.50"></text></g><g><title>[unknown] (1,686,429 samples, 0.03%)</title><rect x="74.4195%" y="309" width="0.0326%" height="15" fill="rgb(205,184,25)" fg:x="3852620126" fg:w="1686429"/><text x="74.6695%" y="319.50"></text></g><g><title>[unknown] (1,686,429 samples, 0.03%)</title><rect x="74.4195%" y="293" width="0.0326%" height="15" fill="rgb(228,1,10)" fg:x="3852620126" fg:w="1686429"/><text x="74.6695%" y="303.50"></text></g><g><title>[unknown] (1,686,429 samples, 0.03%)</title><rect x="74.4195%" y="277" width="0.0326%" height="15" fill="rgb(213,116,27)" fg:x="3852620126" fg:w="1686429"/><text x="74.6695%" y="287.50"></text></g><g><title>[unknown] (1,686,429 samples, 0.03%)</title><rect x="74.4195%" y="261" width="0.0326%" height="15" fill="rgb(241,95,50)" fg:x="3852620126" fg:w="1686429"/><text x="74.6695%" y="271.50"></text></g><g><title>__rdl_alloc (6,868,635 samples, 0.13%)</title><rect x="75.0197%" y="453" width="0.1327%" height="15" fill="rgb(238,48,32)" fg:x="3883691615" fg:w="6868635"/><text x="75.2697%" y="463.50"></text></g><g><title>core::ptr::read_volatile (6,882,048 samples, 0.13%)</title><rect x="75.1524%" y="453" width="0.1329%" height="15" fill="rgb(235,113,49)" fg:x="3890560250" fg:w="6882048"/><text x="75.4024%" y="463.50"></text></g><g><title>[libc.so.6] (17,260,516 samples, 0.33%)</title><rect x="80.4655%" y="421" width="0.3334%" height="15" fill="rgb(205,127,43)" fg:x="4165614674" fg:w="17260516"/><text x="80.7155%" y="431.50"></text></g><g><title>__default_morecore (6,876,999 samples, 0.13%)</title><rect x="80.6661%" y="405" width="0.1328%" height="15" fill="rgb(250,162,2)" fg:x="4175998191" fg:w="6876999"/><text x="80.9161%" y="415.50"></text></g><g><title>__sbrk (6,876,999 samples, 0.13%)</title><rect x="80.6661%" y="389" width="0.1328%" height="15" fill="rgb(220,13,41)" fg:x="4175998191" fg:w="6876999"/><text x="80.9161%" y="399.50"></text></g><g><title>brk (5,146,592 samples, 0.10%)</title><rect x="80.6995%" y="373" width="0.0994%" height="15" fill="rgb(249,221,25)" fg:x="4177728598" fg:w="5146592"/><text x="80.9495%" y="383.50"></text></g><g><title>[unknown] (5,146,592 samples, 0.10%)</title><rect x="80.6995%" y="357" width="0.0994%" height="15" fill="rgb(215,208,19)" fg:x="4177728598" fg:w="5146592"/><text x="80.9495%" y="367.50"></text></g><g><title>[unknown] (5,146,592 samples, 0.10%)</title><rect x="80.6995%" y="341" width="0.0994%" height="15" fill="rgb(236,175,2)" fg:x="4177728598" fg:w="5146592"/><text x="80.9495%" y="351.50"></text></g><g><title>[unknown] (5,146,592 samples, 0.10%)</title><rect x="80.6995%" y="325" width="0.0994%" height="15" fill="rgb(241,52,2)" fg:x="4177728598" fg:w="5146592"/><text x="80.9495%" y="335.50"></text></g><g><title>[unknown] (5,146,592 samples, 0.10%)</title><rect x="80.6995%" y="309" width="0.0994%" height="15" fill="rgb(248,140,14)" fg:x="4177728598" fg:w="5146592"/><text x="80.9495%" y="319.50"></text></g><g><title>[unknown] (5,146,592 samples, 0.10%)</title><rect x="80.6995%" y="293" width="0.0994%" height="15" fill="rgb(253,22,42)" fg:x="4177728598" fg:w="5146592"/><text x="80.9495%" y="303.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (402,808,724 samples, 7.78%)</title><rect x="74.4521%" y="533" width="7.7809%" height="15" fill="rgb(234,61,47)" fg:x="3854306555" fg:w="402808724"/><text x="74.7021%" y="543.50">alloc::boxe..</text></g><g><title>alloc::alloc::exchange_malloc (388,961,172 samples, 7.51%)</title><rect x="74.7196%" y="517" width="7.5134%" height="15" fill="rgb(208,226,15)" fg:x="3868154107" fg:w="388961172"/><text x="74.9696%" y="527.50">alloc::all..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (388,961,172 samples, 7.51%)</title><rect x="74.7196%" y="501" width="7.5134%" height="15" fill="rgb(217,221,4)" fg:x="3868154107" fg:w="388961172"/><text x="74.9696%" y="511.50">&lt;alloc::al..</text></g><g><title>alloc::alloc::Global::alloc_impl (388,961,172 samples, 7.51%)</title><rect x="74.7196%" y="485" width="7.5134%" height="15" fill="rgb(212,174,34)" fg:x="3868154107" fg:w="388961172"/><text x="74.9696%" y="495.50">alloc::all..</text></g><g><title>alloc::alloc::alloc (388,961,172 samples, 7.51%)</title><rect x="74.7196%" y="469" width="7.5134%" height="15" fill="rgb(253,83,4)" fg:x="3868154107" fg:w="388961172"/><text x="74.9696%" y="479.50">alloc::all..</text></g><g><title>malloc (359,672,981 samples, 6.95%)</title><rect x="75.2853%" y="453" width="6.9477%" height="15" fill="rgb(250,195,49)" fg:x="3897442298" fg:w="359672981"/><text x="75.5353%" y="463.50">malloc</text></g><g><title>[libc.so.6] (290,335,116 samples, 5.61%)</title><rect x="76.6247%" y="437" width="5.6083%" height="15" fill="rgb(241,192,25)" fg:x="3966780163" fg:w="290335116"/><text x="76.8747%" y="447.50">[libc.s..</text></g><g><title>[unknown] (74,240,089 samples, 1.43%)</title><rect x="80.7989%" y="421" width="1.4341%" height="15" fill="rgb(208,124,10)" fg:x="4182875190" fg:w="74240089"/><text x="81.0489%" y="431.50"></text></g><g><title>[unknown] (74,240,089 samples, 1.43%)</title><rect x="80.7989%" y="405" width="1.4341%" height="15" fill="rgb(222,33,0)" fg:x="4182875190" fg:w="74240089"/><text x="81.0489%" y="415.50"></text></g><g><title>[unknown] (74,240,089 samples, 1.43%)</title><rect x="80.7989%" y="389" width="1.4341%" height="15" fill="rgb(234,209,28)" fg:x="4182875190" fg:w="74240089"/><text x="81.0489%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity (1,739,195 samples, 0.03%)</title><rect x="82.5680%" y="517" width="0.0336%" height="15" fill="rgb(224,11,23)" fg:x="4274460928" fg:w="1739195"/><text x="82.8180%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::capacity (1,739,195 samples, 0.03%)</title><rect x="82.5680%" y="501" width="0.0336%" height="15" fill="rgb(232,99,1)" fg:x="4274460928" fg:w="1739195"/><text x="82.8180%" y="511.50"></text></g><g><title>[libc.so.6] (6,712,376 samples, 0.13%)</title><rect x="82.6016%" y="373" width="0.1297%" height="15" fill="rgb(237,95,45)" fg:x="4276200123" fg:w="6712376"/><text x="82.8516%" y="383.50"></text></g><g><title>[libc.so.6] (1,652,893 samples, 0.03%)</title><rect x="82.6994%" y="357" width="0.0319%" height="15" fill="rgb(208,109,11)" fg:x="4281259606" fg:w="1652893"/><text x="82.9494%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (15,537,664 samples, 0.30%)</title><rect x="82.6016%" y="517" width="0.3001%" height="15" fill="rgb(216,190,48)" fg:x="4276200123" fg:w="15537664"/><text x="82.8516%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (15,537,664 samples, 0.30%)</title><rect x="82.6016%" y="501" width="0.3001%" height="15" fill="rgb(251,171,36)" fg:x="4276200123" fg:w="15537664"/><text x="82.8516%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (15,537,664 samples, 0.30%)</title><rect x="82.6016%" y="485" width="0.3001%" height="15" fill="rgb(230,62,22)" fg:x="4276200123" fg:w="15537664"/><text x="82.8516%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (15,537,664 samples, 0.30%)</title><rect x="82.6016%" y="469" width="0.3001%" height="15" fill="rgb(225,114,35)" fg:x="4276200123" fg:w="15537664"/><text x="82.8516%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (15,537,664 samples, 0.30%)</title><rect x="82.6016%" y="453" width="0.3001%" height="15" fill="rgb(215,118,42)" fg:x="4276200123" fg:w="15537664"/><text x="82.8516%" y="463.50"></text></g><g><title>alloc::alloc::Global::grow_impl (15,537,664 samples, 0.30%)</title><rect x="82.6016%" y="437" width="0.3001%" height="15" fill="rgb(243,119,21)" fg:x="4276200123" fg:w="15537664"/><text x="82.8516%" y="447.50"></text></g><g><title>alloc::alloc::realloc (15,537,664 samples, 0.30%)</title><rect x="82.6016%" y="421" width="0.3001%" height="15" fill="rgb(252,177,53)" fg:x="4276200123" fg:w="15537664"/><text x="82.8516%" y="431.50"></text></g><g><title>realloc (15,537,664 samples, 0.30%)</title><rect x="82.6016%" y="405" width="0.3001%" height="15" fill="rgb(237,209,29)" fg:x="4276200123" fg:w="15537664"/><text x="82.8516%" y="415.50"></text></g><g><title>[libc.so.6] (15,537,664 samples, 0.30%)</title><rect x="82.6016%" y="389" width="0.3001%" height="15" fill="rgb(212,65,23)" fg:x="4276200123" fg:w="15537664"/><text x="82.8516%" y="399.50"></text></g><g><title>memcpy (8,825,288 samples, 0.17%)</title><rect x="82.7313%" y="373" width="0.1705%" height="15" fill="rgb(230,222,46)" fg:x="4282912499" fg:w="8825288"/><text x="82.9813%" y="383.50"></text></g><g><title>[unknown] (8,825,288 samples, 0.17%)</title><rect x="82.7313%" y="357" width="0.1705%" height="15" fill="rgb(215,135,32)" fg:x="4282912499" fg:w="8825288"/><text x="82.9813%" y="367.50"></text></g><g><title>[unknown] (8,825,288 samples, 0.17%)</title><rect x="82.7313%" y="341" width="0.1705%" height="15" fill="rgb(246,101,22)" fg:x="4282912499" fg:w="8825288"/><text x="82.9813%" y="351.50"></text></g><g><title>[unknown] (8,825,288 samples, 0.17%)</title><rect x="82.7313%" y="325" width="0.1705%" height="15" fill="rgb(206,107,13)" fg:x="4282912499" fg:w="8825288"/><text x="82.9813%" y="335.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1,785,805 samples, 0.03%)</title><rect x="82.9018%" y="517" width="0.0345%" height="15" fill="rgb(250,100,44)" fg:x="4291737787" fg:w="1785805"/><text x="83.1518%" y="527.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCSystem::new_object (1,285,396,200 samples, 24.83%)</title><rect x="58.5764%" y="549" width="24.8295%" height="15" fill="rgb(231,147,38)" fg:x="3032438893" fg:w="1285396200"/><text x="58.8264%" y="559.50">XLang_Rust::vm::gc::gc::GCSystem::new_ob..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (60,719,814 samples, 1.17%)</title><rect x="82.2330%" y="533" width="1.1729%" height="15" fill="rgb(229,8,40)" fg:x="4257115279" fg:w="60719814"/><text x="82.4830%" y="543.50"></text></g><g><title>core::ptr::write (24,311,501 samples, 0.47%)</title><rect x="82.9363%" y="517" width="0.4696%" height="15" fill="rgb(221,135,30)" fg:x="4293523592" fg:w="24311501"/><text x="83.1863%" y="527.50"></text></g><g><title>[unknown] (12,157,128 samples, 0.23%)</title><rect x="83.1710%" y="501" width="0.2348%" height="15" fill="rgb(249,193,18)" fg:x="4305677965" fg:w="12157128"/><text x="83.4210%" y="511.50"></text></g><g><title>[unknown] (12,157,128 samples, 0.23%)</title><rect x="83.1710%" y="485" width="0.2348%" height="15" fill="rgb(209,133,39)" fg:x="4305677965" fg:w="12157128"/><text x="83.4210%" y="495.50"></text></g><g><title>[unknown] (12,157,128 samples, 0.23%)</title><rect x="83.1710%" y="469" width="0.2348%" height="15" fill="rgb(232,100,14)" fg:x="4305677965" fg:w="12157128"/><text x="83.4210%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::truncate (5,217,086 samples, 0.10%)</title><rect x="83.4059%" y="549" width="0.1008%" height="15" fill="rgb(224,185,1)" fg:x="4317835093" fg:w="5217086"/><text x="83.6559%" y="559.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1,772,955 samples, 0.03%)</title><rect x="83.5066%" y="549" width="0.0342%" height="15" fill="rgb(223,139,8)" fg:x="4323052179" fg:w="1772955"/><text x="83.7566%" y="559.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1,772,955 samples, 0.03%)</title><rect x="83.5066%" y="533" width="0.0342%" height="15" fill="rgb(232,213,38)" fg:x="4323052179" fg:w="1772955"/><text x="83.7566%" y="543.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (27,132,222 samples, 0.52%)</title><rect x="83.5409%" y="549" width="0.5241%" height="15" fill="rgb(207,94,22)" fg:x="4324825134" fg:w="27132222"/><text x="83.7909%" y="559.50"></text></g><g><title>__rdl_dealloc (5,194,782 samples, 0.10%)</title><rect x="85.0992%" y="469" width="0.1003%" height="15" fill="rgb(219,183,54)" fg:x="4405498513" fg:w="5194782"/><text x="85.3492%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (96,303,036 samples, 1.86%)</title><rect x="85.0661%" y="501" width="1.8602%" height="15" fill="rgb(216,185,54)" fg:x="4403782815" fg:w="96303036"/><text x="85.3161%" y="511.50">&lt;..</text></g><g><title>alloc::alloc::dealloc (96,303,036 samples, 1.86%)</title><rect x="85.0661%" y="485" width="1.8602%" height="15" fill="rgb(254,217,39)" fg:x="4403782815" fg:w="96303036"/><text x="85.3161%" y="495.50">a..</text></g><g><title>cfree (89,392,556 samples, 1.73%)</title><rect x="85.1996%" y="469" width="1.7268%" height="15" fill="rgb(240,178,23)" fg:x="4410693295" fg:w="89392556"/><text x="85.4496%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;XLang_Rust::vm::ir::IR&gt; (149,850,710 samples, 2.89%)</title><rect x="84.0650%" y="549" width="2.8946%" height="15" fill="rgb(218,11,47)" fg:x="4351957356" fg:w="149850710"/><text x="84.3150%" y="559.50">co..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (98,025,251 samples, 1.89%)</title><rect x="85.0661%" y="533" width="1.8935%" height="15" fill="rgb(218,51,51)" fg:x="4403782815" fg:w="98025251"/><text x="85.3161%" y="543.50">&lt;..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (98,025,251 samples, 1.89%)</title><rect x="85.0661%" y="517" width="1.8935%" height="15" fill="rgb(238,126,27)" fg:x="4403782815" fg:w="98025251"/><text x="85.3161%" y="527.50">a..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (1,722,215 samples, 0.03%)</title><rect x="86.9263%" y="501" width="0.0333%" height="15" fill="rgb(249,202,22)" fg:x="4500085851" fg:w="1722215"/><text x="87.1763%" y="511.50"></text></g><g><title>XLang_Rust::vm::executor::vm::IRExecutor::execute_instruction (3,149,831,733 samples, 60.84%)</title><rect x="26.6509%" y="565" width="60.8440%" height="15" fill="rgb(254,195,49)" fg:x="1379690619" fg:w="3149831733"/><text x="26.9009%" y="575.50">XLang_Rust::vm::executor::vm::IRExecutor::execute_instruction</text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (27,714,286 samples, 0.54%)</title><rect x="86.9596%" y="549" width="0.5353%" height="15" fill="rgb(208,123,14)" fg:x="4501808066" fg:w="27714286"/><text x="87.2096%" y="559.50"></text></g><g><title>&lt;XLang_Rust::vm::executor::variable::VMInstructions as XLang_Rust::vm::gc::gc::GCObject&gt;::get_const_traceable (39,928,930 samples, 0.77%)</title><rect x="93.5994%" y="517" width="0.7713%" height="15" fill="rgb(224,200,8)" fg:x="4845541780" fg:w="39928930"/><text x="93.8494%" y="527.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCRef::as_const_type (371,479,443 samples, 7.18%)</title><rect x="87.4949%" y="565" width="7.1757%" height="15" fill="rgb(217,61,36)" fg:x="4529522352" fg:w="371479443"/><text x="87.7449%" y="575.50">XLang_Rust..</text></g><g><title>XLang_Rust::vm::gc::gc::GCRef::isinstance (261,133,752 samples, 5.04%)</title><rect x="89.6265%" y="549" width="5.0442%" height="15" fill="rgb(206,35,45)" fg:x="4639868043" fg:w="261133752"/><text x="89.8765%" y="559.50">XLang_..</text></g><g><title>XLang_Rust::vm::gc::gc::GCRef::get_const_traceable (261,133,752 samples, 5.04%)</title><rect x="89.6265%" y="533" width="5.0442%" height="15" fill="rgb(217,65,33)" fg:x="4639868043" fg:w="261133752"/><text x="89.8765%" y="543.50">XLang_..</text></g><g><title>&lt;XLang_Rust::vm::executor::variable::VMLambda as XLang_Rust::vm::gc::gc::GCObject&gt;::get_const_traceable (15,531,085 samples, 0.30%)</title><rect x="94.3707%" y="517" width="0.3000%" height="15" fill="rgb(222,158,48)" fg:x="4885470710" fg:w="15531085"/><text x="94.6207%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (22,461,239 samples, 0.43%)</title><rect x="94.6707%" y="565" width="0.4339%" height="15" fill="rgb(254,2,54)" fg:x="4901001795" fg:w="22461239"/><text x="94.9207%" y="575.50"></text></g><g><title>XLang_Rust::vm::executor::vm::IRExecutor::step (4,619,069,557 samples, 89.22%)</title><rect x="6.2163%" y="581" width="89.2247%" height="15" fill="rgb(250,143,38)" fg:x="321810509" fg:w="4619069557"/><text x="6.4663%" y="591.50">XLang_Rust::vm::executor::vm::IRExecutor::step</text></g><g><title>core::option::Option&lt;T&gt;::unwrap (17,417,032 samples, 0.34%)</title><rect x="95.1045%" y="565" width="0.3364%" height="15" fill="rgb(248,25,0)" fg:x="4923463034" fg:w="17417032"/><text x="95.3545%" y="575.50"></text></g><g><title>XLang_Rust::vm::executor::vm::VMCoroutinePool::step_all (4,839,557,972 samples, 93.48%)</title><rect x="2.2255%" y="597" width="93.4838%" height="15" fill="rgb(206,152,27)" fg:x="115213909" fg:w="4839557972"/><text x="2.4755%" y="607.50">XLang_Rust::vm::executor::vm::VMCoroutinePool::step_all</text></g><g><title>alloc::vec::Vec&lt;T&gt;::new (13,891,815 samples, 0.27%)</title><rect x="95.4410%" y="581" width="0.2683%" height="15" fill="rgb(240,77,30)" fg:x="4940880066" fg:w="13891815"/><text x="95.6910%" y="591.50"></text></g><g><title>&lt;XLang_Rust::vm::executor::variable::VMCoroutineStatus as core::cmp::PartialEq&gt;::eq (36,460,358 samples, 0.70%)</title><rect x="95.7093%" y="581" width="0.7043%" height="15" fill="rgb(231,5,3)" fg:x="4954771881" fg:w="36460358"/><text x="95.9593%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (17,311,435 samples, 0.33%)</title><rect x="96.4136%" y="581" width="0.3344%" height="15" fill="rgb(207,226,32)" fg:x="4991232239" fg:w="17311435"/><text x="96.6636%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (17,311,435 samples, 0.33%)</title><rect x="96.4136%" y="565" width="0.3344%" height="15" fill="rgb(222,207,47)" fg:x="4991232239" fg:w="17311435"/><text x="96.6636%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (19,067,359 samples, 0.37%)</title><rect x="96.7480%" y="581" width="0.3683%" height="15" fill="rgb(229,115,45)" fg:x="5008543674" fg:w="19067359"/><text x="96.9980%" y="591.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (19,067,359 samples, 0.37%)</title><rect x="96.7480%" y="565" width="0.3683%" height="15" fill="rgb(224,191,6)" fg:x="5008543674" fg:w="19067359"/><text x="96.9980%" y="575.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (15,663,694 samples, 0.30%)</title><rect x="96.8138%" y="549" width="0.3026%" height="15" fill="rgb(230,227,24)" fg:x="5011947339" fg:w="15663694"/><text x="97.0638%" y="559.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCRef::as_const_type (101,092,299 samples, 1.95%)</title><rect x="97.1163%" y="581" width="1.9528%" height="15" fill="rgb(228,80,19)" fg:x="5027611033" fg:w="101092299"/><text x="97.3663%" y="591.50">X..</text></g><g><title>XLang_Rust::vm::gc::gc::GCRef::isinstance (71,648,579 samples, 1.38%)</title><rect x="97.6851%" y="565" width="1.3840%" height="15" fill="rgb(247,229,0)" fg:x="5057054753" fg:w="71648579"/><text x="97.9351%" y="575.50"></text></g><g><title>XLang_Rust::vm::gc::gc::GCRef::get_const_traceable (71,648,579 samples, 1.38%)</title><rect x="97.6851%" y="549" width="1.3840%" height="15" fill="rgb(237,194,15)" fg:x="5057054753" fg:w="71648579"/><text x="97.9351%" y="559.50"></text></g><g><title>&lt;XLang_Rust::vm::executor::variable::VMLambda as XLang_Rust::vm::gc::gc::GCObject&gt;::get_const_traceable (17,441,564 samples, 0.34%)</title><rect x="98.7322%" y="533" width="0.3369%" height="15" fill="rgb(219,203,20)" fg:x="5111261768" fg:w="17441564"/><text x="98.9822%" y="543.50"></text></g><g><title>XLang_Rust::vm::executor::vm::VMCoroutinePool::sweep_finished (184,322,162 samples, 3.56%)</title><rect x="95.7093%" y="597" width="3.5605%" height="15" fill="rgb(234,128,8)" fg:x="4954771881" fg:w="184322162"/><text x="95.9593%" y="607.50">XLan..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (10,390,711 samples, 0.20%)</title><rect x="99.0691%" y="581" width="0.2007%" height="15" fill="rgb(248,202,8)" fg:x="5128703332" fg:w="10390711"/><text x="99.3191%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (10,390,711 samples, 0.20%)</title><rect x="99.0691%" y="565" width="0.2007%" height="15" fill="rgb(206,104,37)" fg:x="5128703332" fg:w="10390711"/><text x="99.3191%" y="575.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (10,390,711 samples, 0.20%)</title><rect x="99.0691%" y="549" width="0.2007%" height="15" fill="rgb(223,8,27)" fg:x="5128703332" fg:w="10390711"/><text x="99.3191%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (10,390,711 samples, 0.20%)</title><rect x="99.0691%" y="533" width="0.2007%" height="15" fill="rgb(216,217,28)" fg:x="5128703332" fg:w="10390711"/><text x="99.3191%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (10,390,711 samples, 0.20%)</title><rect x="99.0691%" y="517" width="0.2007%" height="15" fill="rgb(249,199,1)" fg:x="5128703332" fg:w="10390711"/><text x="99.3191%" y="527.50"></text></g><g><title>XLang_Rust::run_file (5,118,810,301 samples, 98.88%)</title><rect x="0.4252%" y="645" width="98.8780%" height="15" fill="rgb(240,85,17)" fg:x="22012027" fg:w="5118810301"/><text x="0.6752%" y="655.50">XLang_Rust::run_file</text></g><g><title>XLang_Rust::execute_ir (5,100,296,610 samples, 98.52%)</title><rect x="0.7828%" y="629" width="98.5204%" height="15" fill="rgb(206,108,45)" fg:x="40525718" fg:w="5100296610"/><text x="1.0328%" y="639.50">XLang_Rust::execute_ir</text></g><g><title>XLang_Rust::vm::executor::vm::VMCoroutinePool::run_until_finished (5,100,296,610 samples, 98.52%)</title><rect x="0.7828%" y="613" width="98.5204%" height="15" fill="rgb(245,210,41)" fg:x="40525718" fg:w="5100296610"/><text x="1.0328%" y="623.50">XLang_Rust::vm::executor::vm::VMCoroutinePool::run_until_finished</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::is_empty (1,728,285 samples, 0.03%)</title><rect x="99.2698%" y="597" width="0.0334%" height="15" fill="rgb(206,13,37)" fg:x="5139094043" fg:w="1728285"/><text x="99.5198%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (1,728,285 samples, 0.03%)</title><rect x="99.2698%" y="581" width="0.0334%" height="15" fill="rgb(250,61,18)" fg:x="5139094043" fg:w="1728285"/><text x="99.5198%" y="591.50"></text></g><g><title>_start (5,119,173,203 samples, 98.88%)</title><rect x="0.4252%" y="789" width="98.8850%" height="15" fill="rgb(235,172,48)" fg:x="22012027" fg:w="5119173203"/><text x="0.6752%" y="799.50">_start</text></g><g><title>__libc_start_main (5,119,173,203 samples, 98.88%)</title><rect x="0.4252%" y="773" width="98.8850%" height="15" fill="rgb(249,201,17)" fg:x="22012027" fg:w="5119173203"/><text x="0.6752%" y="783.50">__libc_start_main</text></g><g><title>[libc.so.6] (5,119,173,203 samples, 98.88%)</title><rect x="0.4252%" y="757" width="98.8850%" height="15" fill="rgb(219,208,6)" fg:x="22012027" fg:w="5119173203"/><text x="0.6752%" y="767.50">[libc.so.6]</text></g><g><title>main (5,119,173,203 samples, 98.88%)</title><rect x="0.4252%" y="741" width="98.8850%" height="15" fill="rgb(248,31,23)" fg:x="22012027" fg:w="5119173203"/><text x="0.6752%" y="751.50">main</text></g><g><title>std::rt::lang_start_internal (5,119,173,203 samples, 98.88%)</title><rect x="0.4252%" y="725" width="98.8850%" height="15" fill="rgb(245,15,42)" fg:x="22012027" fg:w="5119173203"/><text x="0.6752%" y="735.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::_{{closure}} (5,119,173,203 samples, 98.88%)</title><rect x="0.4252%" y="709" width="98.8850%" height="15" fill="rgb(222,217,39)" fg:x="22012027" fg:w="5119173203"/><text x="0.6752%" y="719.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (5,119,173,203 samples, 98.88%)</title><rect x="0.4252%" y="693" width="98.8850%" height="15" fill="rgb(210,219,27)" fg:x="22012027" fg:w="5119173203"/><text x="0.6752%" y="703.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (5,119,173,203 samples, 98.88%)</title><rect x="0.4252%" y="677" width="98.8850%" height="15" fill="rgb(252,166,36)" fg:x="22012027" fg:w="5119173203"/><text x="0.6752%" y="687.50">core::ops::function::FnOnce::call_once</text></g><g><title>XLang_Rust::main (5,119,173,203 samples, 98.88%)</title><rect x="0.4252%" y="661" width="98.8850%" height="15" fill="rgb(245,132,34)" fg:x="22012027" fg:w="5119173203"/><text x="0.6752%" y="671.50">XLang_Rust::main</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2,766,168 samples, 0.05%)</title><rect x="99.3771%" y="725" width="0.0534%" height="15" fill="rgb(236,54,3)" fg:x="5144647745" fg:w="2766168"/><text x="99.6271%" y="735.50"></text></g><g><title>core::hash::BuildHasher::hash_one (14,802,104 samples, 0.29%)</title><rect x="99.3102%" y="789" width="0.2859%" height="15" fill="rgb(241,173,43)" fg:x="5141185230" fg:w="14802104"/><text x="99.5602%" y="799.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (14,802,104 samples, 0.29%)</title><rect x="99.3102%" y="773" width="0.2859%" height="15" fill="rgb(215,190,9)" fg:x="5141185230" fg:w="14802104"/><text x="99.5602%" y="783.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (14,802,104 samples, 0.29%)</title><rect x="99.3102%" y="757" width="0.2859%" height="15" fill="rgb(242,101,16)" fg:x="5141185230" fg:w="14802104"/><text x="99.5602%" y="767.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (14,802,104 samples, 0.29%)</title><rect x="99.3102%" y="741" width="0.2859%" height="15" fill="rgb(223,190,21)" fg:x="5141185230" fg:w="14802104"/><text x="99.5602%" y="751.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (8,573,421 samples, 0.17%)</title><rect x="99.4305%" y="725" width="0.1656%" height="15" fill="rgb(215,228,25)" fg:x="5147413913" fg:w="8573421"/><text x="99.6805%" y="735.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (5,135,715 samples, 0.10%)</title><rect x="99.4969%" y="709" width="0.0992%" height="15" fill="rgb(225,36,22)" fg:x="5150851619" fg:w="5135715"/><text x="99.7469%" y="719.50"></text></g><g><title>malloc@plt (6,986,143 samples, 0.13%)</title><rect x="99.5961%" y="789" width="0.1349%" height="15" fill="rgb(251,106,46)" fg:x="5155987334" fg:w="6986143"/><text x="99.8461%" y="799.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (895,184 samples, 0.02%)</title><rect x="99.7311%" y="357" width="0.0173%" height="15" fill="rgb(208,90,1)" fg:x="5162973477" fg:w="895184"/><text x="99.9811%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (895,184 samples, 0.02%)</title><rect x="99.7311%" y="341" width="0.0173%" height="15" fill="rgb(243,10,4)" fg:x="5162973477" fg:w="895184"/><text x="99.9811%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (895,184 samples, 0.02%)</title><rect x="99.7311%" y="325" width="0.0173%" height="15" fill="rgb(212,137,27)" fg:x="5162973477" fg:w="895184"/><text x="99.9811%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (895,184 samples, 0.02%)</title><rect x="99.7311%" y="309" width="0.0173%" height="15" fill="rgb(231,220,49)" fg:x="5162973477" fg:w="895184"/><text x="99.9811%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (895,184 samples, 0.02%)</title><rect x="99.7311%" y="293" width="0.0173%" height="15" fill="rgb(237,96,20)" fg:x="5162973477" fg:w="895184"/><text x="99.9811%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (895,184 samples, 0.02%)</title><rect x="99.7311%" y="277" width="0.0173%" height="15" fill="rgb(239,229,30)" fg:x="5162973477" fg:w="895184"/><text x="99.9811%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (895,184 samples, 0.02%)</title><rect x="99.7311%" y="261" width="0.0173%" height="15" fill="rgb(219,65,33)" fg:x="5162973477" fg:w="895184"/><text x="99.9811%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (895,184 samples, 0.02%)</title><rect x="99.7311%" y="245" width="0.0173%" height="15" fill="rgb(243,134,7)" fg:x="5162973477" fg:w="895184"/><text x="99.9811%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (895,184 samples, 0.02%)</title><rect x="99.7311%" y="229" width="0.0173%" height="15" fill="rgb(216,177,54)" fg:x="5162973477" fg:w="895184"/><text x="99.9811%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (895,184 samples, 0.02%)</title><rect x="99.7311%" y="213" width="0.0173%" height="15" fill="rgb(211,160,20)" fg:x="5162973477" fg:w="895184"/><text x="99.9811%" y="223.50"></text></g><g><title>alloc::alloc::alloc (895,184 samples, 0.02%)</title><rect x="99.7311%" y="197" width="0.0173%" height="15" fill="rgb(239,85,39)" fg:x="5162973477" fg:w="895184"/><text x="99.9811%" y="207.50"></text></g><g><title>malloc (895,184 samples, 0.02%)</title><rect x="99.7311%" y="181" width="0.0173%" height="15" fill="rgb(232,125,22)" fg:x="5162973477" fg:w="895184"/><text x="99.9811%" y="191.50"></text></g><g><title>[libc.so.6] (895,184 samples, 0.02%)</title><rect x="99.7311%" y="165" width="0.0173%" height="15" fill="rgb(244,57,34)" fg:x="5162973477" fg:w="895184"/><text x="99.9811%" y="175.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (1,957,534 samples, 0.04%)</title><rect x="99.7311%" y="789" width="0.0378%" height="15" fill="rgb(214,203,32)" fg:x="5162973477" fg:w="1957534"/><text x="99.9811%" y="799.50"></text></g><g><title>regex::builders::Builder::build_one_string (1,957,534 samples, 0.04%)</title><rect x="99.7311%" y="773" width="0.0378%" height="15" fill="rgb(207,58,43)" fg:x="5162973477" fg:w="1957534"/><text x="99.9811%" y="783.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (1,957,534 samples, 0.04%)</title><rect x="99.7311%" y="757" width="0.0378%" height="15" fill="rgb(215,193,15)" fg:x="5162973477" fg:w="1957534"/><text x="99.9811%" y="767.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many (1,957,534 samples, 0.04%)</title><rect x="99.7311%" y="741" width="0.0378%" height="15" fill="rgb(232,15,44)" fg:x="5162973477" fg:w="1957534"/><text x="99.9811%" y="751.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir (1,957,534 samples, 0.04%)</title><rect x="99.7311%" y="725" width="0.0378%" height="15" fill="rgb(212,3,48)" fg:x="5162973477" fg:w="1957534"/><text x="99.9811%" y="735.50"></text></g><g><title>regex_automata::meta::strategy::new (1,957,534 samples, 0.04%)</title><rect x="99.7311%" y="709" width="0.0378%" height="15" fill="rgb(218,128,7)" fg:x="5162973477" fg:w="1957534"/><text x="99.9811%" y="719.50"></text></g><g><title>regex_automata::meta::strategy::Core::new (1,957,534 samples, 0.04%)</title><rect x="99.7311%" y="693" width="0.0378%" height="15" fill="rgb(226,216,39)" fg:x="5162973477" fg:w="1957534"/><text x="99.9811%" y="703.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::build_many_from_hir (1,957,534 samples, 0.04%)</title><rect x="99.7311%" y="677" width="0.0378%" height="15" fill="rgb(243,47,51)" fg:x="5162973477" fg:w="1957534"/><text x="99.9811%" y="687.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (1,957,534 samples, 0.04%)</title><rect x="99.7311%" y="661" width="0.0378%" height="15" fill="rgb(241,183,40)" fg:x="5162973477" fg:w="1957534"/><text x="99.9811%" y="671.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_alt_iter (1,957,534 samples, 0.04%)</title><rect x="99.7311%" y="645" width="0.0378%" height="15" fill="rgb(231,217,32)" fg:x="5162973477" fg:w="1957534"/><text x="99.9811%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,957,534 samples, 0.04%)</title><rect x="99.7311%" y="629" width="0.0378%" height="15" fill="rgb(229,61,38)" fg:x="5162973477" fg:w="1957534"/><text x="99.9811%" y="639.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1,957,534 samples, 0.04%)</title><rect x="99.7311%" y="613" width="0.0378%" height="15" fill="rgb(225,210,5)" fg:x="5162973477" fg:w="1957534"/><text x="99.9811%" y="623.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1,957,534 samples, 0.04%)</title><rect x="99.7311%" y="597" width="0.0378%" height="15" fill="rgb(231,79,45)" fg:x="5162973477" fg:w="1957534"/><text x="99.9811%" y="607.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile::_{{closure}} (1,957,534 samples, 0.04%)</title><rect x="99.7311%" y="581" width="0.0378%" height="15" fill="rgb(224,100,7)" fg:x="5162973477" fg:w="1957534"/><text x="99.9811%" y="591.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1,957,534 samples, 0.04%)</title><rect x="99.7311%" y="565" width="0.0378%" height="15" fill="rgb(241,198,18)" fg:x="5162973477" fg:w="1957534"/><text x="99.9811%" y="575.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1,957,534 samples, 0.04%)</title><rect x="99.7311%" y="549" width="0.0378%" height="15" fill="rgb(252,97,53)" fg:x="5162973477" fg:w="1957534"/><text x="99.9811%" y="559.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_concat (1,957,534 samples, 0.04%)</title><rect x="99.7311%" y="533" width="0.0378%" height="15" fill="rgb(220,88,7)" fg:x="5162973477" fg:w="1957534"/><text x="99.9811%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,957,534 samples, 0.04%)</title><rect x="99.7311%" y="517" width="0.0378%" height="15" fill="rgb(213,176,14)" fg:x="5162973477" fg:w="1957534"/><text x="99.9811%" y="527.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1,957,534 samples, 0.04%)</title><rect x="99.7311%" y="501" width="0.0378%" height="15" fill="rgb(246,73,7)" fg:x="5162973477" fg:w="1957534"/><text x="99.9811%" y="511.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1,957,534 samples, 0.04%)</title><rect x="99.7311%" y="485" width="0.0378%" height="15" fill="rgb(245,64,36)" fg:x="5162973477" fg:w="1957534"/><text x="99.9811%" y="495.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c::_{{closure}} (1,957,534 samples, 0.04%)</title><rect x="99.7311%" y="469" width="0.0378%" height="15" fill="rgb(245,80,10)" fg:x="5162973477" fg:w="1957534"/><text x="99.9811%" y="479.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1,957,534 samples, 0.04%)</title><rect x="99.7311%" y="453" width="0.0378%" height="15" fill="rgb(232,107,50)" fg:x="5162973477" fg:w="1957534"/><text x="99.9811%" y="463.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1,957,534 samples, 0.04%)</title><rect x="99.7311%" y="437" width="0.0378%" height="15" fill="rgb(253,3,0)" fg:x="5162973477" fg:w="1957534"/><text x="99.9811%" y="447.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_unicode_class (1,957,534 samples, 0.04%)</title><rect x="99.7311%" y="421" width="0.0378%" height="15" fill="rgb(212,99,53)" fg:x="5162973477" fg:w="1957534"/><text x="99.9811%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (1,957,534 samples, 0.04%)</title><rect x="99.7311%" y="405" width="0.0378%" height="15" fill="rgb(249,111,54)" fg:x="5162973477" fg:w="1957534"/><text x="99.9811%" y="415.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1,957,534 samples, 0.04%)</title><rect x="99.7311%" y="389" width="0.0378%" height="15" fill="rgb(249,55,30)" fg:x="5162973477" fg:w="1957534"/><text x="99.9811%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1,957,534 samples, 0.04%)</title><rect x="99.7311%" y="373" width="0.0378%" height="15" fill="rgb(237,47,42)" fg:x="5162973477" fg:w="1957534"/><text x="99.9811%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::hash (1,062,350 samples, 0.02%)</title><rect x="99.7484%" y="357" width="0.0205%" height="15" fill="rgb(211,20,18)" fg:x="5163868661" fg:w="1062350"/><text x="99.9984%" y="367.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (1,065,605 samples, 0.02%)</title><rect x="99.7689%" y="341" width="0.0206%" height="15" fill="rgb(231,203,46)" fg:x="5164931011" fg:w="1065605"/><text x="100.0189%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (5,509,746 samples, 0.11%)</title><rect x="99.7689%" y="389" width="0.1064%" height="15" fill="rgb(237,142,3)" fg:x="5164931011" fg:w="5509746"/><text x="100.0189%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (5,509,746 samples, 0.11%)</title><rect x="99.7689%" y="373" width="0.1064%" height="15" fill="rgb(241,107,1)" fg:x="5164931011" fg:w="5509746"/><text x="100.0189%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::pop_freeze (5,509,746 samples, 0.11%)</title><rect x="99.7689%" y="357" width="0.1064%" height="15" fill="rgb(229,83,13)" fg:x="5164931011" fg:w="5509746"/><text x="100.0189%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Node::set_last_transition (4,444,141 samples, 0.09%)</title><rect x="99.7895%" y="341" width="0.0858%" height="15" fill="rgb(241,91,40)" fg:x="5165996616" fg:w="4444141"/><text x="100.0395%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (4,444,141 samples, 0.09%)</title><rect x="99.7895%" y="325" width="0.0858%" height="15" fill="rgb(225,3,45)" fg:x="5165996616" fg:w="4444141"/><text x="100.0395%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (4,444,141 samples, 0.09%)</title><rect x="99.7895%" y="309" width="0.0858%" height="15" fill="rgb(244,223,14)" fg:x="5165996616" fg:w="4444141"/><text x="100.0395%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (3,184,775 samples, 0.06%)</title><rect x="99.8138%" y="293" width="0.0615%" height="15" fill="rgb(224,124,37)" fg:x="5167255982" fg:w="3184775"/><text x="100.0638%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (3,184,775 samples, 0.06%)</title><rect x="99.8138%" y="277" width="0.0615%" height="15" fill="rgb(251,171,30)" fg:x="5167255982" fg:w="3184775"/><text x="100.0638%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (3,184,775 samples, 0.06%)</title><rect x="99.8138%" y="261" width="0.0615%" height="15" fill="rgb(236,46,54)" fg:x="5167255982" fg:w="3184775"/><text x="100.0638%" y="271.50"></text></g><g><title>malloc (3,184,775 samples, 0.06%)</title><rect x="99.8138%" y="245" width="0.0615%" height="15" fill="rgb(245,213,5)" fg:x="5167255982" fg:w="3184775"/><text x="100.0638%" y="255.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1,068,636 samples, 0.02%)</title><rect x="99.8753%" y="293" width="0.0206%" height="15" fill="rgb(230,144,27)" fg:x="5170440757" fg:w="1068636"/><text x="100.1253%" y="303.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1,068,636 samples, 0.02%)</title><rect x="99.8753%" y="277" width="0.0206%" height="15" fill="rgb(220,86,6)" fg:x="5170440757" fg:w="1068636"/><text x="100.1253%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (1,068,636 samples, 0.02%)</title><rect x="99.8753%" y="261" width="0.0206%" height="15" fill="rgb(240,20,13)" fg:x="5170440757" fg:w="1068636"/><text x="100.1253%" y="271.50"></text></g><g><title>regex::regex::string::Regex::new (9,501,721 samples, 0.18%)</title><rect x="99.7689%" y="789" width="0.1835%" height="15" fill="rgb(217,89,34)" fg:x="5164931011" fg:w="9501721"/><text x="100.0189%" y="799.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (9,501,721 samples, 0.18%)</title><rect x="99.7689%" y="773" width="0.1835%" height="15" fill="rgb(229,13,5)" fg:x="5164931011" fg:w="9501721"/><text x="100.0189%" y="783.50"></text></g><g><title>regex::builders::Builder::build_one_string (9,501,721 samples, 0.18%)</title><rect x="99.7689%" y="757" width="0.1835%" height="15" fill="rgb(244,67,35)" fg:x="5164931011" fg:w="9501721"/><text x="100.0189%" y="767.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (9,501,721 samples, 0.18%)</title><rect x="99.7689%" y="741" width="0.1835%" height="15" fill="rgb(221,40,2)" fg:x="5164931011" fg:w="9501721"/><text x="100.0189%" y="751.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many (9,501,721 samples, 0.18%)</title><rect x="99.7689%" y="725" width="0.1835%" height="15" fill="rgb(237,157,21)" fg:x="5164931011" fg:w="9501721"/><text x="100.0189%" y="735.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir (9,501,721 samples, 0.18%)</title><rect x="99.7689%" y="709" width="0.1835%" height="15" fill="rgb(222,94,11)" fg:x="5164931011" fg:w="9501721"/><text x="100.0189%" y="719.50"></text></g><g><title>regex_automata::meta::strategy::new (9,501,721 samples, 0.18%)</title><rect x="99.7689%" y="693" width="0.1835%" height="15" fill="rgb(249,113,6)" fg:x="5164931011" fg:w="9501721"/><text x="100.0189%" y="703.50"></text></g><g><title>regex_automata::meta::strategy::Core::new (9,501,721 samples, 0.18%)</title><rect x="99.7689%" y="677" width="0.1835%" height="15" fill="rgb(238,137,36)" fg:x="5164931011" fg:w="9501721"/><text x="100.0189%" y="687.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::build_many_from_hir (9,501,721 samples, 0.18%)</title><rect x="99.7689%" y="661" width="0.1835%" height="15" fill="rgb(210,102,26)" fg:x="5164931011" fg:w="9501721"/><text x="100.0189%" y="671.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (9,501,721 samples, 0.18%)</title><rect x="99.7689%" y="645" width="0.1835%" height="15" fill="rgb(218,30,30)" fg:x="5164931011" fg:w="9501721"/><text x="100.0189%" y="655.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_alt_iter (9,501,721 samples, 0.18%)</title><rect x="99.7689%" y="629" width="0.1835%" height="15" fill="rgb(214,67,26)" fg:x="5164931011" fg:w="9501721"/><text x="100.0189%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (9,501,721 samples, 0.18%)</title><rect x="99.7689%" y="613" width="0.1835%" height="15" fill="rgb(251,9,53)" fg:x="5164931011" fg:w="9501721"/><text x="100.0189%" y="623.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (9,501,721 samples, 0.18%)</title><rect x="99.7689%" y="597" width="0.1835%" height="15" fill="rgb(228,204,25)" fg:x="5164931011" fg:w="9501721"/><text x="100.0189%" y="607.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (9,501,721 samples, 0.18%)</title><rect x="99.7689%" y="581" width="0.1835%" height="15" fill="rgb(207,153,8)" fg:x="5164931011" fg:w="9501721"/><text x="100.0189%" y="591.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile::_{{closure}} (9,501,721 samples, 0.18%)</title><rect x="99.7689%" y="565" width="0.1835%" height="15" fill="rgb(242,9,16)" fg:x="5164931011" fg:w="9501721"/><text x="100.0189%" y="575.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (9,501,721 samples, 0.18%)</title><rect x="99.7689%" y="549" width="0.1835%" height="15" fill="rgb(217,211,10)" fg:x="5164931011" fg:w="9501721"/><text x="100.0189%" y="559.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (9,501,721 samples, 0.18%)</title><rect x="99.7689%" y="533" width="0.1835%" height="15" fill="rgb(219,228,52)" fg:x="5164931011" fg:w="9501721"/><text x="100.0189%" y="543.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_concat (9,501,721 samples, 0.18%)</title><rect x="99.7689%" y="517" width="0.1835%" height="15" fill="rgb(231,92,29)" fg:x="5164931011" fg:w="9501721"/><text x="100.0189%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (9,501,721 samples, 0.18%)</title><rect x="99.7689%" y="501" width="0.1835%" height="15" fill="rgb(232,8,23)" fg:x="5164931011" fg:w="9501721"/><text x="100.0189%" y="511.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (9,501,721 samples, 0.18%)</title><rect x="99.7689%" y="485" width="0.1835%" height="15" fill="rgb(216,211,34)" fg:x="5164931011" fg:w="9501721"/><text x="100.0189%" y="495.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (9,501,721 samples, 0.18%)</title><rect x="99.7689%" y="469" width="0.1835%" height="15" fill="rgb(236,151,0)" fg:x="5164931011" fg:w="9501721"/><text x="100.0189%" y="479.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c::_{{closure}} (9,501,721 samples, 0.18%)</title><rect x="99.7689%" y="453" width="0.1835%" height="15" fill="rgb(209,168,3)" fg:x="5164931011" fg:w="9501721"/><text x="100.0189%" y="463.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (9,501,721 samples, 0.18%)</title><rect x="99.7689%" y="437" width="0.1835%" height="15" fill="rgb(208,129,28)" fg:x="5164931011" fg:w="9501721"/><text x="100.0189%" y="447.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (9,501,721 samples, 0.18%)</title><rect x="99.7689%" y="421" width="0.1835%" height="15" fill="rgb(229,78,22)" fg:x="5164931011" fg:w="9501721"/><text x="100.0189%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_unicode_class (9,501,721 samples, 0.18%)</title><rect x="99.7689%" y="405" width="0.1835%" height="15" fill="rgb(228,187,13)" fg:x="5164931011" fg:w="9501721"/><text x="100.0189%" y="415.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (3,991,975 samples, 0.08%)</title><rect x="99.8753%" y="389" width="0.0771%" height="15" fill="rgb(240,119,24)" fg:x="5170440757" fg:w="3991975"/><text x="100.1253%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8State::clear (3,991,975 samples, 0.08%)</title><rect x="99.8753%" y="373" width="0.0771%" height="15" fill="rgb(209,194,42)" fg:x="5170440757" fg:w="3991975"/><text x="100.1253%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (3,991,975 samples, 0.08%)</title><rect x="99.8753%" y="357" width="0.0771%" height="15" fill="rgb(247,200,46)" fg:x="5170440757" fg:w="3991975"/><text x="100.1253%" y="367.50"></text></g><g><title>alloc::vec::from_elem (3,991,975 samples, 0.08%)</title><rect x="99.8753%" y="341" width="0.0771%" height="15" fill="rgb(218,76,16)" fg:x="5170440757" fg:w="3991975"/><text x="100.1253%" y="351.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (3,991,975 samples, 0.08%)</title><rect x="99.8753%" y="325" width="0.0771%" height="15" fill="rgb(225,21,48)" fg:x="5170440757" fg:w="3991975"/><text x="100.1253%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (3,991,975 samples, 0.08%)</title><rect x="99.8753%" y="309" width="0.0771%" height="15" fill="rgb(239,223,50)" fg:x="5170440757" fg:w="3991975"/><text x="100.1253%" y="319.50"></text></g><g><title>core::ptr::write (2,923,339 samples, 0.06%)</title><rect x="99.8960%" y="293" width="0.0565%" height="15" fill="rgb(244,45,21)" fg:x="5171509393" fg:w="2923339"/><text x="100.1460%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1,087,017 samples, 0.02%)</title><rect x="99.9524%" y="245" width="0.0210%" height="15" fill="rgb(232,33,43)" fg:x="5174432732" fg:w="1087017"/><text x="100.2024%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,087,017 samples, 0.02%)</title><rect x="99.9524%" y="229" width="0.0210%" height="15" fill="rgb(209,8,3)" fg:x="5174432732" fg:w="1087017"/><text x="100.2024%" y="239.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1,087,017 samples, 0.02%)</title><rect x="99.9524%" y="213" width="0.0210%" height="15" fill="rgb(214,25,53)" fg:x="5174432732" fg:w="1087017"/><text x="100.2024%" y="223.50"></text></g><g><title>alloc::slice::hack::to_vec (1,087,017 samples, 0.02%)</title><rect x="99.9524%" y="197" width="0.0210%" height="15" fill="rgb(254,186,54)" fg:x="5174432732" fg:w="1087017"/><text x="100.2024%" y="207.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1,087,017 samples, 0.02%)</title><rect x="99.9524%" y="181" width="0.0210%" height="15" fill="rgb(208,174,49)" fg:x="5174432732" fg:w="1087017"/><text x="100.2024%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,087,017 samples, 0.02%)</title><rect x="99.9524%" y="165" width="0.0210%" height="15" fill="rgb(233,191,51)" fg:x="5174432732" fg:w="1087017"/><text x="100.2024%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,087,017 samples, 0.02%)</title><rect x="99.9524%" y="149" width="0.0210%" height="15" fill="rgb(222,134,10)" fg:x="5174432732" fg:w="1087017"/><text x="100.2024%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (1,087,017 samples, 0.02%)</title><rect x="99.9524%" y="133" width="0.0210%" height="15" fill="rgb(230,226,20)" fg:x="5174432732" fg:w="1087017"/><text x="100.2024%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (1,087,017 samples, 0.02%)</title><rect x="99.9524%" y="117" width="0.0210%" height="15" fill="rgb(251,111,25)" fg:x="5174432732" fg:w="1087017"/><text x="100.2024%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,087,017 samples, 0.02%)</title><rect x="99.9524%" y="101" width="0.0210%" height="15" fill="rgb(224,40,46)" fg:x="5174432732" fg:w="1087017"/><text x="100.2024%" y="111.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,087,017 samples, 0.02%)</title><rect x="99.9524%" y="85" width="0.0210%" height="15" fill="rgb(236,108,47)" fg:x="5174432732" fg:w="1087017"/><text x="100.2024%" y="95.50"></text></g><g><title>alloc::alloc::alloc (1,087,017 samples, 0.02%)</title><rect x="99.9524%" y="69" width="0.0210%" height="15" fill="rgb(234,93,0)" fg:x="5174432732" fg:w="1087017"/><text x="100.2024%" y="79.50"></text></g><g><title>malloc (1,087,017 samples, 0.02%)</title><rect x="99.9524%" y="53" width="0.0210%" height="15" fill="rgb(224,213,32)" fg:x="5174432732" fg:w="1087017"/><text x="100.2024%" y="63.50"></text></g><g><title>[libc.so.6] (1,087,017 samples, 0.02%)</title><rect x="99.9524%" y="37" width="0.0210%" height="15" fill="rgb(251,11,48)" fg:x="5174432732" fg:w="1087017"/><text x="100.2024%" y="47.50"></text></g><g><title>all (5,176,895,843 samples, 100%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(236,173,5)" fg:x="0" fg:w="5176895843"/><text x="0.2500%" y="831.50"></text></g><g><title>XLang-Rust (5,176,895,843 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(230,95,12)" fg:x="0" fg:w="5176895843"/><text x="0.2500%" y="815.50">XLang-Rust</text></g><g><title>regex_automata::meta::regex::Builder::build (2,463,111 samples, 0.05%)</title><rect x="99.9524%" y="789" width="0.0476%" height="15" fill="rgb(232,209,1)" fg:x="5174432732" fg:w="2463111"/><text x="100.2024%" y="799.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many (2,463,111 samples, 0.05%)</title><rect x="99.9524%" y="773" width="0.0476%" height="15" fill="rgb(232,6,1)" fg:x="5174432732" fg:w="2463111"/><text x="100.2024%" y="783.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir (2,463,111 samples, 0.05%)</title><rect x="99.9524%" y="757" width="0.0476%" height="15" fill="rgb(210,224,50)" fg:x="5174432732" fg:w="2463111"/><text x="100.2024%" y="767.50"></text></g><g><title>regex_automata::meta::strategy::new (2,463,111 samples, 0.05%)</title><rect x="99.9524%" y="741" width="0.0476%" height="15" fill="rgb(228,127,35)" fg:x="5174432732" fg:w="2463111"/><text x="100.2024%" y="751.50"></text></g><g><title>regex_automata::meta::strategy::Core::new (2,463,111 samples, 0.05%)</title><rect x="99.9524%" y="725" width="0.0476%" height="15" fill="rgb(245,102,45)" fg:x="5174432732" fg:w="2463111"/><text x="100.2024%" y="735.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::build_many_from_hir (2,463,111 samples, 0.05%)</title><rect x="99.9524%" y="709" width="0.0476%" height="15" fill="rgb(214,1,49)" fg:x="5174432732" fg:w="2463111"/><text x="100.2024%" y="719.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (2,463,111 samples, 0.05%)</title><rect x="99.9524%" y="693" width="0.0476%" height="15" fill="rgb(226,163,40)" fg:x="5174432732" fg:w="2463111"/><text x="100.2024%" y="703.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_alt_iter (2,463,111 samples, 0.05%)</title><rect x="99.9524%" y="677" width="0.0476%" height="15" fill="rgb(239,212,28)" fg:x="5174432732" fg:w="2463111"/><text x="100.2024%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,463,111 samples, 0.05%)</title><rect x="99.9524%" y="661" width="0.0476%" height="15" fill="rgb(220,20,13)" fg:x="5174432732" fg:w="2463111"/><text x="100.2024%" y="671.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (2,463,111 samples, 0.05%)</title><rect x="99.9524%" y="645" width="0.0476%" height="15" fill="rgb(210,164,35)" fg:x="5174432732" fg:w="2463111"/><text x="100.2024%" y="655.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (2,463,111 samples, 0.05%)</title><rect x="99.9524%" y="629" width="0.0476%" height="15" fill="rgb(248,109,41)" fg:x="5174432732" fg:w="2463111"/><text x="100.2024%" y="639.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile::_{{closure}} (2,463,111 samples, 0.05%)</title><rect x="99.9524%" y="613" width="0.0476%" height="15" fill="rgb(238,23,50)" fg:x="5174432732" fg:w="2463111"/><text x="100.2024%" y="623.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (2,463,111 samples, 0.05%)</title><rect x="99.9524%" y="597" width="0.0476%" height="15" fill="rgb(211,48,49)" fg:x="5174432732" fg:w="2463111"/><text x="100.2024%" y="607.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2,463,111 samples, 0.05%)</title><rect x="99.9524%" y="581" width="0.0476%" height="15" fill="rgb(223,36,21)" fg:x="5174432732" fg:w="2463111"/><text x="100.2024%" y="591.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_concat (2,463,111 samples, 0.05%)</title><rect x="99.9524%" y="565" width="0.0476%" height="15" fill="rgb(207,123,46)" fg:x="5174432732" fg:w="2463111"/><text x="100.2024%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,463,111 samples, 0.05%)</title><rect x="99.9524%" y="549" width="0.0476%" height="15" fill="rgb(240,218,32)" fg:x="5174432732" fg:w="2463111"/><text x="100.2024%" y="559.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (2,463,111 samples, 0.05%)</title><rect x="99.9524%" y="533" width="0.0476%" height="15" fill="rgb(252,5,43)" fg:x="5174432732" fg:w="2463111"/><text x="100.2024%" y="543.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (2,463,111 samples, 0.05%)</title><rect x="99.9524%" y="517" width="0.0476%" height="15" fill="rgb(252,84,19)" fg:x="5174432732" fg:w="2463111"/><text x="100.2024%" y="527.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c::_{{closure}} (2,463,111 samples, 0.05%)</title><rect x="99.9524%" y="501" width="0.0476%" height="15" fill="rgb(243,152,39)" fg:x="5174432732" fg:w="2463111"/><text x="100.2024%" y="511.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2,463,111 samples, 0.05%)</title><rect x="99.9524%" y="485" width="0.0476%" height="15" fill="rgb(234,160,15)" fg:x="5174432732" fg:w="2463111"/><text x="100.2024%" y="495.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_repetition (2,463,111 samples, 0.05%)</title><rect x="99.9524%" y="469" width="0.0476%" height="15" fill="rgb(237,34,20)" fg:x="5174432732" fg:w="2463111"/><text x="100.2024%" y="479.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_zero_or_one (2,463,111 samples, 0.05%)</title><rect x="99.9524%" y="453" width="0.0476%" height="15" fill="rgb(229,97,13)" fg:x="5174432732" fg:w="2463111"/><text x="100.2024%" y="463.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (2,463,111 samples, 0.05%)</title><rect x="99.9524%" y="437" width="0.0476%" height="15" fill="rgb(234,71,50)" fg:x="5174432732" fg:w="2463111"/><text x="100.2024%" y="447.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2,463,111 samples, 0.05%)</title><rect x="99.9524%" y="421" width="0.0476%" height="15" fill="rgb(253,155,4)" fg:x="5174432732" fg:w="2463111"/><text x="100.2024%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_concat (2,463,111 samples, 0.05%)</title><rect x="99.9524%" y="405" width="0.0476%" height="15" fill="rgb(222,185,37)" fg:x="5174432732" fg:w="2463111"/><text x="100.2024%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,463,111 samples, 0.05%)</title><rect x="99.9524%" y="389" width="0.0476%" height="15" fill="rgb(251,177,13)" fg:x="5174432732" fg:w="2463111"/><text x="100.2024%" y="399.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (2,463,111 samples, 0.05%)</title><rect x="99.9524%" y="373" width="0.0476%" height="15" fill="rgb(250,179,40)" fg:x="5174432732" fg:w="2463111"/><text x="100.2024%" y="383.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (2,463,111 samples, 0.05%)</title><rect x="99.9524%" y="357" width="0.0476%" height="15" fill="rgb(242,44,2)" fg:x="5174432732" fg:w="2463111"/><text x="100.2024%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c::_{{closure}} (2,463,111 samples, 0.05%)</title><rect x="99.9524%" y="341" width="0.0476%" height="15" fill="rgb(216,177,13)" fg:x="5174432732" fg:w="2463111"/><text x="100.2024%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (2,463,111 samples, 0.05%)</title><rect x="99.9524%" y="325" width="0.0476%" height="15" fill="rgb(216,106,43)" fg:x="5174432732" fg:w="2463111"/><text x="100.2024%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2,463,111 samples, 0.05%)</title><rect x="99.9524%" y="309" width="0.0476%" height="15" fill="rgb(216,183,2)" fg:x="5174432732" fg:w="2463111"/><text x="100.2024%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_unicode_class (2,463,111 samples, 0.05%)</title><rect x="99.9524%" y="293" width="0.0476%" height="15" fill="rgb(249,75,3)" fg:x="5174432732" fg:w="2463111"/><text x="100.2024%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (2,463,111 samples, 0.05%)</title><rect x="99.9524%" y="277" width="0.0476%" height="15" fill="rgb(219,67,39)" fg:x="5174432732" fg:w="2463111"/><text x="100.2024%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (2,463,111 samples, 0.05%)</title><rect x="99.9524%" y="261" width="0.0476%" height="15" fill="rgb(253,228,2)" fg:x="5174432732" fg:w="2463111"/><text x="100.2024%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::top_last_freeze (1,376,094 samples, 0.03%)</title><rect x="99.9734%" y="245" width="0.0266%" height="15" fill="rgb(235,138,27)" fg:x="5175519749" fg:w="1376094"/><text x="100.2234%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Node::set_last_transition (1,376,094 samples, 0.03%)</title><rect x="99.9734%" y="229" width="0.0266%" height="15" fill="rgb(236,97,51)" fg:x="5175519749" fg:w="1376094"/><text x="100.2234%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1,376,094 samples, 0.03%)</title><rect x="99.9734%" y="213" width="0.0266%" height="15" fill="rgb(240,80,30)" fg:x="5175519749" fg:w="1376094"/><text x="100.2234%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1,376,094 samples, 0.03%)</title><rect x="99.9734%" y="197" width="0.0266%" height="15" fill="rgb(230,178,19)" fg:x="5175519749" fg:w="1376094"/><text x="100.2234%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (1,376,094 samples, 0.03%)</title><rect x="99.9734%" y="181" width="0.0266%" height="15" fill="rgb(210,190,27)" fg:x="5175519749" fg:w="1376094"/><text x="100.2234%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (1,376,094 samples, 0.03%)</title><rect x="99.9734%" y="165" width="0.0266%" height="15" fill="rgb(222,107,31)" fg:x="5175519749" fg:w="1376094"/><text x="100.2234%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1,376,094 samples, 0.03%)</title><rect x="99.9734%" y="149" width="0.0266%" height="15" fill="rgb(216,127,34)" fg:x="5175519749" fg:w="1376094"/><text x="100.2234%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1,376,094 samples, 0.03%)</title><rect x="99.9734%" y="133" width="0.0266%" height="15" fill="rgb(234,116,52)" fg:x="5175519749" fg:w="1376094"/><text x="100.2234%" y="143.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1,376,094 samples, 0.03%)</title><rect x="99.9734%" y="117" width="0.0266%" height="15" fill="rgb(222,124,15)" fg:x="5175519749" fg:w="1376094"/><text x="100.2234%" y="127.50"></text></g><g><title>alloc::alloc::realloc (1,376,094 samples, 0.03%)</title><rect x="99.9734%" y="101" width="0.0266%" height="15" fill="rgb(231,179,28)" fg:x="5175519749" fg:w="1376094"/><text x="100.2234%" y="111.50"></text></g><g><title>realloc (1,376,094 samples, 0.03%)</title><rect x="99.9734%" y="85" width="0.0266%" height="15" fill="rgb(226,93,45)" fg:x="5175519749" fg:w="1376094"/><text x="100.2234%" y="95.50"></text></g><g><title>[libc.so.6] (1,376,094 samples, 0.03%)</title><rect x="99.9734%" y="69" width="0.0266%" height="15" fill="rgb(215,8,51)" fg:x="5175519749" fg:w="1376094"/><text x="100.2234%" y="79.50"></text></g><g><title>[libc.so.6] (1,376,094 samples, 0.03%)</title><rect x="99.9734%" y="53" width="0.0266%" height="15" fill="rgb(223,106,5)" fg:x="5175519749" fg:w="1376094"/><text x="100.2234%" y="63.50"></text></g></svg></svg>